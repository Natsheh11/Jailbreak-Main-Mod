/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <jailbreak_core>
#include <fakemeta>
#include <engine>
#include <hamsandwich>

#if !defined USE_TOGGLE
#define USE_TOGGLE 2
#endif

#define PLUGIN "[JB] DAY/DUEL: Cells Remover & Auto door opener"
#define AUTHOR "Natsheh"

new g_cells_index, HamHook:FW_HAM_TOUCH_FUNC_DOOR_POST, HamHook:FW_HAM_TOUCH_FUNC_WALL_TOGGLE_POST,
 HamHook:FW_HAM_TOUCH_FUNC_ROT_DOOR_POST;

new const szOpenCells_Log[] = "The cells are opened!";
new const szCloseCells_Log[] = "The cells are closed!";

static Float:g_iLAST_USE[33];

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_cells_index = get_xvar_id("CELLS_BUTTON");
	
	register_jailbreak_logmessages("fw_cells_opened", szOpenCells_Log);
	register_jailbreak_logmessages("fw_cells_closed", szCloseCells_Log);
	
	DisableHamForward( (FW_HAM_TOUCH_FUNC_DOOR_POST = RegisterHam(Ham_Touch, "func_door", "fw_touch_func_door_post", true)) );
	DisableHamForward( (FW_HAM_TOUCH_FUNC_ROT_DOOR_POST = RegisterHam(Ham_Touch, "func_door_rotating", "fw_touch_func_door_post", true)) );
	DisableHamForward( (FW_HAM_TOUCH_FUNC_WALL_TOGGLE_POST = RegisterHam(Ham_Touch, "func_wall_toggle", "fw_touch_func_door_post", true)) );
}

public plugin_cfg()
{
	g_cells_index = get_xvar_num(g_cells_index);
}

public jb_round_start_pre()
{
	cells_closed();
}

public fw_cells_opened()
{
	cells_opened();
}

public fw_cells_closed()
{
	cells_closed();
}

public jb_lr_duel_started()
{
	enable_doors_opening();
}

public jb_lr_duel_ended()
{
	disable_doors_opening();
}

public jb_day_started(iDayid)
{
	cells_opened();
	enable_doors_opening();
}

public jb_day_ended(iDayid)
{
	cells_closed();
	disable_doors_opening();
}

public fw_touch_func_door_post(ent, toucher)
{
	static Float:g_flGametime;
	g_flGametime = get_gametime();
	
	// check if its a player and he's not standing on the door otherwise it might kill him.
	if(is_user_alive(toucher) && (g_iLAST_USE[toucher] < g_flGametime) && pev(toucher, pev_groundentity) != ent)
	{
		ExecuteHamB(Ham_Use, ent, toucher, toucher, USE_TOGGLE, 0.0);
		g_iLAST_USE[toucher] = g_flGametime + 1.0;
	}
}

enable_doors_opening()
{
	EnableHamForward(FW_HAM_TOUCH_FUNC_DOOR_POST);
	EnableHamForward(FW_HAM_TOUCH_FUNC_ROT_DOOR_POST);
	EnableHamForward(FW_HAM_TOUCH_FUNC_WALL_TOGGLE_POST);
}

disable_doors_opening()
{
	DisableHamForward(FW_HAM_TOUCH_FUNC_DOOR_POST);
	DisableHamForward(FW_HAM_TOUCH_FUNC_ROT_DOOR_POST);
	DisableHamForward(FW_HAM_TOUCH_FUNC_WALL_TOGGLE_POST);
}

cells_opened()
{
	new iEnt = g_cells_index;
	if(iEnt >= 0)
	{
		new xValue[64];
		pev(iEnt, pev_target, xValue, charsmax(xValue));
		iEnt = -1;
		while( (iEnt = find_ent_by_tname(iEnt, xValue)) > 0 )
		{
			set_pev(iEnt, pev_solid, SOLID_NOT);
		}
	}
}

cells_closed()
{
	new iEnt = g_cells_index;
	if(iEnt >= 0)
	{
		new xValue[64];
		pev(iEnt, pev_target, xValue, charsmax(xValue));
		iEnt = -1;
		while( (iEnt = find_ent_by_tname(iEnt, xValue)) > 0 )
		{
			set_pev(iEnt, pev_solid, SOLID_BSP);
		}
	}
}
