/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <jailbreak_core>
#include <regex>
#include <inc_get_team_fix>

#if AMXX_VERSION_NUM < 183
#include <dhudmessage>
#endif

#if !defined FSOPT_LINES_COUNT
#define FSOPT_LINES_COUNT 1
#endif

#define PLUGIN "[JB] Effects System"
#define AUTHOR "Natsheh"

#if !defined EOS
#define EOS 0
#endif

#define HUDMESSAGE_MAX_LEN 512
#define COMMAND_MAX_LENGTH 196
#define CHAT_MESSAGE_MAX_LENGTH 192
#define LINE_MAX_LENGTH 600
#define KEY_MAX_LENGTH 32

new const JB_EFFECTS_FILE[] = "jailbreak_effects.ini";

enum any:EFFECTS_DATA (+=1)
{
	EVENT_LOG[MAX_LOG_MESSAGE_LENGTH] = 0,
	Array:SOUNDS_ARRAY,
	Array:HUDMESSAGES_ARRAY,
	Array:CHATMESSAGES_ARRAY,
	Array:COMMANDS,
	Array:REMOVE_HUDMSGS_ARRAY
}

enum any:Chatmessages_Params (+=1)
{
	CHATMSG_STRING[CHAT_MESSAGE_MAX_LENGTH],
	CHATMSG_RECIEVER[32]
}

enum any:Hudmessages_Params (+=1)
{
	HUDMSG_STRING[HUDMESSAGE_MAX_LEN] = 0,
	HUDMSG_COLOR_R,
	HUDMSG_COLOR_G,
	HUDMSG_COLOR_B,
	Float:HUDMSG_POS_X,
	Float:HUDMSG_POS_Y,
	HUDMSG_EFFECTS,
	Float:HUDMSG_FXTIME,
	Float:HUDMSG_HOLDTIME,
	Float:HUDMSG_FADEIN_TIME,
	Float:HUDMSG_FADEOUT_TIME,
	HUDMSG_REPEAT,
	HUDMSG_STYLE,
	HUDMSG_ID[32],
	HUDMSG_RECEIVER[32],
	Array:HUDMSG_DATA_PARAMS_ARRAY
}

enum any:Hudmessage_SetTask_Data (+=1)
{
	HUDMSG_DATA_USERS[32],
	HUDMSG_DATA_MAXUSERS,
	HUDMSG_DATA_ARRAY_INDEX,
	HUDMSG_DATA_ARRAY_ITEM,
	HUDMSG_DATA_TARGET,
	HUDMSG_DATA_TASK_INDEX
}

enum any:iKEYS (+=1)
{
	KEY_COMMAND = 0,
	KEY_SOUND,
	KEY_CHATMSG_STR,
	KEY_CHATMSG_RECEIVER,
	KEY_HUDMSG_STR,
	KEY_HUDMSG_CR,
	KEY_HUDMSG_CG,
	KEY_HUDMSG_CB,
	KEY_HUDMSG_POS_X,
	KEY_HUDMSG_POS_Y,
	KEY_HUDMSG_EFFECTS,
	KEY_HUDMSG_FXTIME,
	KEY_HUDMSG_HOLDTIME,
	KEY_HUDMSG_FADEIN_TIME,
	KEY_HUDMSG_FADEOUT_TIME,
	KEY_HUDMSG_REPEAT,
	KEY_HUDMSG_STYLE,
	KEY_HUDMSG_ID,
	KEY_HUDMSG_REMOVE,
	KEY_HUDMSG_RECEIVER
}

new const sKEYS[][] = {
	"COMMAND",
	"SOUND",
	"CHAT_MESSAGE",
	"CHATMSG_RECEIVER",
	"HUDMSG_MESSAGE",
	"HUDMSG_COLOR_R",
	"HUDMSG_COLOR_G",
	"HUDMSG_COLOR_B",
	"HUDMSG_POS_X",
	"HUDMSG_POS_Y",
	"HUDMSG_EFFECTS",
	"HUDMSG_FXTIME",
	"HUDMSG_HOLDTIME",
	"HUDMSG_FADEIN_TIME",
	"HUDMSG_FADEOUT_TIME",
	"HUDMSG_REPEAT",
	"HUDMSG_STYLE",
	"HUDMSG_ID",
	"HUDMSG_REMOVE",
	"HUDMSG_RECEIVER"
}

new g_aHUDMSG_DATA[Hudmessage_SetTask_Data];
new Array:array_effects=Invalid_Array, g_total_events, Trie:Trie_Hudmessages_ids=Invalid_Trie, g_TaskIDs = 1;
new Regex:iRegex_Pattren=REGEX_PATTERN_FAIL;

public plugin_end()
{
	for(new i, Array:tempArray, xArray[EFFECTS_DATA]; i < g_total_events; i ++)
	{
		ArrayGetArray(array_effects, i, xArray)
		
		if((tempArray = xArray[SOUNDS_ARRAY]) != Invalid_Array)
		{
			ArrayDestroy(tempArray);
		}
		if((tempArray = xArray[HUDMESSAGES_ARRAY]) != Invalid_Array)
		{
			ArrayDestroy(tempArray);
		}
		if((tempArray = xArray[CHATMESSAGES_ARRAY]) != Invalid_Array)
		{
			ArrayDestroy(tempArray);
		}
		if((tempArray = xArray[COMMANDS]) != Invalid_Array)
		{
			ArrayDestroy(tempArray);
		}
		if((tempArray = xArray[REMOVE_HUDMSGS_ARRAY]) != Invalid_Array)
		{
			ArrayDestroy(tempArray);
		}
	}
	
	ArrayDestroy(array_effects);
	TrieDestroy(Trie_Hudmessages_ids);
	
	regex_free(iRegex_Pattren);
}

public plugin_precache()
{
	array_effects = ArrayCreate(EFFECTS_DATA,1);
	
	new sFile[64];
	get_configsdir(sFile, charsmax(sFile));
	format(sFile, charsmax(sFile), "%s/%s", sFile, JB_EFFECTS_FILE);
	
	new fp = fopen(sFile, "rt");
	
	if(!fp)
	{
		if(!file_exists(sFile))
		{
			write_file(sFile, "; type (log on) in the server console to check out the log messages that start with the prefix JAILBREAK...")
			write_file(sFile, "; [ The JAILBREAK logmessage ]^n")
			write_file(sFile, "; Available Keys :-")
			
			for(new i, iLine, sText[64]; i < sizeof sKEYS; i++)
			{
				iLine = file_size(sFile, FSOPT_LINES_COUNT);
				formatex(sText, charsmax(sText), "%s%s", sKEYS[i], (i == charsmax(sKEYS)) ? ".":" ,");
				write_file(sFile, sText, --iLine);
			}
			
			write_file(sFile, "^n[Round has started]")
			write_file(sFile, "HUDMSG_MESSAGE = This server is using Jailbreak mod By Natsheh.")
			write_file(sFile, "HUDMSG_EFFECTS = 2      ; 0-No effects 1-Glowing 2-Scenario writing")
			write_file(sFile, "HUDMSG_HOLDTIME = 10    ; time of the message, life")
			write_file(sFile, "HUDMSG_FXTIME = 0.5")
			write_file(sFile, "HUDMSG_FADEIN_TIME = 0.05    ; length of time when message fading in")
			write_file(sFile, "HUDMSG_FADEOUT_TIME = 0.5    ; length of time when message fading out")
			write_file(sFile, "HUDMSG_COLOR_R = 200    ; value's between (0-255)")
			write_file(sFile, "HUDMSG_COLOR_G = 200    ; value's between (0-255)")
			write_file(sFile, "HUDMSG_COLOR_B = 200    ; value's between (0-255)")
			write_file(sFile, "; HUDMSG_POS_X = value's between(0.0-1.0) [0.0]=> is max left of the screen [1.0]=> is the max right of the screen")
			write_file(sFile, "HUDMSG_POS_X = -1.0")
			write_file(sFile, "; HUDMSG_POS_Y = value's between(0.0-1.0) [0.0]=> is max top of the screen [1.0]=> is the max bottom of the screen")
			write_file(sFile, "HUDMSG_POS_Y = 0.75")
			write_file(sFile, "; HUDMSG_STYLE = (1 - is dhudmessage) (0 - is regular hudmessage[default])")
			write_file(sFile, "HUDMSG_STYLE = 1")
			write_file(sFile, "; HUDMSG_REPEAT = (0 - no repeat) (1 - repeat infinite times) (X > 1 - repeat X times)")
			write_file(sFile, "HUDMSG_REPEAT = 1")
			write_file(sFile, "; HUDMSG_RECEIVER = (0/@all - is for all players to receive the message) (@Team - for a specific team) (playername) (#1...#32 - playerid)");
			write_file(sFile, "HUDMSG_RECEIVER = 0")
			
			write_file(sFile, "CHAT_MESSAGE = !gThis server is using !tJailbreak mod !yBy !tNatsheh!g.")
			write_file(sFile, "CHATMSG_RECEIVER = Natsheh ; Player with name Natsheh will receive this msg")
			
			fp = fopen(sFile, "rt");
		}
		
		if(!fp)
		{
			return;
		}
	}
	
	new sBuffer[LINE_MAX_LENGTH], szKey[KEY_MAX_LENGTH], any:xArray[EFFECTS_DATA],
		any:xArray2[Hudmessages_Params], any:xArray3[Chatmessages_Params], count,
			j, sizeofkeys = sizeof sKEYS,
				registered, arraysize, arraysize2;
	
	while( fgets(fp, sBuffer, charsmax(sBuffer)) > 0 )
	{
		trim(sBuffer);
		
		if(strlen(sBuffer) <= 3) continue;
		
		switch( sBuffer[0] )
		{
			case '/': if(sBuffer[1] == '/') continue;
			case ';', EOS: continue;
			case '[':
			{
				if(contain(sBuffer[1], "]") == -1) continue;
				
				count = 0; registered = 0; arraysize = 0;

				j = strlen(sBuffer);
				while( j > 1 && sBuffer[--j] != ']' ) { }

				copy(xArray[EVENT_LOG], min(--j,charsmax(xArray[EVENT_LOG])), sBuffer[1]);
				xArray[SOUNDS_ARRAY] = Invalid_Array;
				xArray[CHATMESSAGES_ARRAY] = Invalid_Array;
				xArray[HUDMESSAGES_ARRAY] = Invalid_Array;
				xArray[COMMANDS] = Invalid_Array;
				xArray[REMOVE_HUDMSGS_ARRAY] = Invalid_Array;
				
				xArray2[HUDMSG_STRING][0] = EOS;
				xArray2[HUDMSG_COLOR_R] = 200;
				xArray2[HUDMSG_COLOR_G] = 100;
				xArray2[HUDMSG_COLOR_B] = 0;
				xArray2[HUDMSG_POS_X] = -1.0;
				xArray2[HUDMSG_POS_Y] = -1.0;
				xArray2[HUDMSG_EFFECTS] = 0;
				xArray2[HUDMSG_FXTIME] = 6.0;
				xArray2[HUDMSG_HOLDTIME] = 6.0;
				xArray2[HUDMSG_FADEIN_TIME] = 0.1;
				xArray2[HUDMSG_FADEOUT_TIME] = 0.5;
				xArray2[HUDMSG_REPEAT] = 0;
				xArray2[HUDMSG_STYLE] = 0;
				xArray2[HUDMSG_ID][0] = EOS;
				xArray2[HUDMSG_RECEIVER][0] = EOS;
				xArray2[HUDMSG_DATA_PARAMS_ARRAY] = Invalid_Array;
				
				xArray3[CHATMSG_STRING][0] = EOS;
				xArray3[CHATMSG_RECIEVER][0] = EOS;
				
				ArrayPushArray(array_effects, xArray);
				g_total_events ++;
			}
			default:
			{
				if(count >= sizeofkeys || !g_total_events) continue;
				
				strtok(sBuffer, szKey, charsmax(szKey), sBuffer, charsmax(sBuffer), '=');
				trim(szKey);
				trim(sBuffer);
				remove_quotes(szKey);
				remove_quotes(sBuffer);
				
				for(j = 0; j < sizeofkeys; j++)
				{
					if(equali(sKEYS[j], szKey) && !(registered & (1<<j)))
					{
						registered |= (1<<j);
						count++;
						
						ArrayGetArray(array_effects, (g_total_events-1), xArray)
						
						switch( j )
						{
							case KEY_CHATMSG_RECEIVER:
							{
								copy(xArray3[CHATMSG_RECIEVER], charsmax(xArray3[CHATMSG_RECIEVER]), sBuffer);
								if(xArray[CHATMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[CHATMESSAGES_ARRAY], (arraysize-1), xArray3);
								}
							}
							case KEY_CHATMSG_STR:
							{
								registered &= ~(1<<j);
								--count;
								
								if(sBuffer[0] != EOS)
								{
									copy(xArray3[CHATMSG_STRING], charsmax(xArray3[CHATMSG_STRING]), sBuffer);
									xArray3[CHATMSG_RECIEVER][0] = EOS;
									
									if(xArray[CHATMESSAGES_ARRAY] == Invalid_Array)
									{
										xArray[CHATMESSAGES_ARRAY] = ArrayCreate(Chatmessages_Params,1);
									}
									
									ArrayPushArray(xArray[CHATMESSAGES_ARRAY], xArray3);
									arraysize2 ++;
								}
							}
							case KEY_COMMAND:
							{
								registered &= ~(1<<j);
								--count;
								
								if(sBuffer[0] != EOS)
								{
									if(xArray[COMMANDS] == Invalid_Array)
									{
										xArray[COMMANDS] = ArrayCreate(COMMAND_MAX_LENGTH,1);
									}
									
									ArrayPushString(xArray[COMMANDS], sBuffer);
								}
							}
							case KEY_SOUND:
							{
								registered &= ~(1<<j);
								--count;
								
								if(sBuffer[0] != EOS)
								{
									if(xArray[SOUNDS_ARRAY] == Invalid_Array)
									{
										xArray[SOUNDS_ARRAY] = ArrayCreate(64,1);
									}
									
									ArrayPushString(xArray[SOUNDS_ARRAY], sBuffer);
									PRECACHE_FILE(sBuffer);
								}
							}
							case KEY_HUDMSG_REMOVE:
							{
								registered &= ~(1<<j);
								--count;
								
								if(sBuffer[0] != EOS)
								{
									if(xArray[REMOVE_HUDMSGS_ARRAY] == Invalid_Array)
									{
										xArray[REMOVE_HUDMSGS_ARRAY] = ArrayCreate(32,1);
									}
									
									ArrayPushString(xArray[REMOVE_HUDMSGS_ARRAY], sBuffer);
								}
							}
							case KEY_HUDMSG_RECEIVER:
							{
								copy(xArray2[HUDMSG_RECEIVER], charsmax(xArray2[HUDMSG_RECEIVER]), sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_STR:
							{
								registered &= ~(1<<j);
								count--;
								
								if(sBuffer[0] != EOS)
								{
									xArray2[HUDMSG_STRING][0] = EOS;
									xArray2[HUDMSG_COLOR_R] = 200;
									xArray2[HUDMSG_COLOR_G] = 100;
									xArray2[HUDMSG_COLOR_B] = 0;
									xArray2[HUDMSG_POS_X] = -1.0;
									xArray2[HUDMSG_POS_Y] = -1.0;
									xArray2[HUDMSG_EFFECTS] = 0;
									xArray2[HUDMSG_FXTIME] = 6.0;
									xArray2[HUDMSG_HOLDTIME] = 6.0;
									xArray2[HUDMSG_FADEIN_TIME] = 0.1;
									xArray2[HUDMSG_FADEOUT_TIME] = 0.5;
									xArray2[HUDMSG_REPEAT] = 0;
									xArray2[HUDMSG_STYLE] = 0;
									xArray2[HUDMSG_ID][0] = EOS;
									xArray2[HUDMSG_RECEIVER][0] = EOS;
									
									copy(xArray2[HUDMSG_STRING], charsmax(xArray2[HUDMSG_STRING]), sBuffer)
									if(xArray[HUDMESSAGES_ARRAY] == Invalid_Array)
									{
										xArray[HUDMESSAGES_ARRAY] = ArrayCreate(Hudmessages_Params,1);
									}
									
									ArrayPushArray(xArray[HUDMESSAGES_ARRAY], xArray2);
									arraysize++;
									registered = count = 0;
								}
							}
							case KEY_HUDMSG_CR:
							{
								xArray2[HUDMSG_COLOR_R] = str_to_num(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_CG:
							{
								xArray2[HUDMSG_COLOR_G] = str_to_num(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_CB:
							{
								xArray2[HUDMSG_COLOR_B] = str_to_num(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_POS_X:
							{
								xArray2[HUDMSG_POS_X] = str_to_float(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_POS_Y:
							{
								xArray2[HUDMSG_POS_Y] = str_to_float(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_EFFECTS:
							{
								xArray2[HUDMSG_EFFECTS] = clamp(str_to_num(sBuffer), 0, 2);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_FXTIME:
							{
								xArray2[HUDMSG_FXTIME] = str_to_float(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_HOLDTIME:
							{
								xArray2[HUDMSG_HOLDTIME] = str_to_float(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_FADEIN_TIME:
							{
								xArray2[HUDMSG_FADEIN_TIME] = str_to_float(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_FADEOUT_TIME:
							{
								xArray2[HUDMSG_FADEOUT_TIME] = str_to_float(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_REPEAT:
							{
								xArray2[HUDMSG_REPEAT] = str_to_num(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_STYLE:
							{
								xArray2[HUDMSG_STYLE] = str_to_num(sBuffer);
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
							case KEY_HUDMSG_ID:
							{
								copy(xArray2[HUDMSG_ID], charsmax(xArray2[HUDMSG_ID]), sBuffer)
								if(xArray[HUDMESSAGES_ARRAY] != Invalid_Array)
								{
									ArraySetArray(xArray[HUDMESSAGES_ARRAY], (arraysize-1), xArray2)
								}
							}
						}
						
						ArraySetArray(array_effects, (g_total_events-1), xArray);
						
						j = sizeofkeys;
					}
				}
			}
		}
	}
	fclose(fp)
}

new g_cvar_hostname, IndexVarVOTEDAY_TIMER_LENGTH, IndexVarFUNDAY_TIMER_LENGTH, IndexVarLR_TIMER_LENGTH;

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	Trie_Hudmessages_ids = TrieCreate();
	
	if(g_total_events > 0)
	{
		new xArray[EFFECTS_DATA];
		for(new i; i < g_total_events; i++)
		{
			ArrayGetArray(array_effects, i, xArray);
			register_jailbreak_logmessages("fw_messagelog", xArray[EVENT_LOG]);
		}
	}
	
	new iRegexRet;
	iRegex_Pattren = regex_compile("^^.*(\{ *(\d+(?: *\. *\d* *| *)) *([\*\+\-\\^^]) *(\d+(?: *\. *\d* *| *))\}).*$", iRegexRet, "", 0, "im");
	
	IndexVarVOTEDAY_TIMER_LENGTH = get_xvar_id("VOTEDAY_TIMER_LENGTH");
	IndexVarFUNDAY_TIMER_LENGTH = get_xvar_id("FUNDAY_TIMER_LENGTH");
	IndexVarLR_TIMER_LENGTH = get_xvar_id("LR_TIMER_LENGTH");
	
	//register_clcmd("jb_effects", "clcmd_effects");
}

/*public clcmd_effects(id, level, cid)
{
	//create_effects_menu(id)
}

create_sys_effects_menu(id)
{
	new szText[96]
	formatex(szText, charsmax(szText), "Jailbreak Effects System");
	new menu = menu_create(szText, "syst_eff_mhandler");
	
	if(g_total_events > 0)
	{
		new xArray[EFFECTS_DATA];
		for(new i; i < g_total_events; i++)
		{
			ArrayGetArray(array_effects, i, xArray);
			register_jailbreak_logmessages("fw_messagelog", xArray[EVENT_LOG]);
		}
	}
}*/

public plugin_cfg()
{
	g_cvar_hostname = get_cvar_pointer("hostname");
}

public fw_messagelog(const msglog[])
{
	static xArray[EFFECTS_DATA], szExtLog[MAX_LOG_MESSAGE_LENGTH], szCMDTYPE[7], szCommand[COMMAND_MAX_LENGTH], szString[64],
			i, commands, iUsers[32], iMaxusers, iLen, z, x, n, Array:P_ArrayRepeatingData=Invalid_Array;
	
	if(P_ArrayRepeatingData == Invalid_Array) P_ArrayRepeatingData=ArrayCreate(Hudmessages_Params,1);
	iLen = strlen(msglog) - 1;
	arrayset(iUsers, 0, sizeof iUsers);
	iMaxusers = x = szExtLog[0] = 0;
	z = sizeof iUsers;
	
	while( (x=strfind(msglog, "^"", .pos = x)) != -1 )
	{
		if(x >= iLen || strfind(msglog, "^"", .pos = x + 1) == -1) break;

		x += copyc(szExtLog, charsmax(szExtLog), msglog[++x], '^"') + 2;
		
		if(szExtLog[0] != EOS)
		{
			parse_loguser(szExtLog, "", 0, iUsers[iMaxusers]);
			if(find_player("k", iUsers[iMaxusers]) > 0)
			{
				if(++iMaxusers >= z)
				{
					break;
				}
			}
		}
	}
	
	static any:xArray2[Hudmessages_Params], any:xArray3[Hudmessages_Params];
	static f, szHUDID[KEY_MAX_LENGTH], szMessage[HUDMESSAGE_MAX_LEN];
	static any:xChatArray3[Chatmessages_Params], target, team;
	static iCurTaskID, szParams[16];
	
	for(i = 0, commands = 0; i < g_total_events; i++)
	{
		ArrayGetArray(array_effects, i, xArray);
		
		z = n = 0;
		while(contain(xArray[EVENT_LOG], "#%??") != -1)
		{
			if( (n >= iLen) ||
			    ((n=strfind(msglog, "'", .pos = n)) == -1) ||
			    (strfind(msglog, "'", .pos = n + 1) == -1) ) break;
			
			n += copyc(szExtLog, charsmax(szExtLog), msglog[++n], '^'') + 2;
			
			replace(xArray[EVENT_LOG], charsmax(xArray[EVENT_LOG]), "#%??", szExtLog);
		}
		
		if(containi(msglog, xArray[EVENT_LOG]) > -1)
		{
			if(xArray[COMMANDS] != Invalid_Array && (commands=ArraySize(xArray[COMMANDS])) > 0)
			{
				new iServerCMDS;

				while( commands > 0 )
				{
					commands --;
					ArrayGetString(xArray[COMMANDS], commands, szCommand, charsmax(szCommand));
					strtok(szCommand, szCMDTYPE, charsmax(szCMDTYPE), szCommand, charsmax(szCommand), ';');
					
					replace_all(szCommand, charsmax(szCommand), "'", "^"");
					
					z = x = n = 0;
					while( strfind(szCommand, "#%value(") != -1 )
					{
						if( (n >= iLen) ||
						    ((n=strfind(msglog, "'", .pos = n)) == -1) ||
						    (strfind(msglog, "'", .pos = n + 1) == -1) ) break;

						n += copyc(szExtLog, charsmax(szExtLog), msglog[++n], '^'') + 2;
						formatex(szString, charsmax(szString), "#%%value(%d)", ++z);
						if(containi(szCommand, szString) > -1)
						{
							replace_all(szCommand, charsmax(szCommand), szString, szExtLog);
						}
					}
					
					replace_string_args(szCommand, charsmax(szCommand), iUsers, iMaxusers);
					
					if(equali(szCMDTYPE, "CLIENT"))
					{
						client_cmd(0, szCommand);
					}
					else
					{
						server_cmd(szCommand);
						iServerCMDS++;
					}
				}

				if(iServerCMDS > 0)
				{ // Execute SERVER COMMANDS ASAP
					server_exec();
				}
			}
			
			if(xArray[SOUNDS_ARRAY] != Invalid_Array)
			{
				ArrayGetString(xArray[SOUNDS_ARRAY], random(ArraySize(xArray[SOUNDS_ARRAY])), szCommand, charsmax(szCommand));
				
				z = x = n = 0;
				while( strfind(szCommand, "#%value(") != -1 )
				{
					if( (n >= iLen) ||
					    ((n=strfind(msglog, "'", .pos = n)) == -1) ||
					    (strfind(msglog, "'", .pos = n + 1) == -1) ) break;

					n += copyc(szExtLog, charsmax(szExtLog), msglog[++n], '^'') + 2;
					formatex(szString, charsmax(szString), "#%%value(%d)", ++z);
					if(containi(szCommand, szString) > -1)
					{
						replace_all(szCommand, charsmax(szCommand), szString, szExtLog);
					}
				}
				
				replace_string_args(szCommand, charsmax(szCommand), iUsers, iMaxusers);
				
				play_sound(szCommand);
			}
			
			if(xArray[CHATMESSAGES_ARRAY] != Invalid_Array)
			{
				target = team = -1;
				ArrayGetArray(xArray[CHATMESSAGES_ARRAY], random(ArraySize(xArray[CHATMESSAGES_ARRAY])), xChatArray3);
				
				replace_string_args(xChatArray3[CHATMSG_RECIEVER], charsmax(xChatArray3[CHATMSG_RECIEVER]), iUsers, iMaxusers);
				
				switch( xArray3[CHATMSG_RECIEVER][0] )
				{
					case EOS: target = team = 0;
					case '~': { target = find_player("bh", xChatArray3[CHATMSG_RECIEVER][1]); target = !target ? -1:target; team = 0; }
					case '#': { target = find_player("kh", str_to_num(xChatArray3[CHATMSG_RECIEVER][1])); target = !target ? -1:target; team = 0; }
					case '@':
					{
						target = 0;
						switch( xChatArray3[CHATMSG_RECIEVER][1] )
						{
							case 'C', 'c', 'G', 'g': team = 'C';
							case 'T', 't', 'P', 'p': team = 'T';
							case 's', 'S': team = 'S';
							case '@', 'A', 'a': team = 0;
							default: team = -1;
						}
					}
					default:
					{
						team = 0;
						target = find_player("ah", xChatArray3[CHATMSG_RECIEVER]); // search for player by fullname
						if(!target) target = find_player("ch", xChatArray3[CHATMSG_RECIEVER]); // search for player by steamid
						if(!target) target = find_player("dh", xChatArray3[CHATMSG_RECIEVER]); // search for player by ip
						if(!target) target = -1;
					}
				}
				
				if(target != -1 && team != -1)
				{
					z = x = n = 0;
					while( strfind(xChatArray3[CHATMSG_STRING], "#%value(") != -1 )
					{
						if( (n >= iLen) ||
						    ((n=strfind(msglog, "'", .pos = n)) == -1) ||
						    (strfind(msglog, "'", .pos = n + 1) == -1) ) break;

						n += copyc(szExtLog, charsmax(szExtLog), msglog[++n], '^'') + 2;
						formatex(szString, charsmax(szString), "#%%value(%d)", ++z);
						if(containi(xChatArray3[CHATMSG_STRING], szString) > -1)
						{
							replace_all(xChatArray3[CHATMSG_STRING], charsmax(xChatArray3[CHATMSG_STRING]), szString, szExtLog);
						}
					}
					
					replace_string_args(xChatArray3[CHATMSG_STRING], charsmax(xChatArray3[CHATMSG_STRING]), iUsers, iMaxusers);
					
					cprint_chat(target, team, xChatArray3[CHATMSG_STRING]);
				}
			}

			if(any:xArray[REMOVE_HUDMSGS_ARRAY] != Invalid_Array && (commands = ArraySize(xArray[REMOVE_HUDMSGS_ARRAY])) > 0)
			{
				while( commands > 0 )
				{
					commands --;
					ArrayGetString(xArray[REMOVE_HUDMSGS_ARRAY], commands, szString, charsmax(szString));
					if(TrieKeyExists(Trie_Hudmessages_ids, szString))
					{
						remove_hudtask(szString, P_ArrayRepeatingData);
					}
				}
			}

			if(any:xArray[HUDMESSAGES_ARRAY] != Invalid_Array) // valid hudmessage array handler :)
			{
				target = team = -1;
				xArray2[HUDMSG_REPEAT] = 0;
				ArrayGetArray(xArray[HUDMESSAGES_ARRAY], (iCurTaskID=random(ArraySize(xArray[HUDMESSAGES_ARRAY]))), xArray2)
				
				replace_string_args(xArray2[HUDMSG_RECEIVER], charsmax(xArray2[HUDMSG_RECEIVER]), iUsers, iMaxusers);

				switch( xArray2[HUDMSG_RECEIVER][0] )
				{
					case EOS: target = team = 0;
					case '~': { target = find_player("bh", xArray2[HUDMSG_RECEIVER][1]); target = !target ? -1:target; team = 0; }
					case '#': { target = find_player("kh", str_to_num(xArray2[HUDMSG_RECEIVER][1])); target = !target ? -1:target; team = 0; }
					case '@':
					{
						target = 0;
						switch( xArray2[HUDMSG_RECEIVER][1] )
						{
							case 'C', 'c', 'G', 'g': team = 'C';
							case 'T', 't', 'P', 'p': team = 'T';
							case 's', 'S': team = 'S';
							default: team = -1;
						}
					}
					default:
					{
						team = 0;
						target = find_player("ah", xArray2[HUDMSG_RECEIVER]); // search for player by fullname
						if(!target) target = find_player("ch", xArray2[HUDMSG_RECEIVER]); // search for player by steamid
						if(!target) target = find_player("dh", xArray2[HUDMSG_RECEIVER]); // search for player by ip
						if(!target) target = -1;
					}
				}
				
				if(target != -1 && team != -1)
				{
					copy(szMessage, charsmax(szMessage), xArray2[HUDMSG_STRING]);
					
					z = x = n = 0;
					while( strfind(szMessage, "#%value(") != -1 )
					{
						if( (n >= iLen) ||
						    ((n=strfind(msglog, "'", .pos = n)) == -1) ||
						    (strfind(msglog, "'", .pos = n + 1) == -1) ) break;

						n += copyc(szExtLog, charsmax(szExtLog), msglog[++n], '^'') + 2;
						formatex(szString, charsmax(szString), "#%%value(%d)", ++z);
						if(containi(szMessage, szString) > -1)
						{
							replace_all(szMessage, charsmax(szMessage), szString, szExtLog);
							if(xArray2[HUDMSG_REPEAT] > 0) replace_all(xArray2[HUDMSG_STRING], charsmax(xArray2[HUDMSG_STRING]), szString, szExtLog);
						}
					}
					
					replace_string_args(szMessage, charsmax(szMessage), iUsers, iMaxusers);
					
					static players[32], pnum;
					switch( team )
					{
						case 'C' : get_players(players, pnum, "che", "CT");
						case 'T' : get_players(players, pnum, "che", "TERRORIST");
						case 'S' : get_players(players, pnum, "che", "SPECTATOR");
						default: players[ (pnum = 1) - 1 ] = target;
					}

					x = pnum;
					switch( xArray2[HUDMSG_STYLE] )
					{
						case 0:
						{
							set_hudmessage(xArray2[HUDMSG_COLOR_R], xArray2[HUDMSG_COLOR_G], xArray2[HUDMSG_COLOR_B], xArray2[HUDMSG_POS_X],
							xArray2[HUDMSG_POS_Y], xArray2[HUDMSG_EFFECTS], xArray2[HUDMSG_FXTIME], xArray2[HUDMSG_HOLDTIME],
							xArray2[HUDMSG_FADEIN_TIME], xArray2[HUDMSG_FADEOUT_TIME], -1);
							
							while( pnum-- > 0 )
							{
								show_hudmessage(players[pnum], szMessage);
							}
						}
						case 1:
						{
							set_dhudmessage(xArray2[HUDMSG_COLOR_R], xArray2[HUDMSG_COLOR_G], xArray2[HUDMSG_COLOR_B], xArray2[HUDMSG_POS_X],
							xArray2[HUDMSG_POS_Y], xArray2[HUDMSG_EFFECTS], xArray2[HUDMSG_FXTIME], xArray2[HUDMSG_HOLDTIME],
							xArray2[HUDMSG_FADEIN_TIME], xArray2[HUDMSG_FADEOUT_TIME]);
							
							while( pnum-- > 0 )
							{
								show_dhudmessage(players[pnum], szMessage);
							}
						}
					}
					pnum = x;
					
					if((z=xArray2[HUDMSG_REPEAT]) >= 1) // repeats
					{
						new Array:iTempArray = any:-1, iTempArrayItem;

						if(xArray2[HUDMSG_ID][0] == EOS)
						{
							ArrayGetArray(xArray[HUDMESSAGES_ARRAY], iCurTaskID, xArray3);
							formatex(xArray3[HUDMSG_ID], charsmax(xArray3[HUDMSG_ID]), "TASKID#%d", iCurTaskID);
							ArraySetArray(xArray[HUDMESSAGES_ARRAY], iCurTaskID, xArray3);
						}

						if(xArray2[HUDMSG_ID][0] != EOS) // if hudmessage has a taskid to be able to terminate it
						{
							if(!TrieKeyExists(Trie_Hudmessages_ids, xArray2[HUDMSG_ID]))
								TrieSetCell(Trie_Hudmessages_ids, xArray2[HUDMSG_ID], (iCurTaskID=g_TaskIDs));
							else
								TrieGetCell(Trie_Hudmessages_ids, xArray2[HUDMSG_ID], iCurTaskID);

							if((target > 0 || team > 0) && pnum > 0)
							{
								x = pnum;
								while( pnum-- > 0 )
								{
									n = players[pnum];
									
									formatex(szHUDID, charsmax(szHUDID), "%s_#%d", xArray2[HUDMSG_ID], get_user_userid(n));
									TrieSetCell(Trie_Hudmessages_ids, szHUDID, (iCurTaskID + n));
								}
								pnum = x;
							}

							g_TaskIDs += 35; // GLOBAL VARIABLE

							x = ArraySize(P_ArrayRepeatingData);
							while ( x-- > 0 )
							{
								ArrayGetArray(P_ArrayRepeatingData, x, xArray3);
								if(equal(xArray3[HUDMSG_ID], xArray2[HUDMSG_ID])) // Seeking if the current TASKID already on repeat inside P_ArrayRepeatingData Array
								{
									iTempArray = any:xArray3[HUDMSG_DATA_PARAMS_ARRAY];
									iTempArrayItem = ArraySize(iTempArray);
									break;
								}
							}
						}
						
						g_aHUDMSG_DATA[HUDMSG_DATA_ARRAY_INDEX] = any:P_ArrayRepeatingData;
						g_aHUDMSG_DATA[HUDMSG_DATA_TASK_INDEX] = iCurTaskID;

						for(x = 0, n = sizeof iUsers; x < n; x++)
						{
							g_aHUDMSG_DATA[HUDMSG_DATA_USERS][x] = iUsers[x];
						}

						g_aHUDMSG_DATA[HUDMSG_DATA_MAXUSERS] = iMaxusers;
						
						if(iTempArray == any:-1)
						{
							iTempArray = ArrayCreate(Hudmessage_SetTask_Data, 1);
							
							if(iTempArray == Invalid_Array)
							{
								server_print("Failed to create a temporary 'HUDMSG DATA PARAMS ARRAY'");
								server_print("Task (%s) has failed to get on repeat!", xArray2[HUDMSG_ID]);
								continue;
							}
						}
						
						xArray2[HUDMSG_DATA_PARAMS_ARRAY] = any:iTempArray;

						while( pnum-- > 0 )
						{
							f = players[ pnum ];
							g_aHUDMSG_DATA[HUDMSG_DATA_TARGET] = !f ? 0 : get_user_userid(f);
							
							g_aHUDMSG_DATA[HUDMSG_DATA_ARRAY_ITEM] = ArraySize(P_ArrayRepeatingData);
							ArrayPushArray(P_ArrayRepeatingData, xArray2);
							ArrayPushArray(iTempArray, g_aHUDMSG_DATA);

							if(xArray2[HUDMSG_ID][0] != EOS) // Check if Hudmessage has an id if so remove the old task.
							{
								remove_task(iCurTaskID + f);
							}
							
							// Show new task.
							formatex(szParams, charsmax(szParams), "%d %d", iTempArray, iTempArrayItem++);
							set_task(xArray2[HUDMSG_HOLDTIME], "task_hudmessage_repeat", iCurTaskID + f, szParams, sizeof szParams, z > 1 ? "a":"b", z);
						}
					}
				}
			}
		}
	}
}

public task_hudmessage_repeat(const params[], const taskid)
{
	static index, target, szString[16], aHUDMSG_DATA[Hudmessage_SetTask_Data], Array:iTempArray, iTempArrayItem;
	iTempArrayItem = str_to_num(params[ copyc(szString, charsmax(szString), params, ' ') ]);
	iTempArray = any:str_to_num(szString);

	if(iTempArray <= Invalid_Array)
	{
		remove_task(taskid);
		return;
	}

	ArrayGetArray(iTempArray, iTempArrayItem, aHUDMSG_DATA);

	target = aHUDMSG_DATA[HUDMSG_DATA_TARGET];
	index = find_player("k", target);

	static any:xArray2[Hudmessages_Params], MaxUsers, ItemID, any:ArrayID, iUsers[32];
	copy(iUsers, charsmax(iUsers), aHUDMSG_DATA[HUDMSG_DATA_USERS]);
	MaxUsers = aHUDMSG_DATA[HUDMSG_DATA_MAXUSERS];
	ArrayID = aHUDMSG_DATA[HUDMSG_DATA_ARRAY_INDEX];
	ItemID = aHUDMSG_DATA[HUDMSG_DATA_ARRAY_ITEM];            
	
	ArrayGetArray(ArrayID, ItemID, xArray2);
	
	if(target > 0 && !is_user_connected(index))
	{
		new szHUDID[32];
		formatex(szHUDID, charsmax(szHUDID), "%s_#%d", xArray2[HUDMSG_ID], target);
		TrieDeleteKey(Trie_Hudmessages_ids, szHUDID);
		remove_task(taskid);
		return;
	}

	replace_string_args(xArray2[HUDMSG_STRING], charsmax(xArray2[HUDMSG_STRING]), iUsers, MaxUsers);
	
	switch( xArray2[HUDMSG_STYLE] )
	{
		case 0:
		{
			set_hudmessage(xArray2[HUDMSG_COLOR_R], xArray2[HUDMSG_COLOR_G], xArray2[HUDMSG_COLOR_B], xArray2[HUDMSG_POS_X],
			xArray2[HUDMSG_POS_Y], xArray2[HUDMSG_EFFECTS], xArray2[HUDMSG_FXTIME], xArray2[HUDMSG_HOLDTIME],
			xArray2[HUDMSG_FADEIN_TIME], xArray2[HUDMSG_FADEOUT_TIME], -1);
			
			show_hudmessage(index, "%s", xArray2[HUDMSG_STRING]);
		}
		case 1:
		{
			set_dhudmessage(xArray2[HUDMSG_COLOR_R], xArray2[HUDMSG_COLOR_G], xArray2[HUDMSG_COLOR_B], xArray2[HUDMSG_POS_X],
			xArray2[HUDMSG_POS_Y], xArray2[HUDMSG_EFFECTS], xArray2[HUDMSG_FXTIME], xArray2[HUDMSG_HOLDTIME],
			xArray2[HUDMSG_FADEIN_TIME], xArray2[HUDMSG_FADEOUT_TIME]);
			
			show_dhudmessage(index, "%s", xArray2[HUDMSG_STRING]);
		}
	}

	// Removing the temporary repeat task from the run task list/trie
	if(xArray2[HUDMSG_REPEAT] > 1)
	{
		xArray2[HUDMSG_REPEAT]--;
		ArraySetArray(ArrayID, ItemID, xArray2);

		if(xArray2[HUDMSG_REPEAT] <= 1)
		{
			remove_hudtask(xArray2[HUDMSG_ID], ArrayID);
		}
	}
}

remove_hudtask(const szTaskid[], const Array:P_ArrayRepeatingData)
{
	static xArray2[Hudmessages_Params], aHUDMSG_DATA[Hudmessage_SetTask_Data], szHUDID[32], Array:iTempArray, x, z, f, n, i;
	iTempArray = any:-1;

	if(TrieKeyExists(Trie_Hudmessages_ids, szTaskid)) {
		TrieGetCell(Trie_Hudmessages_ids, szTaskid, f);
		remove_task(f);
		TrieDeleteKey(Trie_Hudmessages_ids, szTaskid);
	}
	
	x = ArraySize(P_ArrayRepeatingData);
	while( x-- > 0 ) // backward looping
	{
		ArrayGetArray(P_ArrayRepeatingData, x, xArray2);

		if(equal(szTaskid, xArray2[HUDMSG_ID]))
		{
			if(any:xArray2[HUDMSG_DATA_PARAMS_ARRAY] != Invalid_Array)
			{
				n = ArraySize(any:xArray2[HUDMSG_DATA_PARAMS_ARRAY]);
				for(f = 0; f < n; f++)
				{
					ArrayGetArray(any:xArray2[HUDMSG_DATA_PARAMS_ARRAY], f, aHUDMSG_DATA);
					
					// Its a global hudmessage? just incase check !
					if(!aHUDMSG_DATA[HUDMSG_DATA_TARGET]) continue;
 					
					formatex(szHUDID, charsmax(szHUDID), "%s_#%d", szTaskid, aHUDMSG_DATA[HUDMSG_DATA_TARGET]);

					if(!TrieKeyExists(Trie_Hudmessages_ids, szHUDID)) continue;

					TrieGetCell(Trie_Hudmessages_ids, szHUDID, z);
					TrieDeleteKey(Trie_Hudmessages_ids, szHUDID);
					remove_task(z);
				}

				// Get The Hudmsg SetTask Data Array so we can destroy it latter!
				iTempArray = xArray2[HUDMSG_DATA_PARAMS_ARRAY];
			}

			ArrayDeleteItem(P_ArrayRepeatingData, x);

			i = x;
			z = ArraySize(P_ArrayRepeatingData);
			while( i < z )
			{
				ArrayGetArray(P_ArrayRepeatingData, i, xArray2);

				n = ArraySize(any:xArray2[HUDMSG_DATA_PARAMS_ARRAY]); // Getting the Hudmsg SetTask Array Index Size
				for(f = 0; f < n; f++) // looping through the Array.
				{
					ArrayGetArray(any:xArray2[HUDMSG_DATA_PARAMS_ARRAY], f, aHUDMSG_DATA);
					if(aHUDMSG_DATA[HUDMSG_DATA_ARRAY_ITEM] > x) // Checking if the P_ArrayRepeatingData Item id is bigger than the counter x
					{
						aHUDMSG_DATA[HUDMSG_DATA_ARRAY_ITEM]--; // decreasing item id by 1 grade.
						ArraySetArray(any:xArray2[HUDMSG_DATA_PARAMS_ARRAY], f, aHUDMSG_DATA); // Save back to the Hudmsg SetTask Array.
					}
				}
				
				i++;
			}
		}
	}

	if(iTempArray != Invalid_Array)
	{
		ArrayDestroy(iTempArray);
	}
}

play_sound(const sound[])
{
	if(containi(sound, ".wav") > -1)
	{
		client_cmd(0, "spk ^"%s^"", sound);
		return;
	}
	if(containi(sound, ".mp3") > -1)
	{
		client_cmd(0, "mp3 play ^"%s^"", sound);
	}
}

replace_string_args(szCommand[], iLen, iUsers[32], iMaxusers)
{
	static szString[32], szValue[32], szExtLog[260], x, z; x = z = 0;
	
	if(containi(szCommand, "%newline%") > -1)
	{
		replace_all(szCommand, iLen, "%newline%", "^n");
	}
	
	while( ((x = (containi(szCommand[x], "#%cvar("))) > -1) )
	{
		x += 7; // #%cvar(
		if(strfind(szCommand, ")", .pos = x) == -1) continue;
		
		copyc(szString, charsmax(szString), szCommand[x], ')');
		if(!cvar_exists(szString)) continue;
		copyc(szExtLog, charsmax(szExtLog), szCommand[x - 7], ')');
		add(szExtLog, charsmax(szExtLog), ")");
		get_cvar_string(szString, szValue, charsmax(szValue));
		replace_all(szCommand, iLen, szExtLog, szValue);
	}

	x = 0;
	while( ((x = (containi(szCommand[x], "#numtoword("))) > -1) )
	{
		x += 11; // #numtoword(
		if(strfind(szCommand, ")", .pos = x) == -1) continue;
		copyc(szString, charsmax(szString), szCommand[x], ')');
		if(!is_str_num(szString) || !(0 <= (z=str_to_num(szString)) <= 999) ) continue;
		copyc(szExtLog, charsmax(szExtLog), szCommand[x - 11], ')');
		add(szExtLog, charsmax(szExtLog), ")");
		num_to_word(z, szValue, charsmax(szValue));
		replace_all(szCommand, iLen, szExtLog, szValue);
	}
	
	if(containi(szCommand, "#%guards[@]") > -1)
	{
		get_players(szValue, x, "he", "CT");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%guards[@]", szString);
	}
	
	if(containi(szCommand, "#%guards[a]") > -1)
	{
		get_players(szValue, x, "ahe", "CT");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%guards[a]", szString);
	}
	
	if(containi(szCommand, "#%guards[d]") > -1)
	{
		get_players(szValue, x, "bhe", "CT");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%guards[d]", szString);
	}
	
	if(containi(szCommand, "#%prisoners[@]") > -1)
	{
		get_players(szValue, x, "he", "TERRORIST");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%prisoners[@]", szString);
	}
	
	if(containi(szCommand, "#%prisoners[a]") > -1)
	{
		get_players(szValue, x, "ahe", "TERRORIST");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%prisoners[a]", szString);
	}
	
	if(containi(szCommand, "#%prisoners[d]") > -1)
	{
		get_players(szValue, x, "bhe", "TERRORIST");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%prisoners[d]", szString);
	}
	
	if(containi(szCommand, "#%SPEC") > -1)
	{
		get_players(szValue, x, "he", "SPECTATOR");
		num_to_str(x, szString, charsmax(szString));
		replace_all(szCommand, iLen, "#%SPEC", szString);
	}
	
	if(containi(szCommand, "#%userid") > -1)
	{
		for( x = 0; x < iMaxusers; x++ )
		{
			formatex(szExtLog, charsmax(szExtLog), "%%userid%d", (x + 1));
			num_to_str(iUsers[x], szString, charsmax(szString));
			replace_all(szCommand, iLen, szExtLog, szString);
		}
	}
	
	if(containi(szCommand, "#%username") > -1)
	{
		for( x = 0; x < iMaxusers; x++ )
		{
			formatex(szExtLog, charsmax(szExtLog), "#%%username%d", (x + 1));
			get_user_name(find_player("k", iUsers[x]), szString, charsmax(szString));
			replace_all(szCommand, iLen, szExtLog, szString);
			
			if(containi(szCommand, "#%username") == -1) break;
		}
	}
	
	if(containi(szCommand, "#%hpuser") > -1)
	{
		for( x = 0; x < iMaxusers; x++ )
		{
			formatex(szExtLog, charsmax(szExtLog), "#%%hpuser%d", (x + 1));
			num_to_str(get_user_health(find_player("k", iUsers[x])), szString, charsmax(szString));
			replace_all(szCommand, iLen, szExtLog, szString);
		}
	}
	
	if(containi(szCommand, "#%apuser") > -1)
	{
		for( x = 0; x < iMaxusers; x++ )
		{
			formatex(szExtLog, charsmax(szExtLog), "#%%apuser%d", (x + 1));
			num_to_str(get_user_armor(find_player("k", iUsers[x])), szString, charsmax(szString));
			replace_all(szCommand, iLen, szExtLog, szString);
		}
	}
	
	if(containi(szCommand, "#%cashuser") > -1)
	{
		for( x = 0; x < iMaxusers; x++ )
		{
			formatex(szExtLog, charsmax(szExtLog), "#%%cashuser%d", (x + 1));
			num_to_str(jb_get_user_cash(find_player("k", iUsers[x])), szString, charsmax(szString));
			replace_all(szCommand, iLen, szExtLog, szString);
		}
	}
	
	if(containi(szCommand, "#%classuser") > -1)
	{
		for( x = 0; x < iMaxusers; x++ )
		{
			formatex(szExtLog, charsmax(szExtLog), "#%%classuser%d", (x + 1));
			jb_get_classname(jb_get_user_classid(find_player("k", iUsers[x])), szString, charsmax(szString));
			replace_all(szCommand, iLen, szExtLog, szString);
		}
	}
	
	if(containi(szCommand, "%votedaycounter%"))
	{
		num_to_str(get_xvar_num(IndexVarVOTEDAY_TIMER_LENGTH), szString, charsmax(szString));
		replace_all(szCommand, iLen, "%votedaycounter%", szString)
	}
	
	if(containi(szCommand, "%fundaycounter%"))
	{
		float_to_str(get_xvar_float(IndexVarFUNDAY_TIMER_LENGTH), szString, charsmax(szString));
		if((x = strfind(szString, ".")) > -1) szString[x] = 0;
		replace_all(szCommand, iLen, "%fundaycounter%", szString)
	}
	
	if(containi(szCommand, "%lrcounter%"))
	{
		num_to_str(get_xvar_num(IndexVarLR_TIMER_LENGTH), szString, charsmax(szString));
		replace_all(szCommand, iLen, "%lrcounter%", szString)
	}
	
	if(containi(szCommand, "%today%"))
	{
		jb_get_weekdays_name(jb_whats_today(), szString, charsmax(szString));
		replace_all(szCommand, iLen, "%today%", szString)
	}
	
	if(containi(szCommand, "%dayname%") > -1)
	{
		szString[0] = EOS;
		if((x = jb_get_current_day()) > DAY_NONE)
		{
			jb_get_day_name(x, szString, charsmax(szString));
		}
		
		replace_all(szCommand, iLen, "%dayname%", szString)
	}
	
	if(containi(szCommand, "%duelname%") > -1)
	{
		szString[0] = EOS;
		if((x = jb_get_current_duel()) > DAY_NONE)
		{
			jb_get_duel_name(x, szString, charsmax(szString));
		}
		
		replace_all(szCommand, iLen, "%duelname%", szString)
	}
	
	if(containi(szCommand, "%hostname%") > -1)
	{
		get_pcvar_string(g_cvar_hostname, szString, charsmax(szString))
		replace_all(szCommand, iLen, "%hostname%", szString)
	}
	
	while((x=containi(szCommand, "%y%")) > -1 ||
	    (x=containi(szCommand, "%m%")) > -1 ||
	    (x=containi(szCommand, "%d%")) > -1 ||
	    (x=containi(szCommand, "%h%")) > -1 ||
	    (x=containi(szCommand, "%s%")) > -1)
	{
		szValue[0] = '%';
		szValue[1] = szCommand[x + 1];
		szValue[2] = 0;
		szValue[3] = 0;
		format_time(szString, charsmax(szString), szValue);
		szValue[2] = '%';
		replace_all(szCommand, iLen, szValue, szString);
	}
	
	if(iRegex_Pattren != REGEX_PATTERN_FAIL)
	{
		while( regex_match_c(szCommand, iRegex_Pattren, x) > 0 )
		{
			static szfValueA[8], szfValueB[8];
			regex_substr(iRegex_Pattren, 1, szString, charsmax(szString));
			regex_substr(iRegex_Pattren, 2, szfValueA, charsmax(szfValueA));
			regex_substr(iRegex_Pattren, 3, szValue, charsmax(szValue));
			regex_substr(iRegex_Pattren, 4, szfValueB, charsmax(szfValueB));
			
			if( (x = strfind(szfValueA, ".")) != -1 || (z = strfind(szfValueB, ".")) != -1 )
			{
				switch( szValue[0] )
				{
					case '*': float_to_str( (floatstr(szfValueA) * floatstr(szfValueB)), szValue, charsmax(szValue));
					case '+': float_to_str( (floatstr(szfValueA) + floatstr(szfValueB)), szValue, charsmax(szValue));
					case '-': float_to_str( (floatstr(szfValueA) - floatstr(szfValueB)), szValue, charsmax(szValue));
					case '/': float_to_str( (floatstr(szfValueA) / floatstr(szfValueB)), szValue, charsmax(szValue));
					case '^^': float_to_str( floatpower(floatstr(szfValueA), floatstr(szfValueB)), szValue, charsmax(szValue));
				}
				
				if(x > -1)
				{
					x = strlen(szfValueA) - x;
					
					if((z = strfind(szValue, ".")) != -1)
					{
						z += x;
						if( sizeof szValue > z ) szValue[z] = 0;
					}
				}
				else if(z > -1)
				{
					z = strlen(szfValueB) - z;
					
					if((x = strfind(szValue, ".")) != -1)
					{
						x += z;
						if( sizeof szValue > x ) szValue[x] = 0;
					}
				}
			}
			else
			{
				switch( szValue[0] )
				{
					case '*': num_to_str( floatround(floatstr(szfValueA) * floatstr(szfValueB)), szValue, charsmax(szValue));
					case '+': num_to_str( floatround(floatstr(szfValueA) + floatstr(szfValueB)), szValue, charsmax(szValue));
					case '-': num_to_str( floatround(floatstr(szfValueA) - floatstr(szfValueB)), szValue, charsmax(szValue));
					case '/': num_to_str( floatround(floatstr(szfValueA) / floatstr(szfValueB)), szValue, charsmax(szValue));
					case '^^': num_to_str( floatround(floatstr(szfValueA) ^ floatstr(szfValueB)), szValue, charsmax(szValue));
				}
			}
			
			replace_all(szCommand, iLen, szString, szValue);
		}
	}
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ ansicpg1252\\ deff0{\\ fonttbl{\\ f0\\ fnil\\ fcharset0 Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang11265\\ f0\\ fs16 \n\\ par }
*/
