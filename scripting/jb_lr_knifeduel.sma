/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <jailbreak_core>
#include <hamsandwich>
#include <fakemeta>
#include <fun>

#define PLUGIN "[JB] LR:Knife Duel"
#define AUTHOR "Natsheh"

new iDuelid

new const DUEL_INFO[][] = {
	"Normal",
	"Headshot Only",
	"Slash Only",
	"Stab Only"
}

enum iDuelInfo
{
	DUEL_NORM = 0,
	DUEL_HEADSHOTONLY,
	DUEL_SLASHONLY,
	DUEL_STABONLY
}

new DUEL_HEALTH[] = {
	100,
	75,
	50,
	35,
	1
}

new g_iDuel_hp[33], iDuelInfo:g_iDuel_info[33];

new HamHook:g_Ham_nodamage;

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_Ham_nodamage = RegisterHam(Ham_TraceAttack, "player", "fw_traceattack");
	
	DisableHamForward(g_Ham_nodamage)
	
	iDuelid = register_jailbreak_lritem("Knife Duel")
	
	RegisterHam(Ham_Spawn, "player", "fw_player_spawned", 1)
}

public fw_traceattack(const iVict, const iAttacker, Float:dmg, Float:dir[3], traceresult, dmgbits)
{
	if(!(1 <= iAttacker <= 32)) return HAM_IGNORED;
	
	new iButton = pev(iAttacker, pev_button);
	
	switch(g_iDuel_info[iAttacker])
	{
		case DUEL_HEADSHOTONLY: return (get_tr2(traceresult, TR_iHitgroup) != HIT_HEAD) ? HAM_SUPERCEDE:HAM_IGNORED;
		case DUEL_SLASHONLY: return (iButton & IN_ATTACK && !(iButton & IN_ATTACK2)) ? HAM_IGNORED:HAM_SUPERCEDE;
		case DUEL_STABONLY: return (iButton & IN_ATTACK2 && !(iButton & IN_ATTACK)) ? HAM_IGNORED:HAM_SUPERCEDE;
	}
	
	return HAM_IGNORED;
}

public client_connect(id)
{
	g_iDuel_hp[id] = 0;
	g_iDuel_info[id] = DUEL_NORM;
}

public fw_player_spawned(id)
{
	if(!is_user_alive(id))
		return HAM_IGNORED;
	
	g_iDuel_hp[id] = 0;
	g_iDuel_info[id] = DUEL_NORM;
	
	return HAM_IGNORED;
}

public jb_lr_duel_selected(id, itemid)
{
	if(iDuelid == itemid)
	{
		knife_duelmenu(id)
		return JB_LR_OTHER_MENU;
	}
	
	return PLUGIN_CONTINUE;
}

public jb_lr_duel_ended(prisoner, guard, duelid)
{
	if(duelid == iDuelid)
	{
		g_iDuel_hp[prisoner] = 0;
		g_iDuel_info[prisoner] = DUEL_NORM;
		
		g_iDuel_hp[guard] = 0;
		g_iDuel_info[guard] = DUEL_NORM;
		
		jb_block_user_weapons(prisoner, false)
		jb_block_user_weapons(guard, false)
		
		DisableHamForward(g_Ham_nodamage)
	}
}

public jb_lr_duel_started(prisoner, guard, duelid)
{
	if(duelid == iDuelid)
	{
		if(g_iDuel_info[prisoner] != DUEL_NORM)
		{
			EnableHamForward(g_Ham_nodamage);
		}
		
		g_iDuel_hp[guard] = g_iDuel_hp[prisoner];
		g_iDuel_info[guard] = g_iDuel_info[prisoner];
		
		jb_block_user_weapons(prisoner, true, ~(1<<CSW_KNIFE))
		jb_block_user_weapons(guard, true, ~(1<<CSW_KNIFE))
		
		give_item(prisoner, "weapon_knife")
		give_item(guard, "weapon_knife")
		
		set_user_health(prisoner, DUEL_HEALTH[g_iDuel_hp[prisoner]])
		set_user_health(guard, DUEL_HEALTH[g_iDuel_hp[guard]])
		
		new sPname[32], sGname[32]
		get_user_name(prisoner, sPname, charsmax(sPname))
		get_user_name(guard, sGname, charsmax(sGname))
		set_hudmessage(255, 0, 0, -1.0, 0.77, 0, 6.0, 4.0, 0.1, 0.5, -1)
		show_hudmessage(0, "%s vs %s^n[Knife Duel]^nInfo: %s HP: %d", sPname, sGname, DUEL_INFO[g_iDuel_info[prisoner]], DUEL_HEALTH[g_iDuel_hp[prisoner]])
		
		cprint_chat(0, _, "^4%s ^1Started a knife duel vs ^3%s ^4<^1HP:^3%d^4> <^1INFO:^3%s^4>", sPname, sGname, DUEL_HEALTH[g_iDuel_hp[prisoner]], DUEL_INFO[g_iDuel_info[prisoner]])
	}
}

public knife_duelmenu(id)
{
	new iMenu = menu_create("Knife Duel^nChoose your Setting...", "duelmenu_handle");
	
	new sText[32];
	
	formatex(sText, charsmax(sText), "Health: %d HP", DUEL_HEALTH[g_iDuel_hp[id]]);
	menu_additem(iMenu, sText, "1");
	
	formatex(sText, charsmax(sText), "%s^n^n", DUEL_INFO[g_iDuel_info[id]]);
	menu_additem(iMenu, sText, "2");
	
	formatex(sText, charsmax(sText), "Start the duel...");
	menu_additem(iMenu, sText, "3");
	
	menu_display(id, iMenu);
}

public duelmenu_handle(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new sName[32], sData[2], iAccess, iCallback;
	menu_item_getinfo(menu, item, iAccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	menu_destroy(menu);

	new item = str_to_num(sData);
	
	switch( item )
	{
		case 1:
		{
			if(g_iDuel_hp[id] < sizeof DUEL_HEALTH-1)
			{
				g_iDuel_hp[id] ++;
			}
			else
			{
				g_iDuel_hp[id] = 0;
			}
		}
		case 2:
		{
			if(g_iDuel_info[id] != DUEL_STABONLY)
			{
				g_iDuel_info[id] ++;
			}
			else
			{
				g_iDuel_info[id] = DUEL_NORM;
			}
		}
		case 3:
		{
			jb_lr_show_targetsmenu(id, iDuelid);
			return PLUGIN_HANDLED;
		}
	}
	
	knife_duelmenu(id);
	return PLUGIN_HANDLED;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil\\ fcharset0 Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
