/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <cs_player_models_api>
#include <inc_get_team_fix>
#include <fun>
#include <cstrike>
#include <hamsandwich>
#include <jailbreak_core>

#define PLUGIN "[JB] DAY: Protect the VIP"
#define AUTHOR "Natsheh"

public JB_DAY_VIP_USER;

#define WPN_PRIMARY	1
#define WPN_SECONDARY	2
#define WPN_KNIFE	3
#define WPN_NADE	4

#if !defined MAX_PLAYERS
#define MAX_PLAYERS 32
#endif

#if AMXX_VERSION_NUM > 182
#define client_disconnect client_disconnected
#endif

#define VIP_FIRING_ACCURACY 0.9
#define CBASE_PLAYER_WEAPON_LINUX_DIFF 4
#define CBASE_PLAYER_LINUX_DIFF 5
#define WEAPON_TYPE_AUTO_USP 500
#define PEV_WEAPON_TYPE pev_iuser4
new MAX_AUTOMATIC_USP_CLIP = 50;

const m_pPlayer = 41;
const m_iId = 43;
const m_flTimeWeaponIdle = 48;
const m_iPrimaryAmmoType = 49;
const m_iClip = 51;
const m_fInReload = 54;
const m_iShotsFired = 64;
const m_flAccuracy = 62;
const m_flLastFire = 63;
const m_flNextAttack = 83;
const m_pActiveItem = 373;
const m_rgAmmo_player_Slot0 = 376;

new user_weapons[MAX_PLAYERS+1][4]
new g_day_itemid, wpn_menu1 = -1, wpn_menu2 = -1, wpn_menu3 = -1;

enum WEAPONS_PARAMS
{
	WEAPON_NAME[32],
	WEAPON_ID[24],
	WEAPON_BPAMMO,
	WEAPON_TYPE
}

new const WEAPONS_INFO[][WEAPONS_PARAMS] = {
	{ "USP", "weapon_usp", 100, WPN_SECONDARY },
	{ "Glock18", "weapon_glock18", 120, WPN_SECONDARY },
	{ "Deagle", "weapon_deagle", 35, WPN_SECONDARY },
	{ "P228", "weapon_p228", 52, WPN_SECONDARY },
	{ "Five~Seven", "weapon_fiveseven", 100, WPN_SECONDARY },
	{ "Elite", "weapon_elite", 120, WPN_SECONDARY },
	{ "M3", "weapon_m3", 32, WPN_PRIMARY },
	{ "Xm1014", "weapon_xm1014", 32, WPN_PRIMARY },
	{ "MP5-Navy", "weapon_mp5navy", 120, WPN_PRIMARY },
	{ "TMP", "weapon_tmp", 120, WPN_PRIMARY },
	{ "Mac10", "weapon_mac10", 100, WPN_PRIMARY },
	{ "P90", "weapon_p90", 100, WPN_PRIMARY },
	{ "UMP45", "weapon_ump45", 100, WPN_PRIMARY },
	{ "FAMAS", "weapon_famas", 90, WPN_PRIMARY },
	{ "GALIL", "weapon_galil", 90, WPN_PRIMARY },
	{ "Scout", "weapon_scout", 90, WPN_PRIMARY },
	{ "M4A1", "weapon_m4a1", 90, WPN_PRIMARY },
	{ "AK47", "weapon_ak47", 90, WPN_PRIMARY },
	{ "AUG", "weapon_aug", 90, WPN_PRIMARY },
	{ "SG552", "weapon_sg552", 90, WPN_PRIMARY },
	{ "AWP", "weapon_awp", 30, WPN_PRIMARY },
	{ "G3SG1", "weapon_g3sg1", 90, WPN_PRIMARY },
	{ "SG550", "weapon_sg550", 90, WPN_PRIMARY }
}

enum
{
	WPN_USP = 0, WPN_GLOCK, WPN_DEAGLE, WPN_P228, WPN_FIVESEVEN, WPN_ELITE, WPN_M3,
	WPN_XM1014, WPN_MP5NAVY, WPN_TMP, WPN_MAC10, WPN_P90, WPN_UMP45, WPN_FAMAS,
	WPN_GALIL, WPN_SCOUT, WPN_M4A1, WPN_AK47, WPN_AUG, WPN_SG552, WPN_AWP, WPN_G3SG1, WPN_SG550
}

new VIP_MODEL[32] = "vip", g_fwPrecacheEvent, g_guns_eventids_bitsum, g_bHasAutomaticUSP,
g_shopitem_autousp, g_pcvar_autousp_firerate, g_pcvar_autousp_maxclip;

public plugin_precache()
{
	new szString[96];
	jb_ini_get_keyvalue("DAY_PROTECT_VIP", "VIP_MODL", VIP_MODEL, charsmax(VIP_MODEL));
	formatex(szString, charsmax(szString), "models/player/%s/%s.mdl", VIP_MODEL, VIP_MODEL);
	PRECACHE_PLAYER_MODEL(szString);
	
	formatex(szString, charsmax(szString), "models/player/%s/%sT.mdl", VIP_MODEL, VIP_MODEL);
	if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);

	g_fwPrecacheEvent = register_forward(FM_PrecacheEvent, "fwPrecacheEvent", ._post = true);
}

public fwPrecacheEvent(const type, const name[])
{
	if (equal(name, "events/usp.sc"))
	{
		g_guns_eventids_bitsum |= (1<<get_orig_retval());
		return FMRES_HANDLED;
	}

	return FMRES_IGNORED;
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);

	unregister_forward(FM_PrecacheEvent, g_fwPrecacheEvent, .post = true);
	register_forward(FM_PlaybackEvent, "fwPlaybackEvent", ._post = false);
	
	g_day_itemid = register_jailbreak_day("Protect the VIP", 0, 150.0, DAY_GUARDS_VS_PRISONERS);
	
	register_event("DeathMsg", "fw_deathmsg", "a");

	RegisterHam(Ham_Item_PostFrame, "weapon_usp", "USP_PostFrame_Pre");
	RegisterHam(Ham_Item_AttachToPlayer, "weapon_usp", "USP_AttachToPlayer_Post", .Post=true);
	RegisterHam(Ham_Weapon_PrimaryAttack, "weapon_usp", "USP_PrimaryAttack_Post", .Post=true);

	g_shopitem_autousp = register_jailbreak_shopitem("Automatic USP", "HFR + Low Recoil + Extra clip", 15000, TEAM_GUARDS);

	g_pcvar_autousp_firerate = register_cvar("jb_automatic_usp_firerate", "0.1");
	g_pcvar_autousp_maxclip = register_cvar("jb_automatic_usp_maxclip", "50");

	register_concmd("jb_give_autousp", "concmd_give_autousp", ADMIN_IMMUNITY, "gives a autmatic usp to a player")
}

public concmd_give_autousp(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1))
		return PLUGIN_HANDLED;

	new sTarget[32];
	read_argv(1, sTarget, 31);

	if(sTarget[0] == '@')
	{
		new players[32], pnum;
		switch( sTarget[1] )
		{
			case 'C', 'c': get_players(players, pnum, "ae", "CT");
			case 'T', 't': get_players(players, pnum, "ae", "TERRORIST");
			default: get_players(players, pnum, "a");
		}

		for(new i = 0, player; i < pnum; i++)
		{
			player = players[i];
			if(PlayerHasAutomaticUSP(player)) continue;
			GiveAutomaticUSP(player);
		}

		console_print(id, "You have given %c%c Automatic USP", sTarget[0], sTarget[1]);
		return PLUGIN_HANDLED;
	}

	new target = cmd_target(id, sTarget, CMDTARGET_ALLOW_SELF|CMDTARGET_ONLY_ALIVE);
	if(!target) return PLUGIN_HANDLED;

	get_user_name(target, sTarget, 31);

	if(PlayerHasAutomaticUSP(target))
	{
		console_print(id, "user %s has already an Automatic USP!", sTarget)
		return PLUGIN_HANDLED;
	}

	GiveAutomaticUSP(target);
	cprint_chat(id, _, "you gave ^3%s ^1a ^4Automatic USP!", sTarget);
	console_print(id, "You gave %s a Automatic USP!", sTarget);

	return PLUGIN_HANDLED;
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == g_shopitem_autousp)
	{
		GiveAutomaticUSP(id);
	}
}

public fwPlaybackEvent(flags, pInvoker, eventid, Float:fDelay, Float:fOrigin[3], Float:fAngles[3], Float:fParam1, Float:fParam2, iParam1, iParam2, bParam1, bParam2)
{
	if (!(g_guns_eventids_bitsum & (1<<eventid)) || !(1 <= pInvoker <= 32) || !IsPlayerHoldingAutoUSP(pInvoker))
	{
		return FMRES_IGNORED;
	}

	engfunc(EngFunc_PlaybackEvent, (flags & ~FEV_NOTHOST), pInvoker, eventid, fDelay, fOrigin, fAngles, fParam1, fParam2, iParam1, iParam2, bParam1, bParam2);
	return FMRES_SUPERCEDE;
}

public plugin_end()
{
	destroy_weapons_menus();
}

public USP_PrimaryAttack_Post(const iEnt)
{
	if(pev(iEnt, PEV_WEAPON_TYPE) != WEAPON_TYPE_AUTO_USP)
	{
		return;
	}

	set_ent_data_float(iEnt, "CBasePlayerWeapon", "m_flNextPrimaryAttack", get_pcvar_float(g_pcvar_autousp_firerate));
}

public USP_PostFrame_Pre(const iEnt)
{
	if(pev(iEnt, PEV_WEAPON_TYPE) != WEAPON_TYPE_AUTO_USP)
	{
		return;
	}

	static Float:flNextAttack, fInReload, id, iClip;

	id = get_pdata_cbase(iEnt, m_pPlayer, CBASE_PLAYER_WEAPON_LINUX_DIFF);
	iClip = get_pdata_int(iEnt, m_iClip, CBASE_PLAYER_WEAPON_LINUX_DIFF);
	fInReload = get_pdata_int(iEnt, m_fInReload, CBASE_PLAYER_WEAPON_LINUX_DIFF);
	flNextAttack = get_pdata_float(id, m_flNextAttack, CBASE_PLAYER_LINUX_DIFF);

	if( (pev(id, pev_button) & IN_RELOAD) > 0 )
	{
		// Gun's clip already full and more, why bother reload ?
		if( iClip >= MAX_AUTOMATIC_USP_CLIP )
		{
			fInReload = false;
			set_pdata_int(iEnt, m_fInReload, 0, CBASE_PLAYER_WEAPON_LINUX_DIFF);
		}
	}

	// Reloading..
	if( fInReload && flNextAttack <= get_gametime() )
	{
		static iAmmoType, iBpAmmo, j;

		iAmmoType = m_rgAmmo_player_Slot0 + get_ent_data(iEnt, "CBasePlayerWeapon", "m_iPrimaryAmmoType");
		iBpAmmo = get_pdata_int(id, iAmmoType, CBASE_PLAYER_LINUX_DIFF);

		j = min(MAX_AUTOMATIC_USP_CLIP - iClip, iBpAmmo);

		set_pdata_int(iEnt, m_iClip, iClip + j, CBASE_PLAYER_WEAPON_LINUX_DIFF);
		set_pdata_int(iEnt, m_fInReload, false, CBASE_PLAYER_WEAPON_LINUX_DIFF);

		set_pdata_int(id, iAmmoType, iBpAmmo-j, CBASE_PLAYER_LINUX_DIFF);

		fInReload = false;
	}
	else
	{
		set_pdata_int(iEnt, m_iShotsFired, -1, CBASE_PLAYER_WEAPON_LINUX_DIFF);
		set_pdata_float(iEnt, m_flLastFire, 0.0, CBASE_PLAYER_WEAPON_LINUX_DIFF);
		set_pdata_float(iEnt, m_flAccuracy, VIP_FIRING_ACCURACY, CBASE_PLAYER_WEAPON_LINUX_DIFF);

		set_pev(id, pev_punchangle, Float:{0.0,0.0,0.0});
	}
}

public USP_AttachToPlayer_Post(iEnt, id)
{
	if(!check_flag(g_bHasAutomaticUSP, id))
	{
		return;
	}

	set_pev(iEnt, PEV_WEAPON_TYPE, WEAPON_TYPE_AUTO_USP);
	remove_flag(g_bHasAutomaticUSP,id);
	set_pdata_int(iEnt, m_iClip, MAX_AUTOMATIC_USP_CLIP, CBASE_PLAYER_WEAPON_LINUX_DIFF);
}

bool:IsPlayerHoldingAutoUSP(id)
{
	static ent; ent = get_pdata_cbase(id, m_pActiveItem, CBASE_PLAYER_LINUX_DIFF);

	if(!ent || pev(ent, PEV_WEAPON_TYPE) != WEAPON_TYPE_AUTO_USP)
	{
		return false;
	}

	return true;
}

public client_disconnect(id)
{
	if(JB_DAY_VIP_USER == id)
	{
		if(jb_get_current_day() != g_day_itemid) return;

		new players[MAX_PLAYERS], pnum;
		get_players(players, pnum, "ahe", "CT");

		if(pnum > 0)
		{
			new vip_index = players[random(pnum)];
			SetUserVIP(vip_index);

			new szNewVIPname[32], szOldVIPname[32];
			get_user_name(vip_index, szNewVIPname, charsmax(szNewVIPname));
			get_user_name(id, szOldVIPname, charsmax(szOldVIPname));
			cprint_chat(0, _, "!gVIP !t%s !yhas disconnected!g, !t%s !yis the new !gVIP !yprotect the VIP at all costs!", szOldVIPname, szNewVIPname);
		}
		else
		{
			JB_DAY_VIP_USER = 0;
			jb_end_theday();
		}

	}
}

public fw_deathmsg()
{
	if(jb_get_current_day() == g_day_itemid)
	{
		new vic = read_data(2);
		
		if(vic == JB_DAY_VIP_USER)
		{
			new players[32], pnum;
			get_players(players, pnum, "ahe", "CT");
			
			for(new i; i < pnum; i++)
			{
				user_kill(players[i]);
			}
		}
	}
}

SetUserVIP(id)
{
	strip_user_weapons(id);
	give_item(id, "weapon_knife");
	GiveAutomaticUSP(id);
	cs_set_user_armor(id, 200, CS_ARMOR_VESTHELM);
	jb_block_user_weapons(id, true, ~((1<<CSW_KNIFE)|(1<<CSW_USP)));
	cs_set_player_model(id, VIP_MODEL);

	JB_DAY_VIP_USER = id;
}

bool:PlayerHasAutomaticUSP(id)
{
	if(pev(id, pev_weapons) & (1<<CSW_USP))
	{
		new ent;
		while( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "weapon_usp")) && pev(ent, pev_owner) != id ) { }

		if( pev_valid(ent) && pev(ent, PEV_WEAPON_TYPE) == WEAPON_TYPE_AUTO_USP )
		{
			return true;
		}
	}

	return false;
}

GiveAutomaticUSP(id)
{
	MAX_AUTOMATIC_USP_CLIP = get_pcvar_num(g_pcvar_autousp_maxclip);

	set_flag(g_bHasAutomaticUSP,id);

	const CS_AMMO_ID_45ACP = 6;

	message_begin( MSG_ONE, get_user_msgid("WeaponList"), .player = id );
	write_string( "weapon_usp" );  // WeaponName
	write_byte( CS_AMMO_ID_45ACP );                   // PrimaryAmmoID
	write_byte( MAX_AUTOMATIC_USP_CLIP );                   // PrimaryAmmoMaxAmount
	write_byte( 0 );                   // SecondaryAmmoID
	write_byte( 0 );                   // SecondaryAmmoMaxAmount
	write_byte( 1 );                    // SlotID (0...N)
	write_byte( 2 );                    // NumberInSlot (1...N)
	write_byte( CSW_USP );            // WeaponID
	write_byte( 0 );                    // Flags
	message_end();

	if(pev(id, pev_weapons) & (1<<CSW_USP))
	{
		new ent;
		while( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "weapon_usp")) && pev(ent, pev_owner) != id ) { }

		if( pev_valid(ent) )
		{
			ExecuteHamB(Ham_Item_AttachToPlayer, ent, id);
		}
	}
	else
	{
		give_item(id, "weapon_usp");
	}

	cs_set_user_bpammo(id, CSW_USP, 250);
}

public jb_day_started(dayid)
{
	if(dayid == g_day_itemid)
	{
		create_weapons_menus();
		
		new players[MAX_PLAYERS], pnum;
		get_players(players, pnum, "ahe", "CT");
		
		if(pnum > 0)
		{
			new vip_index, vip_slot;
			vip_index = players[(vip_slot=random(pnum))];
			players[vip_slot] = players[--pnum];
			
			SetUserVIP(vip_index);
			
			for(new i, id; i < pnum; i++)
			{
				id = players[i];

				if(is_user_bot(id)) continue;

				show_newmenu(id, wpn_menu1, 0, 1);
			}
			
			get_players(players, pnum, "ache", "TERRORIST");
			
			for(new i, id; i < pnum; i++)
			{
				id = players[i];
				show_newmenu(id, wpn_menu1, 0, 1);
			}
			
		}
	}
}

public jb_day_ended(dayid)
{
	if(dayid == g_day_itemid)
	{
		destroy_weapons_menus();
		
		if(JB_DAY_VIP_USER)
		{
			jb_set_user_class_model(JB_DAY_VIP_USER);
			jb_block_user_weapons(JB_DAY_VIP_USER, false);
			JB_DAY_VIP_USER = 0;
		}
	}
}

show_newmenu(id, menuid, iPage, IFAlive)
{
	switch( IFAlive )
	{
		case 0: if(is_user_alive(id)) return;
		case 1: if(!is_user_alive(id)) return;
	}
	
	// check if the menu id is positive, so we can know its existed!
	if(menuid > -1) // if its existed display the menu...
	{
		menu_display(id, menuid, iPage)
	}
}


create_weapons_menus()
{
	new sID[4];
	
	if(wpn_menu1 == -1)
	{
		wpn_menu1 = menu_create("Choose an option...", "weapons_handle")
		
		menu_additem(wpn_menu1, "\rNew \yweapons")
		menu_additem(wpn_menu1, "\rPrevious \yweapons")
	}
	if(wpn_menu2 == -1)
	{
		wpn_menu2 = menu_create("Choose your primary..", "wpn_handle1")
		
		for(new i = 0; i < sizeof WEAPONS_INFO; i++)
		{
			if(WEAPONS_INFO[i][WEAPON_TYPE] == WPN_PRIMARY)
			{
				num_to_str(i, sID, charsmax(sID))
				menu_additem(wpn_menu2, WEAPONS_INFO[i][WEAPON_NAME], sID)
			}
		}
	}
	if(wpn_menu3 == -1)
	{
		wpn_menu3 = menu_create("Choose your secondary..", "wpn_handle2")
		
		for(new i = 0; i < sizeof WEAPONS_INFO; i++)
		{
			if(WEAPONS_INFO[i][WEAPON_TYPE] == WPN_SECONDARY)
			{
				num_to_str(i, sID, charsmax(sID))
				menu_additem(wpn_menu3, WEAPONS_INFO[i][WEAPON_NAME], sID)
			}
		}
	}
}

destroy_weapons_menus()
{
	if(wpn_menu1 > -1)
	{
		menu_destroy(wpn_menu1);
		wpn_menu1 = -1;
	}
	
	if(wpn_menu2 > -1)
	{
		menu_destroy(wpn_menu2);
		wpn_menu2 = -1;
	}
	
	if(wpn_menu3 > -1)
	{
		menu_destroy(wpn_menu3);
		wpn_menu3 = -1;
	}
}

public weapons_handle(id, menu, item)
{
	if(item == MENU_EXIT || !is_user_alive(id))
	{
		return PLUGIN_HANDLED;
	}
	
	switch(item)
	{
		case 0: show_newmenu(id, wpn_menu2, 0, 1);
		case 1:
		{
			if(user_weapons[id][WPN_PRIMARY] == -1 || user_weapons[id][WPN_SECONDARY] == -1)
			{
				show_newmenu(id, wpn_menu1, 0, 1);
				return PLUGIN_HANDLED;
			}
			
			x_give_weapon(id, WEAPONS_INFO[user_weapons[id][WPN_PRIMARY]][WEAPON_ID], 
			WEAPONS_INFO[user_weapons[id][WPN_PRIMARY]][WEAPON_BPAMMO]);
			x_give_weapon(id, WEAPONS_INFO[user_weapons[id][WPN_SECONDARY]][WEAPON_ID], 
			WEAPONS_INFO[user_weapons[id][WPN_SECONDARY]][WEAPON_BPAMMO]);
		}
	}

	return PLUGIN_HANDLED;
}

public wpn_handle1(id, menu, item)
{
	if(!is_user_alive(id))
		return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT)
	{
		return PLUGIN_HANDLED;
	}
	
	new paccess, sName[32], iCallback, sData[4];
	menu_item_getinfo(menu, item, paccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	
	item = str_to_num(sData);
	
	x_give_weapon(id, WEAPONS_INFO[item][WEAPON_ID], WEAPONS_INFO[item][WEAPON_BPAMMO]);
	user_weapons[id][WPN_PRIMARY] = item;
	
	show_newmenu(id, wpn_menu3, 0, 1);
	return PLUGIN_HANDLED;
}

public wpn_handle2(id, menu, item)
{
	if(!is_user_alive(id))
		return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT)
	{
		return PLUGIN_HANDLED;
	}
	
	new paccess, sName[32], iCallback, sData[4];
	menu_item_getinfo(menu, item, paccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	
	item = str_to_num(sData);
	
	x_give_weapon(id, WEAPONS_INFO[item][WEAPON_ID], WEAPONS_INFO[item][WEAPON_BPAMMO]);
	user_weapons[id][WPN_SECONDARY] = item;

	return PLUGIN_HANDLED;
}

x_give_weapon(id, const wpn[], bpammo = 0)
{
	give_item(id, wpn);
	cs_set_user_bpammo(id, get_weaponid(wpn), bpammo);
}
