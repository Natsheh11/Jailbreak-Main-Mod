/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <jailbreak_core>

#define PLUGIN "[JB] Gambling System"
#define AUTHOR "Natsheh"

enum _:GAME_GAMBLING_DATA
{
	GAMBLE_GAME_NAME[32],
	GAMBLE_GAME_FUNCTION,
	GAMBLE_GAME_PLUGIN,
	GAMBLE_MINIMUM_AMOUNT,
	GAMBLE_GAME_ACCESS
}

new g_iItem, user_bet[33], Array:g_gambling_array, g_gamble_games_count;

public plugin_end()
{
	ArrayDestroy(g_gambling_array);
}

public plugin_natives()
{
	g_gambling_array = ArrayCreate(GAME_GAMBLING_DATA,1);
	
	register_native("jailbreak_reg_gambling_game", "_reg_gambling_game");
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_iItem = register_jailbreak_mmitem("MM_ITEM_GAMBLE_MENU", 0, TEAM_PRISONERS);
	
	register_clcmd("amount_of_bet", "clcmd_amountofbet");
	register_clcmd("radio1", "clcmd_radio1");
}

public clcmd_radio1(id)
{
	if(get_user_team(id) == TEAM_PRISONERS)
	{
		Open_Gamblingmenu(id);
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public clcmd_amountofbet(id)
{
	new szAmount[20];
	read_args(szAmount, charsmax(szAmount));
	remove_quotes(szAmount);
	
	new iAmount = str_to_num(szAmount);
	
	if( 0 >= iAmount )
	{
		client_print(id, print_center, "Please type in a positive value!");
		client_cmd(id, "messagemode amount_of_bet");
		Open_Gamblingmenu(id);
		return 1;
	}
	
	if( iAmount > jb_get_user_cash(id))
	{
		client_print(id, print_center, "Insufficient funds!");
		client_cmd(id, "messagemode amount_of_bet");
		Open_Gamblingmenu(id)
		return 1;
	}
	
	user_bet[id] = iAmount;
	Open_Gamblingmenu(id);
	return 1;
}

public jb_mm_itemselected(id, itemid)
{
	if(itemid == g_iItem)
	{
		Open_Gamblingmenu(id);
	}
}

Open_Gamblingmenu(id)
{
	new usercash;
	if(user_bet[id] > (usercash=jb_get_user_cash(id)))
	{
		user_bet[id] = usercash;
	}
	
	new sText[128];
	
	formatex(sText, charsmax(sText), "\rGambling menu^n  \ychoose your bets! ^n\rCash: \w$%d", usercash);
	new menu = menu_create(sText, "m_handler");
	
	formatex(sText, charsmax(sText), "Amount: $%d^n  Type in your amount of betting!^n^n", user_bet[id]);
	menu_additem(menu, sText);
	
	for(new i, any:xArray[GAME_GAMBLING_DATA]; i < g_gamble_games_count; i++)
	{
		ArrayGetArray(g_gambling_array, i, xArray);
		formatex(sText, charsmax(sText), "\w%s    \yMinimum: \w$\r%d", xArray[GAMBLE_GAME_NAME], xArray[GAMBLE_MINIMUM_AMOUNT]);
		menu_additem(menu, sText, "", xArray[GAMBLE_GAME_ACCESS]);
	}
	
	menu_display(id, menu);
}

public m_handler(id, menu, item)
{
	menu_destroy(menu);
	if(item == MENU_EXIT) return PLUGIN_HANDLED;
	
	if(item >= 1) {
		
		new xArray[GAME_GAMBLING_DATA];
		ArrayGetArray(g_gambling_array, item - 1, xArray);
		
		/* function(id, gambling_amount, minimum_amount, access) */
		if(callfunc_begin_i(xArray[GAMBLE_GAME_FUNCTION], xArray[GAMBLE_GAME_PLUGIN]) > 0)
		{
			callfunc_push_int(id);
			callfunc_push_int(user_bet[id]);
			callfunc_push_int(xArray[GAMBLE_MINIMUM_AMOUNT]);
			callfunc_push_int(xArray[GAMBLE_GAME_ACCESS]);
			callfunc_end();

			new szName[32];
			get_user_name(id, szName, charsmax(szName));
			log_to_file("jb_gambling.txt", "Player '%s' is gambling in game '%s' betting value '%d$'.",  szName, xArray[GAMBLE_GAME_NAME], user_bet[id]);
		}
	}
	else if(item == 0)
	{
		client_print(id, print_center, "Please type in a positive value!");
		client_cmd(id, "messagemode amount_of_bet");
	}
	return PLUGIN_HANDLED;
}

// native jailbreak_reg_gambling_game(const func_target[], const gamble_gamename[], gamble_minimum_amount=1000, gamble_game_access=0);
public _reg_gambling_game(plugin, argc)
{
	new any:xArray[GAME_GAMBLING_DATA], szFunction[32];
	get_string(1, szFunction, charsmax(szFunction));
	xArray[GAMBLE_GAME_FUNCTION] = get_func_id(szFunction, plugin);
	xArray[GAMBLE_GAME_PLUGIN] = plugin;
	get_string(2, xArray[GAMBLE_GAME_NAME], charsmax(xArray[GAMBLE_GAME_NAME]));
	xArray[GAMBLE_MINIMUM_AMOUNT] = get_param(3);
	xArray[GAMBLE_GAME_ACCESS] = get_param(4);
	ArrayPushArray(g_gambling_array, xArray);
	g_gamble_games_count ++;
	return g_gamble_games_count-1;
}
