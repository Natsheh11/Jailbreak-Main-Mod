/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <jailbreak_core>
#include <fun>
#include <cs_player_models_api>
#include <hamsandwich>
#include <inc_get_team_fix>

#define PLUGIN "[JB] DAY:Free day"
#define AUTHOR "Natsheh"

#define TASK_CALL_THEDAY 948211

const HamHook:Invalid_HamHook = any:-1;

new g_dayid, g_itemid, g_FDAY_MENU = -1, g_user_has_fd,
g_user_alive, g_shopitemid, g_lr_freeday, bool:g_has_freeday_player_mdl, g_FREEDAY_MODEL[32],
g_FREEDAY_MODEL_BODYID, bool:g_DayHasEnded, g_pcvar_timer, HamHook:g_HookCellsUsePost = Invalid_HamHook, g_cells = -1;

public plugin_precache()
{
	new szFile[64];
	copy(g_FREEDAY_MODEL, charsmax(g_FREEDAY_MODEL), "prisoner_freeday");
	jb_ini_get_keyvalue("FREEDAY", "FREEDAY_PLAYER_MODEL", g_FREEDAY_MODEL, charsmax(g_FREEDAY_MODEL));
	formatex(szFile, charsmax(szFile), "models/player/%s/%s.mdl", g_FREEDAY_MODEL, g_FREEDAY_MODEL);
	if(file_exists(szFile))
	{
		PRECACHE_PLAYER_MODEL(szFile);

		szFile[0] = '0'; szFile[1] = EOS;
		jb_ini_get_keyvalue("FREEDAY", "FREEDAY_PLAYER_MODEL_BODY", szFile, charsmax(szFile));
		g_FREEDAY_MODEL_BODYID = str_to_num(szFile);
		g_has_freeday_player_mdl = true;
	}
	
	formatex(szFile, charsmax(szFile), "models/player/%s/%sT.mdl", g_FREEDAY_MODEL, g_FREEDAY_MODEL);
	if(file_exists(szFile)) PRECACHE_PLAYER_MODEL(szFile);
}

public plugin_natives()
{
	register_native("jb_has_user_afreeday", "_has_freeday");
}

public any:_has_freeday(plugin, argc)
{
	if(argc != 1)
	{
		log_error(AMX_ERR_NATIVE, "Error native parameters doesn't match, needed 1 got %d", argc);
		return -1;
	}
	
	new index = get_param(1);
	if(!(1 <= index <= 32))
	{
		log_error(AMX_ERR_NATIVE, "Error Invalid player index %d", index);
		return -1;
	}
	
	return (check_flag(g_user_has_fd,index)) ? true:false;
}

public plugin_end()
{
	if(g_FDAY_MENU != INVALID_HANDLE) menu_destroy(g_FDAY_MENU);
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	g_itemid = register_jailbreak_mmitem("MM_ITEM_FREEDAY_MENU", 0, TEAM_GUARDS);
	g_dayid = register_jailbreak_day("Free day", 0, 220.0, DAY_GUARDS_VS_PRISONERS); // 5 minutes
	g_shopitemid = register_jailbreak_shopitem("Freeday", "Enjoy your freedom!", 15000, TEAM_PRISONERS, 0, (1<<DAY_NONE+1));
	g_lr_freeday = register_jailbreak_lritem("Freeday nextround");
	
	RegisterHam(Ham_Spawn, "player", "fw_player_spawned", 1);
	
	register_clcmd("jb_freeday_menu", "clcmd_freeday_menu", ADMIN_KICK, "open's freeday menu!");
	
	create_thefreeday_menu();
	
	g_pcvar_timer = register_cvar("jb_day_freeday_call_time", "30");
	
	register_event("DeathMsg", "event_deathmsg", "a");
	
	g_DayHasEnded = true;
}

#if AMXX_VERSION_NUM > 182
public client_disconnected(id)
#else
public client_disconnect(id)
#endif
{
	remove_flag(g_user_alive,id);

	if(check_flag(g_user_has_fd,id))
	{
		remove_flag(g_user_has_fd,id);
		jb_display_on_player_radar(id, JB_DISPLAY_RADAR_DEFAULT);
	}
}

public jb_lr_duel_selected(id, itemid)
{
	if(itemid == g_lr_freeday)
	{
		new szText[96], szName[32];
		get_user_name(id, szName, charsmax(szName));
		formatex(szText, charsmax(szText), "%s has chosen a freeday next round as Last Request!", szName);
		UTIL_DirectorMessage(
			.index       = 0,
			.message     = szText,
			.red         = 225,
			.green       = 0,
			.blue        = 0,
			.x           = -1.0,
			.y           = 0.25,
			.effect      = 1,
			.fxTime      = 6.0,
			.holdTime    = 6.0,
			.fadeInTime  = 0.03,
			.fadeOutTime = 0.1
		);

		user_silentkill(id);
		set_flag(g_user_has_fd,id);
		return JB_LR_NOT_AVAILABLE
	}
	return JB_IGNORED;
}

public fw_use_func_button_post(ent, caller)
{
	if(ent == g_cells)
	{
		if(jb_get_current_day() != DAY_NONE)
		{
			return;
		}

		if(is_user_connected(caller))
		{
			new szText[96], szName[32];
			get_user_name(caller, szName, charsmax(szName));
			formatex(szText, charsmax(szText), "%s has opened the cells!", szName);
			jb_logmessage(szText);
			
			if(get_user_team(caller) == TEAM_PRISONERS)
			{
				new szName[32], szMessage[196];
				get_user_name(caller, szName, charsmax(szName));
				jb_start_theday(g_dayid);
				formatex(szMessage, charsmax(szMessage),
					"%L", LANG_PLAYER, "FREEDAY_PRISONER_OPENED_CELLS", szName);
				
				UTIL_DirectorMessage(
				.index       = 0, 
				.message     = szMessage,
				.red         = 255,
				.green       = 0,
				.blue        = 0,
				.x           = -1.0,
				.y           = 0.25,
				.effect      = 1,
				.fxTime      = 6.0,
				.holdTime    = 6.0,
				.fadeInTime  = 0.03,
				.fadeOutTime = 0.1
				);
			}
		}
		
		if(g_HookCellsUsePost != Invalid_HamHook) DisableHamForward(g_HookCellsUsePost);
		remove_task(TASK_CALL_THEDAY);
	}
}

public event_deathmsg()
{
	new vic = read_data(2);
	
	remove_flag(g_user_alive,vic);
	
	if(!g_user_has_fd) return;
	
	new players[32], pnum;
	get_players(players, pnum, "ahe", "TERRORIST");
	
	if( jb_get_current_day() == g_dayid )
	{
		if(pnum <= 2 && !g_DayHasEnded)
		{
			g_DayHasEnded = true;
			jb_end_theday();
		}
	}
	else if(pnum > 0)
	{
		new iFreedayPlayersCount, arrayFreedayPlayers[MAX_PLAYERS];

		for(new i, player; i < pnum; i++)
		{
			player = players[i];

			if(check_flag(g_user_has_fd,player))
			{
				arrayFreedayPlayers[iFreedayPlayersCount++] = player;
			}
		}

		if( (pnum - iFreedayPlayersCount) <= 1 )
		{
			for(new i, player, sPlayername[32]; i < iFreedayPlayersCount; i++)
			{
				player = arrayFreedayPlayers[i];

				get_user_name(player, sPlayername, charsmax(sPlayername));
				cprint_chat(0, _, "%L", LANG_PLAYER, "FREEDAY_USER_FREEDAY_ENDED", sPlayername);
				set_user_rendering(player);
				jb_set_user_class_model(player);
			}

			g_user_has_fd = 0;
		}
	}
}

create_thefreeday_menu()
{
	new szText[64];
	formatex(szText, charsmax(szText), "%L", LANG_PLAYER, "FREEDAY_MENU_TITLE");
	g_FDAY_MENU = menu_create(szText, "fd_menu_handler", true)
	
	formatex(szText, charsmax(szText), "%L", LANG_PLAYER, "FD_MENU_FREEDAY_FOR_ALL");
	menu_additem(g_FDAY_MENU, szText)
	formatex(szText, charsmax(szText), "%L", LANG_PLAYER, "FD_MENU_FREEDAY_FOR_SPECIFIED");
	menu_additem(g_FDAY_MENU, szText)
}

public clcmd_freeday_menu(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1))
		return 1;
	
	if(jb_get_current_day() != DAY_NONE || jb_get_current_duel() != DUEL_NONE)
	{
		console_print(id, "%L", id, "CMD_FREEDAY_MENU_NOTAVAIL")
		return 1;
	}
	
	if(g_FDAY_MENU > -1) menu_display(id, g_FDAY_MENU);
	return 1;
}

public jb_shop_item_preselect(id, itemid)
{
	if(itemid != g_shopitemid) return PLUGIN_CONTINUE;
	
	new ignore[32], tnum;
	get_players(ignore, tnum, "ahe", "TERRORIST")
	if(check_flag(id,g_user_has_fd) || tnum <= 2)
	{
		return JB_MENU_ITEM_UNAVAILABLE;
	}
	
	return PLUGIN_CONTINUE;
}

public jb_shop_item_postselect(id, itemid)
{
	if(itemid != g_shopitemid) return PLUGIN_CONTINUE;
	
	new ignore[32], tnum;
	get_players(ignore, tnum, "ahe", "TERRORIST")
	if(check_flag(id,g_user_has_fd) || tnum <= 2)
	{
		return JB_MENU_ITEM_UNAVAILABLE;
	}
	
	return PLUGIN_CONTINUE;
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == g_shopitemid)
	{
		set_flag(g_user_has_fd,id);
		jb_display_on_player_radar(id, JB_DISPLAY_RADAR_ALL);
		set_user_rendering(id, kRenderFxGlowShell, 200, 200, 0, kRenderNormal, 25);
		
		if(g_has_freeday_player_mdl)
		{
			cs_set_player_model(id, g_FREEDAY_MODEL);
			set_pev(id, pev_body, g_FREEDAY_MODEL_BODYID);
		}
	}
}

public jb_mm_itemadded(id, itemid)
{
	if(itemid == g_itemid)
	{
		if(jb_get_current_day() != DAY_NONE || jb_get_current_duel() != DUEL_NONE)
		{
			return JB_MENU_ITEM_UNAVAILABLE;
		}
		
		new players[32], pnum;
		get_players(players, pnum, "ahe", "TERRORIST")
		if(pnum < 3) return JB_MENU_ITEM_UNAVAILABLE;
	}
	
	return PLUGIN_CONTINUE;
}

public jb_mm_itemselected(id, itemid)
{
	if(itemid == g_itemid)
	{
		if(jb_get_current_day() != DAY_NONE || jb_get_current_duel() != DUEL_NONE)
		{
			return JB_MENU_ITEM_UNAVAILABLE;
		}
		
		new players[32], pnum;
		get_players(players, pnum, "ahe", "TERRORIST")
		if(pnum < 3) return JB_MENU_ITEM_UNAVAILABLE;
		
		if(g_FDAY_MENU != -1) menu_display(id, g_FDAY_MENU);
	}
	
	return PLUGIN_CONTINUE;
}

public fd_menu_handler(id, menu, item)
{
	if(jb_get_current_day() != DAY_NONE || jb_get_current_duel() != DUEL_NONE)
	{
		return JB_MENU_ITEM_UNAVAILABLE;
	}
	
	switch( item )
	{
		case 0:
		{
			new players[32], pnum;
			get_players(players, pnum, "ahe", "TERRORIST")
			
			if(pnum < 3)
			{
				cprint_chat(id, _, "%L", id, "FREEDAY_REQUIRES")
				return 1;
			}
			
			jb_start_theday(g_dayid)
		}
		case 1:
		{
			new players[32], pnum;
			get_players(players, pnum, "ahe", "TERRORIST")
			
			if(pnum < 3)
			{
				cprint_chat(id, _, "%L", id, "FREEDAY_REQUIRES")
				return 1;
			}
			
			new sText[96];
			formatex(sText, charsmax(sText), "%L", LANG_PLAYER, "FD_SPECIFIED_MENU_TITLE");
			new xmenu = menu_create(sText, "fd_player_menu", true)
			
			for(new i, player, iLen, sInfo[32], sName[34], MaxCharsOfsName = charsmax(sName); i < pnum; i++)
			{
				player = players[i];
				num_to_str(get_user_userid(player), sInfo, charsmax(sInfo))
				iLen = formatex(sName, charsmax(sName), (check_flag(g_user_has_fd,player) ? "\r":"\w"));
				get_user_name(player, sName[iLen], (MaxCharsOfsName - iLen));
				menu_additem(xmenu, sName, sInfo);
			}
			
			new sInfo[2]; sInfo[0] = id;
			set_task(0.1, "newmenu_display", xmenu, sInfo, sizeof sInfo);
		}
		case MENU_EXIT: return 1;
	}
	
	return 1;
}

public newmenu_display(target[], menu)
{
	new id = target[0];
	
	if(!is_user_connected(id)) return;
	
	menu_display(id, menu);
}

public fd_player_menu(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new paccess, sData[32], sName[34], callback;
	menu_item_getinfo(menu, item, paccess, sData, charsmax(sData), sName, charsmax(sName), callback);
	
	menu_destroy(menu);
	
	if(jb_get_current_day() != DAY_NONE || jb_get_current_duel() != DAY_NONE)
	{
		cprint_chat(id, _, "%L", id, "CHAT_CANT_EVENT_INPROGRESS");
		return PLUGIN_HANDLED;
	}
	
	new player = find_player("k", str_to_num(sData));
	
	if(!check_flag(g_user_alive,player))
	{
		fd_menu_handler(id, g_FDAY_MENU, 1); // show players freeday menu
		return PLUGIN_HANDLED;
	}
	
	new sGuardname[32];
	get_user_name(id, sGuardname, charsmax(sGuardname))
	get_user_name(player, sName, charsmax(sName))
	
	if(check_flag(g_user_has_fd,player))
	{
		cprint_chat(0, _, "%L", LANG_PLAYER, get_user_team(id) == TEAM_GUARDS ? "GUARD_REMOVE_PRISONER_FREEDAY":"ADMIN_REMOVE_PRISONER_FREEDAY", sGuardname, sName);
		remove_flag(g_user_has_fd,player);
		jb_display_on_player_radar(player, JB_DISPLAY_RADAR_DEFAULT);
		set_user_rendering(player);
		
		if(g_has_freeday_player_mdl)
		{
			jb_set_user_class_model(player);
		}
	}
	else
	{
		cprint_chat(0, _, "%L", LANG_PLAYER, get_user_team(id) == TEAM_GUARDS ? "GUARD_GAVE_PRISONER_FREEDAY":"ADMIN_GAVE_PRISONER_FREEDAY", sGuardname, sName);
		set_flag(g_user_has_fd,player);
		jb_display_on_player_radar(player, JB_DISPLAY_RADAR_ALL);
		set_user_rendering(player, kRenderFxGlowShell, 200, 200, 0, kRenderNormal, 25);
		
		if(g_has_freeday_player_mdl)
		{
			cs_set_player_model(player, g_FREEDAY_MODEL);
			set_pev(player, pev_body, g_FREEDAY_MODEL_BODYID);
		}
	}
	
	 // show players freeday menu
	fd_menu_handler(id, g_FDAY_MENU, 1);
	return PLUGIN_HANDLED;
}

public fw_player_spawned(id)
{
	if(!is_user_alive(id))
		return;
	
	set_flag(g_user_alive,id);
	
	if(((check_flag(g_user_has_fd,id) || jb_get_current_day() == g_dayid)) && get_user_team(id) == TEAM_PRISONERS)
	{
		new ir, ig, ib;
		ir = random_num(225, 255);
		ig = random_num(225, 255);
		
		set_flag(g_user_has_fd,id);
		jb_display_on_player_radar(id, JB_DISPLAY_RADAR_ALL);
		set_user_rendering(id, kRenderFxGlowShell, ir, ig, ib, kRenderNormal, 20);
		
		if(g_has_freeday_player_mdl)
		{
			cs_set_player_model(id, g_FREEDAY_MODEL);
			set_pev(id, pev_body, g_FREEDAY_MODEL_BODYID);
		}
		
		jb_logmessage_action("has spawned with a freeday", id);
	}
}

public jb_round_start()
{
	g_cells = jb_cells(JB_CELLS_ENTITY_INDEX);
	
	if(g_cells > -1)
	{
		static iLastCellsEnt = 0;

		if(iLastCellsEnt != g_cells)
		{
			if(g_HookCellsUsePost != Invalid_HamHook)
			{
				DisableHamForward(g_HookCellsUsePost);
			}

			DisableHamForward((g_HookCellsUsePost = RegisterHamFromEntity(Ham_Use, g_cells, "fw_use_func_button_post", .Post=1)));
			iLastCellsEnt = g_cells;
		}

		EnableHamForward(g_HookCellsUsePost);

		remove_task(TASK_CALL_THEDAY);

		new Float:call_time = floatclamp(get_pcvar_float(g_pcvar_timer), 0.0, 999999.0);
		
		new players[32], pnum;
		get_players(players, pnum, "ahe", "TERRORIST");
		if(call_time > 0.0 && jb_get_current_day() == DAY_NONE && jb_get_current_duel() == DUEL_NONE && pnum > 2)
		{
			set_task(call_time, "calling_failed", TASK_CALL_THEDAY);
			cprint_chat(0, 'c', "%L", LANG_PLAYER, "FREEDAY_CALL_TIME", call_time);
		}
	}
}

public calling_failed(taskid)
{
	new players[32], pnum;
	get_players(players, pnum, "ahe", "TERRORIST");
	if(jb_get_current_day() != DAY_NONE || jb_get_current_duel() != DUEL_NONE || pnum < 3)
	{
		return;
	}
	
	new szText[128];
	formatex(szText, charsmax(szText), "%L", LANG_PLAYER, "FREEDAY_CALL_TIME_FAILED");
	
	UTIL_DirectorMessage(
		.index       = 0, 
		.message     = szText,
		.red         = 255,
		.green       = 0,
		.blue        = 0,
		.x           = -1.0,
		.y           = 0.25,
		.effect      = 1,
		.fxTime      = 6.0,
		.holdTime    = 6.0,
		.fadeInTime  = 0.03,
		.fadeOutTime = 0.1
	);
	
	jb_logmessage("Guards have failed to open the cells before the time!");
	jb_start_theday(g_dayid);
	remove_task(taskid);
}

public jb_round_end()
{
	if(g_HookCellsUsePost != Invalid_HamHook) DisableHamForward(g_HookCellsUsePost);
	remove_task(TASK_CALL_THEDAY);
	
	if(g_user_has_fd > 0)
	{
		new players[32], pnum, player;
		get_players(players, pnum, "ahe", "TERRORIST");
		
		for(new i = 0; i < pnum; i++)
		{
			player = players[i];
			if(!check_flag(g_user_has_fd,player)) continue;
			set_user_rendering(player);
			jb_set_user_class_model(player);
		}
		
		g_user_has_fd = 0;
	}
}

public jb_day_preselected(id, dayid)
{
	if(dayid == g_dayid)
	{
		new players[32], pnum;
		get_players(players, pnum, "ahe", "TERRORIST")
		return (pnum < 3) ? JB_MENU_ITEM_UNAVAILABLE:JB_IGNORED;
	}
	
	return JB_IGNORED;
}

public jb_day_postselected(id, iDayid, iAccess)
{
	if(g_user_has_fd > 0)
	{
		new players[32], pnum, player;
		get_players(players, pnum, "ahe", "TERRORIST")
		
		for(new i = 0; i < pnum; i++)
		{
			player = players[i];
			if(!check_flag(g_user_has_fd,player)) continue;
			set_user_rendering(player);
			jb_set_user_class_model(player);
		}
		
		g_user_has_fd = 0;
	}
}

public jb_lr_duel_started()
{
	if(g_HookCellsUsePost != Invalid_HamHook) DisableHamForward(g_HookCellsUsePost);
	remove_task(TASK_CALL_THEDAY);
}


public jb_day_start(iDayid)
{
	if(g_user_has_fd > 0)
	{
		cprint_chat(0, _, "Failed to start a specialday/voteday someone has a freeday!");
		return JB_HANDLED;
	}

	return JB_IGNORED;
}

public jb_day_started(iDayid)
{
	if(g_HookCellsUsePost != Invalid_HamHook) DisableHamForward(g_HookCellsUsePost);
	remove_task(TASK_CALL_THEDAY);
	
	if(iDayid == g_dayid)
	{
		g_DayHasEnded = false;
		jb_cells(JB_CELLS_OPEN);
		
		new players[32], pnum, player;
		get_players(players, pnum, "ahe", "TERRORIST");
		
		new ir, ig, ib;
		
		for(new i = 0; i < pnum; i++)
		{
			ir = 255;
			ig = 255;
			ib = 0;
		
			player = players[i];
			set_flag(g_user_has_fd,player);
			jb_display_on_player_radar(player, JB_DISPLAY_RADAR_ALL);
			set_user_rendering(player, kRenderFxGlowShell, ir, ig, ib, kRenderNormal, 16);
			if(g_has_freeday_player_mdl)
			{
				cs_set_player_model(player, g_FREEDAY_MODEL);
				set_pev(player, pev_body, g_FREEDAY_MODEL_BODYID);
			}
		}
	}
}

public jb_day_ended(iDayid)
{
	if(iDayid == g_dayid)
	{
		g_DayHasEnded = true;
		jb_cells(JB_CELLS_CLOSE)
		
		new players[32], pnum, player;
		get_players(players, pnum, "he", "TERRORIST")
		
		for(new i = 0; i < pnum; i++)
		{
			player = players[i];
			if(!check_flag(g_user_has_fd,player)) continue;
			set_user_rendering(player);
			jb_set_user_class_model(player);
			jb_display_on_player_radar(player, JB_DISPLAY_RADAR_DEFAULT);
		}
		
		g_user_has_fd = 0;
	}
}

stock UTIL_DirectorMessage( const index, const message[], const red = 0, const green = 160, const blue = 0, 
					  const Float:x = -1.0, const Float:y = 0.65, const effect = 2, const Float:fxTime = 6.0, 
					  const Float:holdTime = 3.0, const Float:fadeInTime = 0.1, const Float:fadeOutTime = 1.5 )
{
	#define pack_color(%0,%1,%2) ( %2 + ( %1 << 8 ) + ( %0 << 16 ) )
	#define write_float(%0) write_long( _:%0 )
	
	message_begin( index ? MSG_ONE_UNRELIABLE : MSG_BROADCAST, SVC_DIRECTOR, .player = index );
	{
		write_byte( strlen( message ) + 31 ); // size of write_*
		write_byte( DRC_CMD_MESSAGE );
		write_byte( effect );
		write_long( pack_color( red, green, blue ) );
		write_float( x );
		write_float( y );
		write_float( fadeInTime );
		write_float( fadeOutTime );
		write_float( holdTime );
		write_float( fxTime );
		write_string( message );
	}
	message_end( );
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
