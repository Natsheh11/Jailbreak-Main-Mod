/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <fun>
#include <hamsandwich>
#include <jailbreak_core>

#define PLUGIN "[JB] DAY: Freeze tag"
#define AUTHOR "Natsheh"

#define TASK_RUNNER_LIFE 4865331
#define TASK_RESET_BOOST 4865377

new g_iFreezetag_dayid, user_frozen[33], Float:user_boost_delay[33], bool:user_boost_enabled[33], user_lifetimer[33];
new HamHook:Ham_Fw_TraceAttackPlayerPre, HamHook:Ham_Fw_PlayerJumpPost, g_cvar_boostdelay,
g_cvar_huntergravity, g_cvar_runnergravity, g_cvar_boostspeed, g_cvar_runnerspeed, g_cvar_hunterspeed,
g_cvar_runner_life, g_cvar_boostlife, FM_Fw_CmdStartPre;

const MOVEMENT_KEYS = IN_ATTACK|IN_ATTACK2|IN_FORWARD|IN_RIGHT|IN_RUN|IN_LEFT|IN_BACK|IN_DUCK|IN_JUMP|IN_MOVELEFT|IN_MOVERIGHT

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_iFreezetag_dayid = register_jailbreak_day("Freeze Tag", 0, 180.0, DAY_GUARDS_VS_PRISONERS);
	
	DisableHamForward((Ham_Fw_TraceAttackPlayerPre = RegisterHam(Ham_TraceAttack, "player", "fw_TraceAttackPlayerPre")));
	DisableHamForward((Ham_Fw_PlayerJumpPost = RegisterHam(Ham_Player_Jump, "player", "fw_PlayerJumpPost", false)));
	
	g_cvar_runner_life = register_cvar("jb_day_freezetag_runner_lifetimer", "30");
	g_cvar_hunterspeed = register_cvar("jb_day_freezetag_hunters_speed", "300");
	g_cvar_runnerspeed = register_cvar("jb_day_freezetag_runners_speed", "300");
	g_cvar_huntergravity = register_cvar("jb_day_freezetag_hunters_gravity", "600");
	g_cvar_runnergravity = register_cvar("jb_day_freezetag_runners_gravity", "600");
	g_cvar_boostdelay = register_cvar("jb_day_freezetag_boost_delay", "10");
	g_cvar_boostlife = register_cvar("jb_day_freezetag_boost_life", "50");
	g_cvar_boostspeed = register_cvar("jb_day_freezetag_boost_speed", "400");
}

public fw_PlayerJumpPost(id)
{
	if(!user_frozen[id]) return HAM_IGNORED
	
	// block jumping :(
	static iOldButtons;
	iOldButtons = pev(id, pev_oldbuttons);
	
	if(!( iOldButtons & IN_JUMP ))
		set_pev(id, pev_oldbuttons, iOldButtons | IN_JUMP );
	
	return HAM_IGNORED;
}

public fw_CmdStart_Pre(id, uc_handle, seed)
{
	if(!is_user_alive(id))
	{
		return FMRES_IGNORED;
	}
	
	static iButtons; iButtons=pev(id, pev_button);
	
	if(user_frozen[id])
	{
		if(iButtons & MOVEMENT_KEYS)
		{
			set_uc(uc_handle, UC_Buttons, iButtons & ~MOVEMENT_KEYS);
			return FMRES_HANDLED;
		}
		
		return FMRES_IGNORED;
	}
	
	static Float:fDelay = 0.0, Float:g_gametime, iOldButtons; g_gametime = get_gametime();
	if(fDelay == 0.0) fDelay = floatmax(get_pcvar_float(g_cvar_boostdelay), 1.0);
	if(!user_boost_enabled[id] && (iButtons & IN_USE) && ((iOldButtons=pev(id, pev_oldbuttons)) & IN_USE) && (user_boost_delay[id] < g_gametime))
	{
		user_boost_enabled[id] = true;
		jb_logmessage_action("'Freeze Tag' used a boost!", id);
		set_user_maxspeed(id, get_pcvar_float(g_cvar_boostspeed));
		user_boost_delay[id] = get_gametime() + fDelay;
		set_task((floatmax((get_pcvar_float(g_cvar_boostlife)/100.0),0.1) * fDelay), "task_reset_speed", id+TASK_RESET_BOOST);
		return FMRES_IGNORED;
	}
	if(user_boost_enabled[id] && iOldButtons & IN_USE && !(iButtons & IN_USE))
	{
		task_reset_speed(id+TASK_RESET_BOOST);
	}
	
	return FMRES_IGNORED;
}

public task_reset_speed(id)
{
	remove_task(id);
	id -= TASK_RESET_BOOST;
	
	user_boost_enabled[id] = false;
	jb_logmessage_action("'Freeze Tag' the Boost has ran out!", id);
	switch( get_user_team(id) )
	{
		case TEAM_GUARDS: set_user_maxspeed(id, get_pcvar_float(g_cvar_hunterspeed));
		case TEAM_PRISONERS: set_user_maxspeed(id, get_pcvar_float(g_cvar_runnerspeed));
	}
}

public jb_day_started(iDayid)
{
	if(g_iFreezetag_dayid != iDayid) return;
	
	if(!FM_Fw_CmdStartPre)
		FM_Fw_CmdStartPre = register_forward(FM_CmdStart, "fw_CmdStart_Pre");
		
	EnableHamForward(Ham_Fw_TraceAttackPlayerPre);
	EnableHamForward(Ham_Fw_PlayerJumpPost);
	
	new players[32], pnum;
	get_players(players, pnum, "ah")
	
	arrayset(user_frozen, false, sizeof user_frozen);
	
	for(new i, id, iTeam; i < pnum; i++)
	{
		id = players[i];
		iTeam = get_user_team(id);
		jb_block_user_weapons(id, true, ~player_flag(CSW_KNIFE));
		strip_user_weapons(id);
		give_item(id, "weapon_knife");
		set_user_gravity(id, (((iTeam != TEAM_GUARDS) ? get_pcvar_float(g_cvar_runnergravity):get_pcvar_float(g_cvar_huntergravity))/800.0));
		set_user_maxspeed(id, (iTeam != TEAM_GUARDS) ? get_pcvar_float(g_cvar_runnerspeed):get_pcvar_float(g_cvar_hunterspeed));
	}
	
}

public jb_day_end(iDayid)
{
	if(g_iFreezetag_dayid != iDayid) return;
	
	if(FM_Fw_CmdStartPre > 0)
	{
		unregister_forward(FM_CmdStart, FM_Fw_CmdStartPre);
		FM_Fw_CmdStartPre = 0;
	}
	
	DisableHamForward(Ham_Fw_TraceAttackPlayerPre);
	DisableHamForward(Ham_Fw_PlayerJumpPost);
	
	new players[32], pnum, bool:HasTimeEnded = get_xvar_float(get_xvar_id("FUNDAY_TIMER_LENGTH")) == 0.0 ? true:false;
	get_players(players, pnum, "ah")
	
	for(new i, id; i < pnum; i++)
	{
		id = players[i];
		
		if(HasTimeEnded && get_user_team(id) == TEAM_GUARDS)
		{
			user_kill(id);
			continue;
		}
		
		remove_task(id + TASK_RESET_BOOST);
		remove_task(id + TASK_RUNNER_LIFE);
		set_user_rendering(id);
		jb_block_user_weapons(id, false);
		strip_user_weapons(id);
		give_item(id, "weapon_knife");
		set_user_gravity(id, 1.0);
	}
}

#if AMXX_VERSION_NUM > 182
public client_disconnected(id)
#else
public client_disconnect(id)
#endif
{
	remove_task(id+TASK_RESET_BOOST);
	remove_task(id+TASK_RUNNER_LIFE);
}

public fw_TraceAttackPlayerPre(const iVict, const iAttacker, Float:dmg, Float:dir[3], traceresult, dmgbits)
{
	if(!is_user_connected(iAttacker) || iVict == iAttacker) return HAM_IGNORED;
	
	static AttackerTeam, VictimTeam;
	if((VictimTeam=get_user_team(iVict)) != (AttackerTeam=get_user_team(iAttacker)) && !user_frozen[iVict] && AttackerTeam == TEAM_GUARDS)
	{
		if((pev(iAttacker, pev_button) & IN_ATTACK2))
		{
			user_caught(iVict, iAttacker);
		}
	}
	else if(VictimTeam == AttackerTeam && VictimTeam != TEAM_GUARDS && user_frozen[iVict] && !user_frozen[iAttacker])
	{
		if((pev(iAttacker, pev_button) & IN_ATTACK2))
		{
			user_freed(iVict, iAttacker);
		}
	}
	
	SetHamParamFloat(3, 0.0);
	return HAM_SUPERCEDE;
}

user_caught(id, hunter)
{
	user_frozen[id] = true;
	
	if(task_exists(id+TASK_RESET_BOOST)) task_reset_speed(id+TASK_RESET_BOOST);
	set_pev(id, pev_gravity, 0.0);
	set_user_maxspeed(id, -1.0);
	set_pev(id, pev_velocity, Float:{0.0,0.0,0.0});
	set_user_rendering(id, kRenderFxGlowShell, 200, 200, 200, kRenderNormal, 15);
	
	jb_logmessage_action("'Freeze Tag' has caught", hunter, id);
	
	if(!get_unfrozen_runners())
	{
		new players[32], pnum, target;
		get_players(players, pnum, "ahe", "TERRORIST");
		
		for(new i; i < pnum; i++)
		{
			target = players[i];
			
			if(id != target)
			{
				user_kill(target);
				remove_task(TASK_RUNNER_LIFE + target);
			}
		}
		
		user_freed(id);
		return;
	}
	
	set_task(1.0, "task_user_life", TASK_RUNNER_LIFE + id, _, _, "a", (user_lifetimer[id]=get_pcvar_num(g_cvar_runner_life)) + 1);
}

user_freed(id, helper=0)
{
	user_frozen[id] = false;
	set_user_gravity(id, (get_pcvar_float(g_cvar_runnergravity)/800.0));
	
	set_user_rendering(id);
	set_user_maxspeed(id, get_pcvar_float(g_cvar_runnerspeed));
	
	remove_task(TASK_RUNNER_LIFE + id);
	if(helper > 0) jb_logmessage_action("'Freeze Tag' has freed", helper, id);
}

get_unfrozen_runners(runners[32]={0,0,...})
{
	new players[32], pnum, id, iRunners;
	get_players(players, pnum, "ahe", "TERRORIST");
	
	for(new i; i < pnum; i++)
	{
		id = players[i];
		
		if(user_frozen[id]) continue;
		
		runners[iRunners] = id;
		iRunners ++;
	}
	
	return iRunners;
}

public task_user_life(const taskid)
{
	new id = taskid - TASK_RUNNER_LIFE;
	
	if(!is_user_alive(id) || !user_frozen[id])
	{
		remove_task(taskid);
		return;
	}
	
	if(!user_lifetimer[id])
	{
		user_frozen[id]= false;
		user_kill(id);
		return;
	}
	
	new szText[64];
	formatex(szText, charsmax(szText), "'Freeze Tag' has '%d' seconds to live!",user_lifetimer[id]);
	jb_logmessage_action(szText, id);
	set_hudmessage(255, 0, 0, -1.0, 0.30, 2, 1.0, 1.0, _, _, -1);
	show_hudmessage(id, "%d Seconds to die!", user_lifetimer[id]);
	user_lifetimer[id] --;
}
