/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <cs_player_models_api>
#include <jailbreak_core>
#include <cstrike>
#include <fakemeta>
#include <engine>
#include <hamsandwich>
#include <fun>

#define PLUGIN "[JB] Day: TTT"
#define AUTHOR "Natsheh"

#define TASK_REVEAL_ROLES 184763
#define TASK_REVEAL_ROLE 9344621
#define TASK_ANALYZING 44353
#define TASK_ANALYZING_INTERRUPTION 999981
#define TASK_ENDING 195

#define OFFSET_TEAM 114
#define fm_get_user_team(%1)	(clamp(get_pdata_int(%1,OFFSET_TEAM),TEAM_ANY,TEAM_SPECTATOR))

public g_iTraitors, g_iDetectives, g_iInnocents, g_iPlayerIsWitness[MAX_PLAYERS+1];

enum ENUM_KILLER_DATA(+=1)
{
	KILLER_ID = 0,
	KILLER_WEAPON_NAME[32]
}

new TTT_DAY_ID, iMsg_DeathMsg, iMsg_HealthInfo, iMsg_ClCorpse, g_pcvar_Traitors_ratio, g_pcvar_traitors_tk,
g_pcvar_detectives_ratio, DETECTIVE_MDL[32] = "vip", Array:array_terrorist_mdls, g_pcvar_maxd_nearbyvoice,
FM_FW_VOICE_SETCLIENTLISTENING, HamHook:HamPlayerKilledPost,HamHook:HamPlayerTakeDamagePost,HamHook:HamPlayerTakeDamagePre,iMsg_ScoreAttrib, g_pcvar_analyzing_len,
HamHook:HamFuncButtonUsePost, HamHook:HamPlayerSpawnPost, g_iAlive, FW_FM_ADDTOFULLPACK, iMsg_SendAudio,
iMsg_TextMsg, Traitor_WIN_SND[64], INNOCENT_WIN_SND[64], g_iMaxplayers, ANALYZING_SOUND[64], bool:bINNOCENT_WIN_SND,
bool:bTraitor_WIN_SND, bool:bANALYZING_SOUND, fwMessage_saytext = INVALID_HANDLE, fwMessage_sendaudio = INVALID_HANDLE, fwMessage_textmsg = INVALID_HANDLE,
iMsg_ScoreInfo, iMsg_TeamInfo, iMsg_SayText, g_user_killer[33][ENUM_KILLER_DATA], FW_MESSAGE_RADAR, iMsg_Radar, g_SpeakingSprite = -1, g_HearingSprite = -1;
new FM_FW_PLAYER_PRETHINK = 0, bNearBySpeaker=false, Float:g_fRDM_Rate[33], Float:g_fRDM_CurrentRate[33], Float:g_fTotal_Damage[33][33], g_pcvar_RDM_MaxRate, g_pcvar_glow_corpses, bool:g_bTTTActive = false;

new const g_szCORPSE_CLASSNAME[] = "button_target";

enum _:WEAPONS_PARAMS (+=1)
{
	WEAPON_NAME[32] = 0,
	WEAPON_NAME_ID[32],
	WEAPON_BPAMMO
}

new const SEC_WEAPONS_INFO[][WEAPONS_PARAMS] =
{
	{ "USP", "weapon_usp", 100 },
	{ "Glock18", "weapon_glock18", 120 },
	{ "Deagle", "weapon_deagle", 35 },
	{ "P228", "weapon_p228", 52 },
	{ "Five~Seven", "weapon_fiveseven", 100 },
	{ "Elite", "weapon_elite", 120 }
}

new const PR_WEAPONS_INFO[][WEAPONS_PARAMS] =
{
	{ "M3", "weapon_m3", 32 },
	{ "Xm1014", "weapon_xm1014", 32 },
	{ "MP5-Navy", "weapon_mp5navy", 120 },
	{ "TMP", "weapon_tmp", 120 },
	{ "Mac10", "weapon_mac10", 100 },
	{ "P90", "weapon_p90", 100 },
	{ "UMP45", "weapon_ump45", 100 },
	{ "FAMAS", "weapon_famas", 90 },
	{ "GALIL", "weapon_galil", 90 },
	{ "Scout", "weapon_scout", 90 },
	{ "M4A1", "weapon_m4a1", 90 },
	{ "AK47", "weapon_ak47", 90 },
	{ "AUG", "weapon_aug", 90 },
	{ "SG552", "weapon_sg552", 90 },
	{ "AWP", "weapon_awp", 30 },
	{ "G3SG1", "weapon_g3sg1", 90 },
	{ "SG550", "weapon_sg550", 90 }
}

public plugin_end()
{
	ArrayDestroy(array_terrorist_mdls);
}

public plugin_precache()
{
	new szString[96];
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "DETECTIVE_MODEL", DETECTIVE_MDL,charsmax(DETECTIVE_MDL));
	formatex(szString, charsmax(szString), "models/player/%s/%s.mdl", DETECTIVE_MDL, DETECTIVE_MDL);
	PRECACHE_PLAYER_MODEL(szString);
	formatex(szString, charsmax(szString), "models/player/%s/%sT.mdl", DETECTIVE_MDL, DETECTIVE_MDL);
	if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);
	
	formatex(szString, charsmax(szString), "sprites/ttt_nearby_speaking.spr");
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "SPEAKING_SPR", szString, charsmax(szString));
	if(file_exists(szString)) g_SpeakingSprite = PRECACHE_SPRITE_I(szString);
	
	formatex(szString, charsmax(szString), "sprites/ttt_nearby_hearing.spr");
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "HEARING_SPR", szString, charsmax(szString));
	if(file_exists(szString)) g_HearingSprite = PRECACHE_SPRITE_I(szString);
	
	array_terrorist_mdls = ArrayCreate(32,1);
	new szModels[96] = "leet, terror, guerilla, arctic", szLeft[32];
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "TERRORIST_MODELS", szModels, charsmax(szModels));

	do
	{
		strtok(szModels, szLeft, charsmax(szLeft), szModels, charsmax(szModels), ',');
		trim(szLeft);
		ArrayPushString(array_terrorist_mdls, szLeft);
		formatex(szString, charsmax(szString), "models/player/%s/%s.mdl", szLeft, szLeft);
		PRECACHE_PLAYER_MODEL(szString);
		formatex(szString, charsmax(szString), "models/player/%s/%sT.mdl", szLeft, szLeft);
		if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);
	}
	while( szModels[0] != EOS )
	
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "INNOCENTS_WIN_SOUND", INNOCENT_WIN_SND, charsmax(INNOCENT_WIN_SND));
	if(file_exists(INNOCENT_WIN_SND))
	{
		bINNOCENT_WIN_SND = true;
		PRECACHE_FILE(INNOCENT_WIN_SND);
	}
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "Traitors_WIN_SOUND", Traitor_WIN_SND, charsmax(Traitor_WIN_SND));
	if(file_exists(Traitor_WIN_SND))
	{
		bTraitor_WIN_SND = true;
		PRECACHE_FILE(Traitor_WIN_SND);
	}
	jb_ini_get_keyvalue("TROUBLE_IN_TERRORIST_TOWN", "ANALYZING_SOUND", ANALYZING_SOUND, charsmax(ANALYZING_SOUND));
	if(file_exists(ANALYZING_SOUND))
	{
		bANALYZING_SOUND = true;
		replace(ANALYZING_SOUND, charsmax(ANALYZING_SOUND), "sound/", "");
		PRECACHE_SOUND(ANALYZING_SOUND);
	}
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	TTT_DAY_ID = register_jailbreak_day("Trouble In the Terrorist Town", 0, (7.0 * 60.0), DAY_TIMER);
	
	iMsg_DeathMsg = get_user_msgid("DeathMsg");
	iMsg_ScoreInfo = get_user_msgid("ScoreInfo");
	iMsg_ClCorpse = get_user_msgid("ClCorpse");
	iMsg_ScoreAttrib = get_user_msgid("ScoreAttrib");
	iMsg_SendAudio = get_user_msgid("SendAudio");
	iMsg_TextMsg = get_user_msgid("TextMsg");
	iMsg_SayText = get_user_msgid("SayText");
	iMsg_TeamInfo = get_user_msgid("TeamInfo");
	iMsg_HealthInfo = get_user_msgid("HealthInfo");
	iMsg_Radar = get_user_msgid("Radar");
	g_iMaxplayers = get_maxplayers();
	
	g_pcvar_Traitors_ratio = register_cvar("jb_ttt_Traitors_ratio", "35");
	g_pcvar_detectives_ratio = register_cvar("jb_ttt_detectives_ratio", "10");
	g_pcvar_maxd_nearbyvoice = register_cvar("jb_ttt_nearby_voice_distance", "600");
	g_pcvar_analyzing_len = register_cvar("jb_ttt_corpse_analyzing_length", "3");
	g_pcvar_RDM_MaxRate = register_cvar("jb_ttt_rdm_maxrate_kill", "80");
	g_pcvar_traitors_tk = register_cvar("jb_day_ttt_traitors_teamkill", "0");
	g_pcvar_glow_corpses = register_cvar("jb_day_ttt_glow_corpses", "1");
	
	DisableHamForward( HamPlayerKilledPost = RegisterHam(Ham_Killed, "player", "fw_player_killed_post", 1) );
	DisableHamForward( HamPlayerTakeDamagePre = RegisterHam(Ham_TakeDamage, "player", "fw_player_takedamage_pre", 0) );
	DisableHamForward( HamPlayerTakeDamagePost = RegisterHam(Ham_TakeDamage, "player", "fw_player_takedamage_post", 1) );
	DisableHamForward( HamFuncButtonUsePost = RegisterHam(Ham_Use, g_szCORPSE_CLASSNAME, "fw_corpse_use_post", 1) );
	DisableHamForward( HamPlayerSpawnPost = RegisterHam(Ham_Spawn, "player", "fw_player_spawn_post", 1) );
	RegisterHam(Ham_ObjectCaps, g_szCORPSE_CLASSNAME, "corpse_objectcaps_pre");

	register_event("ClCorpse", "Event_ClCorpse", "a");
}

public fw_msg_saytext(msgid, dest, id)
{
	static sender; sender = get_msg_arg_int(1);
	
	if(!check_flag(g_iAlive,sender) && check_flag(g_iAlive,id))
	{
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

#define DEATH_CAUSE	pev_netname
#define VICTIM_ID	pev_iuser1
#define DEATH_TIME	pev_iuser4
#define SERIAL_KEY	pev_iuser3
#define SERIAL_NUMBER	38457434
#define ANALYZER	pev_iuser2

public client_putinserver(id)
{
	if(jb_get_current_day() != TTT_DAY_ID) return;

	set_task(1.0, "task_reveal_role", id+TASK_REVEAL_ROLE, _, _, "b");
}

#if AMXX_VERSION_NUM > 182
public client_disconnected(id)
#else
public client_disconnect(id)
#endif
{
	new VicID = get_user_userid(id);

	if(!VicID || jb_get_current_day() != TTT_DAY_ID) return;
	
	new ent;
	
	while( ( ent = engfunc(EngFunc_FindEntityByString, ent, "classname", g_szCORPSE_CLASSNAME)) > 0 ) {
		
		if(VicID == pev(ent, VICTIM_ID))
		{
			set_pev(ent, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, ent);
			break;
		}
	}

	// Player was alive ? then Check win condition!
	if(check_flag(g_iAlive,id))
	{
		CheckTTTWinStatus();
	}
	
	remove_flag(g_iDetectives,id);
	remove_flag(g_iTraitors,id);
	remove_flag(g_iInnocents,id);
	remove_flag(g_iAlive,id);

	g_user_killer[id][KILLER_ID] = 0;
	g_user_killer[id][KILLER_WEAPON_NAME][0] = EOS;
	arrayset(g_fTotal_Damage[id], 0.0, sizeof g_fTotal_Damage[]);
	g_fRDM_Rate[id] = g_fRDM_CurrentRate[id] = 0.0;
	
	remove_task(TASK_REVEAL_ROLE+id);
	remove_task(TASK_ANALYZING+id);
	remove_task(TASK_ANALYZING_INTERRUPTION+id);
}

public fw_player_spawn_post(player)
{
	if(!is_user_alive(player)) return;
	
	set_flag(g_iAlive,player);
	g_iPlayerIsWitness[ player ] = 0;
	g_user_killer[ player ][KILLER_WEAPON_NAME][0] = EOS;
	
	new VicID = get_user_userid(player), ent;
	
	while( ( ent = engfunc(EngFunc_FindEntityByString, ent, "classname", g_szCORPSE_CLASSNAME)) > 0 ) {
		
		if(VicID == pev(ent, VICTIM_ID))
		{
			set_pev(ent, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, ent);
			break;
		}
	}
	
	remove_flag(g_iTraitors,player);
	remove_flag(g_iDetectives,player);
	remove_flag(g_iInnocents,player);
	
	new traits, detects, pnum, players[32];
	get_players(players,pnum, "ah");
	for(new i, x; i < pnum; i++)
	{
		x = players[i];
		if(check_flag(g_iTraitors,x)) traits ++;
		if(check_flag(g_iDetectives,x)) detects ++;
	}
	
	if((floatround(pnum * (get_pcvar_float(g_pcvar_Traitors_ratio) / 100.0), floatround_round) - traits) > 0)
	{
		set_flag(g_iTraitors,player);
		jb_logmessage_action("got assigned as a 'traitor'", player);
		cprint_chat(player, _, "You're a !tTraitor, !ghave a good luck with your hunting!t!")
	}
	else if((floatround(pnum *  (get_pcvar_float(g_pcvar_detectives_ratio) / 100.0), floatround_round) - detects) > 0)
	{
		set_flag(g_iDetectives,player);
		jb_logmessage_action("got assigned as a 'detective'", player);
		cprint_chat(player, _, "You're a !gDetective, !yhave a good luck !tdetecting & analayzing!g!")
	}
	else
	{
		set_flag(g_iInnocents,player);
		jb_logmessage_action("got assigned as an 'innocent'", player);
		cprint_chat(player, _, "You're a !gInnocent, !tpay up your bills and don't make a mess!g!")
	}
	
	remove_task( player+TASK_REVEAL_ROLE );
	set_task(1.0, "task_reveal_role", player+TASK_REVEAL_ROLE, _, _, "b");

	const SCOREATTRIB_NOFLAGS = 0;
	message_begin(MSG_ALL, iMsg_ScoreAttrib, {0,0,0}, 0);
	write_byte(player);
	write_byte(SCOREATTRIB_NOFLAGS); // Flags :- ~ [0-Nothing], [(1<<0)-Dead], [(1<<1)-Bomb], [(1<<2)-VIP] ~
	message_end();
	
	new szModel[32], wpn_index;
	ArrayGetString(array_terrorist_mdls, random(ArraySize(array_terrorist_mdls)), szModel, charsmax(szModel));
	cs_set_player_model(player, szModel);
	
	give_item(player, "weapon_knife");
	
	give_item(player, PR_WEAPONS_INFO[(wpn_index=random(sizeof PR_WEAPONS_INFO))][WEAPON_NAME_ID]);
	cs_set_user_bpammo(player, get_weaponid(PR_WEAPONS_INFO[wpn_index][WEAPON_NAME_ID]), PR_WEAPONS_INFO[wpn_index][WEAPON_BPAMMO]);
	
	give_item(player, SEC_WEAPONS_INFO[(wpn_index=random(sizeof SEC_WEAPONS_INFO))][WEAPON_NAME_ID]);
	cs_set_user_bpammo(player, get_weaponid(SEC_WEAPONS_INFO[wpn_index][WEAPON_NAME_ID]), SEC_WEAPONS_INFO[wpn_index][WEAPON_BPAMMO]);
}

public task_end_theday(taskid)
{
	if(jb_get_current_day() == TTT_DAY_ID)
	{
		jb_end_theday();
	}
}

public corpse_objectcaps_pre(iEntity)
{
	if(pev(iEntity, SERIAL_KEY) != SERIAL_NUMBER) return HAM_IGNORED;

	SetHamReturnInteger(FCAP_IMPULSE_USE);
	return HAM_OVERRIDE;
}

public fw_corpse_use_post(iEntity, idCaller, idActivator, UseType, Float:fValue)
{
	if(pev(iEntity, SERIAL_KEY) != SERIAL_NUMBER) return PLUGIN_CONTINUE;

	if(idCaller != idActivator) return PLUGIN_HANDLED;
	
	new Victim = find_player("k", pev(iEntity, VICTIM_ID));

	if(!Victim)
	{
		set_pev(iEntity, pev_flags, FL_KILLME);
		dllfunc(DLLFunc_Think, iEntity);
		return PLUGIN_CONTINUE;
	}
	
	if(task_exists(idCaller+TASK_ANALYZING))
	{
		remove_task(TASK_ANALYZING_INTERRUPTION+idCaller);
		remove_task(TASK_ANALYZING+idCaller);
		
		static iMsg_BarTime = 0;
		if(!iMsg_BarTime) iMsg_BarTime = get_user_msgid("BarTime");
		
		message_begin(MSG_ONE_UNRELIABLE, iMsg_BarTime, {0,0,0}, idCaller);
		write_short(0);
		message_end();
	}
	
	user_analyzing(idCaller, iEntity);
	return PLUGIN_CONTINUE;
}

public Event_ClCorpse( )
{
	if( !g_bTTTActive ) return;

	new szPlayerModel[64], Float:fOrigin[3], Float:fAngles[3];
	read_data(1, szPlayerModel, charsmax(szPlayerModel));
	format(szPlayerModel, charsmax(szPlayerModel), "models/player/%s/%s.mdl", szPlayerModel, szPlayerModel);

	fOrigin[0] = read_data(2) / 128.0;
	fOrigin[1] = read_data(3) / 128.0;
	fOrigin[2] = (read_data(4) / 128.0) + 2.0;

	fAngles[0] = 0.0; // read_data(5);
	fAngles[1] = float( read_data(6) );
	fAngles[2] = 0.0; // read_data(7);

	CreateCorpse( .victim=read_data(12), .szModel=szPlayerModel, .fOrigin=fOrigin, .fAngles=fAngles, .iDeathSequence=read_data(9))
}

CreateCorpse( const victim, const szModel[], const Float:fOrigin[3], const Float:fAngles[3], const iDeathSequence)
{
	if( !(1 <= victim <= g_iMaxplayers) ) return PLUGIN_CONTINUE;

	new killer = g_user_killer[victim][KILLER_ID];

	new ent = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, g_szCORPSE_CLASSNAME));
	
	if(!ent) return PLUGIN_CONTINUE;

	new Float:Mins[3], Float:Maxs[3], Float:fYaw = fAngles[1];
	if(pev(victim, pev_flags) & FL_DUCKING)
	{
		Mins = Float:{ -16.0, -1.0, -18.0 };
		Maxs = Float:{ 16.0, 72.0, -12.0 };
		set_pev(ent, pev_bInDuck, true);
	}
	else
	{
		Mins = Float:{ -16.0, -1.0, -36.0 };
		Maxs = Float:{ 16.0, 72.0, -30.0 };
		set_pev(ent, pev_bInDuck, false);
	}

	if( fYaw != 0.0 )
	{
		new Float:fvTemp[2];
		fvTemp[0] = Maxs[0] * floatcos(fYaw,degrees) - Maxs[1] * floatsin(fYaw,degrees);
		fvTemp[1] = Mins[0] * floatcos(fYaw,degrees) - Mins[1] * floatsin(fYaw,degrees);
		Maxs[0] = fvTemp[0];
		Mins[0] = fvTemp[1];

		if( Maxs[0] < Mins[0] )
		{
			Maxs[0] = fvTemp[1];
			Mins[0] = fvTemp[0];
		}

		fvTemp[0] = Maxs[0] * floatsin(fYaw,degrees) + Maxs[1] * floatcos(fYaw,degrees);
		fvTemp[1] = Mins[0] * floatsin(fYaw,degrees) + Mins[1] * floatcos(fYaw,degrees);
		Maxs[1] = fvTemp[0];
		Mins[1] = fvTemp[1];

		if( Maxs[1] < Mins[1] )
		{
			Maxs[1] = fvTemp[1];
			Mins[1] = fvTemp[0];
		}
	}

	set_pev(ent, pev_owner, 0);
	set_pev(ent, pev_origin, fOrigin);
	set_pev(ent, pev_angles, fAngles);

	engfunc(EngFunc_SetModel, ent, szModel);
	set_pev(ent, pev_movetype, MOVETYPE_TOSS);
	set_pev(ent, pev_solid, SOLID_TRIGGER);
	engfunc(EngFunc_SetSize, ent, Mins, Maxs);
	
	set_pev(ent, VICTIM_ID, get_user_userid(victim));
	
	if((!killer || killer == victim ) && (g_user_killer[victim][KILLER_WEAPON_NAME][0] == EOS))
	{
		set_pev(ent, DEATH_CAUSE, "Suicide");
	}
	else if(is_user_connected(killer))
	{
		set_pev(ent, DEATH_CAUSE, g_user_killer[victim][KILLER_WEAPON_NAME]);
	}
	
	set_pev(ent, SERIAL_KEY, SERIAL_NUMBER);
	set_pev(ent, DEATH_TIME, floatround(get_gametime()));

	set_pev(ent, pev_frame, 255.0);
	set_pev(ent, pev_sequence, iDeathSequence);

	engfunc(EngFunc_DropToFloor, ent);
	
	return PLUGIN_CONTINUE;
}

public fw_player_takedamage_pre(victim, inflictor, attacker, Float:fDamage, DamageBits)
{
	if(attacker != victim && is_user_connected(attacker))
	{
		// Should traitors deal damage to each other?
		if( !get_pcvar_num(g_pcvar_traitors_tk) && check_flag(g_iTraitors,attacker) && check_flag(g_iTraitors,victim) )
		{
			SetHamParamFloat(4, 0.0);
			return HAM_HANDLED;
		}

		// Modify the damage depending on the random rate of the players killings.
		SetHamParamFloat(4, (fDamage - (fDamage * (g_fRDM_CurrentRate[attacker] / 100.0))));
		return HAM_HANDLED;
	}
	return HAM_IGNORED;
}

public fw_player_takedamage_post(victim, inflictor, attacker, Float:fDamage, DamageBits)
{
	if(attacker != victim && is_user_connected(attacker))
	{
		if( check_flag(g_iTraitors,attacker) && (check_flag(g_iDetectives,victim)||check_flag(g_iInnocents,victim)) )
		{
			new players[MAX_PLAYERS], pnum, Float:fKillerOrigin[3], Float:fVicOrigin[3];
			pev(victim, pev_origin, fVicOrigin);
			pev(attacker, pev_origin, fKillerOrigin);
			get_players(players, pnum, "ah");

			// Bring on the witnesses...
			for(new i, player; i < pnum; i++)
			{
				player = players[ i ];

				if(attacker == player) continue;

				// The player have witnessed a murder or an attack!
				if( is_in_viewcone(player, fKillerOrigin, 1) && (player == victim || is_in_viewcone(player, fVicOrigin, 1)) )
				{
					set_flag(g_iPlayerIsWitness[ player ], attacker);
				}
			}
		}

		static Float:fTeamMateDamage;
		g_fTotal_Damage[attacker][victim] += fDamage;
		fTeamMateDamage = g_fTotal_Damage[victim][attacker];
		if(fTeamMateDamage <= 0.0) fTeamMateDamage = 1.0;
		if(fDamage <= 0.0) fDamage = 1.0;

		if( check_flag(g_iTraitors,attacker) && check_flag(g_iTraitors,victim) )
		{
			g_fRDM_Rate[attacker] =  floatmin( g_fRDM_Rate[attacker] + (g_fTotal_Damage[attacker][victim] / ( fDamage * ( fTeamMateDamage / 4.0 ) )), 100.0 );
		}
		else if( check_flag(g_iInnocents,attacker) && check_flag(g_iDetectives,victim) )
		{
			g_fRDM_Rate[attacker] =  floatmin( g_fRDM_Rate[attacker] + (g_fTotal_Damage[attacker][victim] / ( fDamage * ( fTeamMateDamage / 4.0 ) )), 100.0 );
		}
		else if( check_flag(g_iInnocents,attacker) && check_flag(g_iInnocents,victim) )
		{
			g_fRDM_Rate[attacker] =  floatmin( g_fRDM_Rate[attacker] + (g_fTotal_Damage[attacker][victim] / ( fDamage * ( fTeamMateDamage / 8.0 ) )), 100.0 );
		}
		else if( check_flag(g_iInnocents,attacker) && check_flag(g_iTraitors,victim) && !check_flag(g_iPlayerIsWitness[attacker],victim))
		{
			g_fRDM_Rate[attacker] =  floatmin( g_fRDM_Rate[attacker] + (g_fTotal_Damage[attacker][victim] / ( fDamage * ( fTeamMateDamage / 8.0 ) )), 100.0 );
		}
		else
		{
			g_fRDM_Rate[attacker] =  floatmax( g_fRDM_Rate[attacker] - floatmax(g_fTotal_Damage[attacker][victim] / fDamage, 1.0), 0.0 );
		}
	}
}

public fw_player_killed_post(victim, killer, shouldgib)
{
	if(!(1 <= victim <= g_iMaxplayers)) return;
	
	remove_flag(g_iAlive,victim);
	
	g_user_killer[victim][KILLER_ID] = killer;
	
	if(killer != victim && is_user_connected(killer))
	{
		new szWpname[32], iWpnCSWID;
		if((iWpnCSWID=get_user_weapon(killer)) > 0) get_weaponname(iWpnCSWID, szWpname, charsmax(szWpname));
		
		if(equal(szWpname, "weapon_", 7))
		{
			replace(szWpname, charsmax(szWpname), "weapon_", "");
			ucfirst(szWpname);
		}
		else
		{
			copy(szWpname, charsmax(szWpname), "Elimnation");
		}
		
		if( check_flag(g_iTraitors,killer) && check_flag(g_iTraitors,victim) ||
			check_flag(g_iInnocents,killer) && check_flag(g_iDetectives,victim) ||
			check_flag(g_iInnocents,killer) && check_flag(g_iInnocents,victim) )
		{
			if( g_fRDM_Rate[killer] >= get_pcvar_float(g_pcvar_RDM_MaxRate) )
			{
				user_kill(killer);
				cprint_chat(killer, _, "You've been killed for !g( RDMING ) !tkilling your teammate randomly!");
				copy(g_user_killer[killer][KILLER_WEAPON_NAME], charsmax(g_user_killer[][KILLER_WEAPON_NAME]), "RDM Justice system");
			}
		}
		else
		{
			static Float:fMaxHealth;
			pev(victim, pev_max_health, fMaxHealth);
			if(fMaxHealth <= 0.0) fMaxHealth = 100.0;

			g_fRDM_Rate[killer] =  floatmax( g_fRDM_Rate[killer] - ((g_fTotal_Damage[killer][victim] / fMaxHealth) * 10.0), 0.0 );
		}

		g_fTotal_Damage[killer][victim] = 0.0;
		g_fTotal_Damage[victim][killer] = 0.0;
		g_fRDM_CurrentRate[killer] = g_fRDM_Rate[killer];
		copy(g_user_killer[victim][KILLER_WEAPON_NAME], charsmax(g_user_killer[][KILLER_WEAPON_NAME]), szWpname);

		new szKiller[32]; get_user_name(killer, szKiller, charsmax(szKiller));
		cprint_chat(victim, _, "You were killed by !g[ %s ] !t%s !", check_flag(g_iTraitors,killer) ? "Traitor":(check_flag(g_iDetectives,killer) ? "Detective":"Innocent"), szKiller);
	}

	CheckTTTWinStatus();
}

CheckTTTWinStatus()
{
	new players[32], pnum, Innocents, Traitors;
	get_players(players, pnum, "ah");

	for(new i, player; i < pnum; i++)
	{
		player = players[i];

		if(check_flag(g_iTraitors,player))
		{
			Traitors ++;
		}
		else if(check_flag(g_iDetectives,player) || check_flag(g_iInnocents,player))
		{
			Innocents ++;
		}
	}

	if(!task_exists(TASK_ENDING))
	{
		// Traitors win...
		if(Innocents <= 0)
		{
			// Disable the forward, its no longer needed!
			DisableHamForward(HamPlayerTakeDamagePre);
			DisableHamForward(HamPlayerTakeDamagePost);
			DisableHamForward(HamPlayerKilledPost);

			jb_logmessage("TTT Day Traitors Win!");
			client_print(0, print_center, "Traitors Win!");
			if(bTraitor_WIN_SND) client_cmd(0, "spk %s", Traitor_WIN_SND);

			set_task(2.0, "task_end_theday", TASK_ENDING);
		}
		else if(Traitors <= 0 && Innocents >= 1) // innocents win....
		{
			// Disable the forward, its no longer needed!
			DisableHamForward(HamPlayerTakeDamagePre);
			DisableHamForward(HamPlayerTakeDamagePost);
			DisableHamForward(HamPlayerKilledPost);

			jb_logmessage("TTT Day Innocents Win!");
			client_print(0, print_center, "Innocents Win!");
			if(bINNOCENT_WIN_SND) client_cmd(0, "spk %s", INNOCENT_WIN_SND);

			set_task(2.0, "task_end_theday", TASK_ENDING);
		}
	}
}

user_analyzing(analyzer, corpse)
{
	new analyzingtime;
	
	static iMsg_BarTime = 0;
	if(!iMsg_BarTime) iMsg_BarTime = get_user_msgid("BarTime");
	
	message_begin(MSG_ONE, iMsg_BarTime, {0,0,0} , analyzer);
	write_short((analyzingtime = clamp(get_pcvar_num(g_pcvar_analyzing_len), 1, 10)));
	message_end();
	
	new sParam[6];
	num_to_str(corpse, sParam, charsmax(sParam));
	set_task(float(analyzingtime), "corpse_analyzed", TASK_ANALYZING+analyzer, sParam, sizeof sParam);
	set_task(0.1, "task_analyzing_interrupted", TASK_ANALYZING_INTERRUPTION+analyzer, sParam, sizeof sParam, "b");
}

public task_analyzing_interrupted(param[], taskid)
{
	static corpse; corpse = str_to_num(param);

	if(!pev_valid(corpse) || (pev(corpse, SERIAL_KEY) != SERIAL_NUMBER))
	{
		remove_task(TASK_ANALYZING + (taskid - TASK_ANALYZING_INTERRUPTION));
		remove_task(taskid);
		return;
	}
	
	static iOrigin[3], Float:fOrigin2[3], Float:fOrigin[3], analyzer, iMsg_BarTime = 0;
	if(!iMsg_BarTime) iMsg_BarTime = get_user_msgid("BarTime");
	analyzer = taskid - TASK_ANALYZING_INTERRUPTION;
	
	if(pev_valid(corpse))
	{
		get_user_origin(analyzer, iOrigin, 3);
		pev(corpse, pev_origin, fOrigin);
		fOrigin2[0] = float(iOrigin[0]);
		fOrigin2[1] = float(iOrigin[1]);
		fOrigin2[2] = float(iOrigin[2]);
	}
	else // corpse doesn't exist or not valid for some reason.
	{
		corpse = 0;
	}

	if(!corpse || !check_flag(g_iAlive,analyzer) || !(pev(analyzer, pev_button) & IN_USE) || get_distance_f(fOrigin, fOrigin2) > 72.0)
	{
		// End the BarTime load
		message_begin(MSG_ONE_UNRELIABLE, iMsg_BarTime, {0,0,0}, analyzer);
		write_short(0);
		message_end();
		
		remove_task(TASK_ANALYZING+analyzer);
		remove_task(taskid);
	}
}

public corpse_analyzed(const param[], const taskid)
{
	new corpse = str_to_num(param);

	if(!pev_valid(corpse) || (pev(corpse, SERIAL_KEY) != SERIAL_NUMBER))
	{
		return;
	}

	new analyzer = taskid - TASK_ANALYZING;

	new AnalyzerName[32], CorpseName[32], DeathCause[32], DeathTime, First_analyzer;
	pev(corpse, DEATH_CAUSE, DeathCause, charsmax(DeathCause));
	DeathTime = floatround(get_gametime()) - pev(corpse, DEATH_TIME);
	new Victim = find_player("k", pev(corpse, VICTIM_ID));
	get_user_name(Victim, CorpseName, charsmax(CorpseName));
	
	new Role[20];
	formatex(Role, charsmax(Role), "%s", check_flag(g_iTraitors,Victim) ? "Traitor":(check_flag(g_iDetectives,Victim) ? "Detective":"Innocent"))
	
	if(!(First_analyzer = pev(corpse, ANALYZER)))
	{
		get_user_name(analyzer, AnalyzerName, charsmax(AnalyzerName));
		cprint_chat(0, _, "!g%s !yhas analyzed !t(~ %s ~) !g%s !tcorpse.", AnalyzerName, Role, CorpseName);
		cprint_chat(0, _, "!yhe was killed by !g%s, !tDeath time: !g%d !ySecound ago!g!", DeathCause, DeathTime);
		
		const SCOREATTRIB_DEADFLAG = (1<<0);
		message_begin(MSG_BROADCAST, iMsg_ScoreAttrib, {0,0,0}, 0);
		write_byte(Victim);
		write_byte(SCOREATTRIB_DEADFLAG); // Flags :- ~ [0-Nothing], [(1<<0)-Dead], [(1<<1)-Bomb], [(1<<2)-VIP] ~
		message_end();
		
		set_pev(corpse, ANALYZER, analyzer);

		if( get_pcvar_num(g_pcvar_glow_corpses) )
		{
			switch( Role[0] )
			{
				case 'T': set_rendering(corpse, .fx=kRenderFxGlowShell, .r=255, .g=000, .b=000, .render=kRenderNormal, .amount=16);
				case 'I': set_rendering(corpse, .fx=kRenderFxGlowShell, .r=000, .g=255, .b=000, .render=kRenderNormal, .amount=16);
				case 'D': set_rendering(corpse, .fx=kRenderFxGlowShell, .r=000, .g=000, .b=255, .render=kRenderNormal, .amount=16);
			}
		}
	}
	else
	{
		get_user_name(First_analyzer, AnalyzerName, charsmax(AnalyzerName));
		cprint_chat(analyzer, _, "!y(~ %s ~) !g%s !tCorpse, !gDeath time: !t%d Secound ago.", Role, CorpseName, DeathTime);
		cprint_chat(analyzer, _, "!gcause of death: !t%s, !ywere first analyzed by !g%s!t!", DeathCause, AnalyzerName);
	}
	
	remove_task(TASK_ANALYZING_INTERRUPTION+analyzer);
	remove_task(taskid);
	
	if(bANALYZING_SOUND) emit_sound(corpse, CHAN_BODY, ANALYZING_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
}

public jb_day_start(iDayid)
{
	if(iDayid == TTT_DAY_ID)
	{
		new players[32], pnum;
		get_players(players, pnum, "ah");

		new Traitor_ratio = floatround(pnum * (get_pcvar_float(g_pcvar_Traitors_ratio) / 100.0), floatround_round);

		if(pnum <= 2 || Traitor_ratio == pnum || !Traitor_ratio)
		{
			return JB_HANDLED;
		}
	}

	return JB_IGNORED;
}

public jb_day_started(iDayid)
{
	if(iDayid == TTT_DAY_ID)
	{
		new players[32], pnum;
		get_players(players, pnum, "ah");
		
		new Traitor_ratio = floatround(pnum * (get_pcvar_float(g_pcvar_Traitors_ratio) / 100.0), floatround_round);
		
		g_iAlive = 0;
		g_bTTTActive = true;

		for(new i, player; i < pnum; i++) 
		{
			player = players[i]
			set_flag(g_iAlive,player);
			strip_user_weapons(player);
		}
		
		for(new i, player, randomized; i < Traitor_ratio; i++)
		{
			player = players[(randomized=random(pnum))];
			players[ randomized ] = players[ --pnum ];
			
			//set Traitors...
			set_flag(g_iTraitors,player);
		}
		
		new Detective_ratio = floatround(pnum *  (get_pcvar_float(g_pcvar_detectives_ratio) / 100.0), floatround_round);
		
		for(new i, player, randomized; i < Detective_ratio; i++)
		{
			player = players[(randomized=random(pnum))];
			players[ randomized ] = players[ --pnum ];
			
			//set detectives...
			set_flag(g_iDetectives,player);
		}
		
		for(new i, player; i < pnum; i++)
		{
			player = players[i];
			//set innocents...
			set_flag(g_iInnocents,player);
		}
		
		// reveal players roles...
		set_task(5.0, "reveal_roles", TASK_REVEAL_ROLES);
		
		set_hudmessage(85, 255, 85, -1.0, 0.79, 1, 6.0, 5.0, 0.1, 0.2, -1);
		show_hudmessage(0, "Revealing roles in several seconds...");
		
		// open the cells....
		jb_cells(JB_CELLS_OPEN);
		
		// block win sounds
		if(fwMessage_sendaudio == INVALID_HANDLE) fwMessage_sendaudio = register_message(iMsg_SendAudio, "message_sendaudio");
		
		// block win messages
		if(fwMessage_textmsg == INVALID_HANDLE) fwMessage_textmsg = register_message(iMsg_TextMsg, "message_textmsg");
		
		// Radar
		if(FW_MESSAGE_RADAR == INVALID_HANDLE) FW_MESSAGE_RADAR = register_message(iMsg_Radar, "radar_block");
		
		// no ghosting.
		if(fwMessage_saytext == INVALID_HANDLE) fwMessage_saytext = register_message(iMsg_SayText, "fw_msg_saytext");
		
		
		if(iMsg_DeathMsg > 0) set_msg_block(iMsg_DeathMsg, BLOCK_SET);
		if(iMsg_ScoreAttrib > 0) set_msg_block(iMsg_ScoreAttrib, BLOCK_SET);
		if(iMsg_ScoreInfo > 0) set_msg_block(iMsg_ScoreInfo, BLOCK_SET);
		if(iMsg_HealthInfo > 0) set_msg_block(iMsg_HealthInfo, BLOCK_SET);
		if(iMsg_ClCorpse > 0) set_msg_block(iMsg_ClCorpse, BLOCK_SET);
		
		//......forwards....
		if(!FM_FW_VOICE_SETCLIENTLISTENING) FM_FW_VOICE_SETCLIENTLISTENING = register_forward(FM_Voice_SetClientListening, "fw_voice_listening");
		EnableHamForward(HamFuncButtonUsePost);
		EnableHamForward(HamPlayerKilledPost);
		EnableHamForward(HamPlayerTakeDamagePre);
		EnableHamForward(HamPlayerTakeDamagePost);
		EnableHamForward(HamPlayerSpawnPost);
		if(!FM_FW_PLAYER_PRETHINK) FM_FW_PLAYER_PRETHINK = register_forward(FM_PlayerPreThink, "fw_player_pre_think_post", 1);
		
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			// Free for all
			jb_set_user_enemies(i, JB_ENEMIES_EVERYONE);

			g_iPlayerIsWitness[ i ] = 0;
			g_fRDM_CurrentRate[i] = g_fRDM_Rate[i];
			g_user_killer[i][KILLER_ID] = 0;
			g_user_killer[i][KILLER_WEAPON_NAME][0] = EOS;
			arrayset(g_fTotal_Damage[i], 0.0, sizeof g_fTotal_Damage[]);
		}
	}
}

public fw_player_pre_think_post(id)
{
	if( !g_bTTTActive )
	{
		if(FM_FW_PLAYER_PRETHINK)
		{
			unregister_forward(FM_PlayerPreThink, FM_FW_PLAYER_PRETHINK, 1);
			FM_FW_PLAYER_PRETHINK = 0;
		}

		return;
	}

	if(!check_flag(g_iAlive,id) || is_user_bot(id)) return;
	
	if((pev(id, pev_button) & IN_RELOAD) && !(pev(id, pev_oldbuttons) & IN_RELOAD))
	{
		if(!check_flag(bNearBySpeaker,id))
		{
			set_flag(bNearBySpeaker,id);
			client_print(id, print_center, "Nearby voice channel");
		}
		else
		{
			remove_flag(bNearBySpeaker,id);
			client_print(id, print_center, "Global voice channel");
		}
	}
}

public fw_voice_listening(receiver, sender, bool:listen)
{
	if( !g_bTTTActive )
	{
		if(FM_FW_VOICE_SETCLIENTLISTENING)
		{
			unregister_forward(FM_Voice_SetClientListening, FM_FW_VOICE_SETCLIENTLISTENING);
			FM_FW_VOICE_SETCLIENTLISTENING = 0;
		}
		return FMRES_IGNORED;
	}

	if(receiver == sender)
	{
		return FMRES_IGNORED;
	}
	
	// Dead players CANT speak to the alive players.
	if(!check_flag(g_iAlive,sender) && check_flag(g_iAlive,receiver))
	{
		engfunc(EngFunc_SetClientListening, receiver, sender, false);
		return FMRES_SUPERCEDE;
	}

	// Dead players can speak to eachother.
	if(!check_flag(g_iAlive,sender) && !check_flag(g_iAlive,receiver))
	{
		engfunc(EngFunc_SetClientListening, receiver, sender, true);
		return FMRES_SUPERCEDE;
	}
	
	if( check_flag(bNearBySpeaker,sender) )
	{
		static Float:fOrigin[3], Float:fOrigin2[3];
		pev(sender, pev_origin, fOrigin);
		pev(receiver, pev_origin, fOrigin2);

		if(get_distance_f(fOrigin, fOrigin2) < get_pcvar_float(g_pcvar_maxd_nearbyvoice))
		{
			engfunc(EngFunc_SetClientListening, receiver, sender, true);
			
			if(g_SpeakingSprite > -1)
			{
				UTIL_CreateSprite( sender, sender, g_SpeakingSprite, _, 1 );
			}
			
			if(g_HearingSprite > -1)
			{
				if(check_flag(g_iAlive,receiver)) UTIL_CreateSprite( sender, receiver, g_HearingSprite, _, 1 );
			}
		}
		else
		{
			engfunc(EngFunc_SetClientListening, receiver, sender, false);
		}
	}
	else
	{
		engfunc(EngFunc_SetClientListening, receiver, sender, true);
	}
	return FMRES_SUPERCEDE;
}

stock UTIL_CreateSprite( id, target, Sprite, offset=45, life=10 )
{
	message_begin( !id ? MSG_ALL:MSG_ONE, SVC_TEMPENTITY, _, id );
	write_byte( TE_PLAYERATTACHMENT );
	write_byte( target );
	write_coord( offset );
	write_short( Sprite ); 
	write_short( life );
	message_end( );
}

public jb_day_end(iDayid)
	if(iDayid == TTT_DAY_ID)
	{
		remove_task(TASK_ENDING);
	}

public jb_day_ended(iDayid)
{
	if(iDayid == TTT_DAY_ID)
	{
		new players[32], pnum;
		get_players(players, pnum, "h");
		
		static const szTeam[][] = {
			"UNASSIGNED",
			"TERRORIST",
			"CT",
			"SPECTATOR"
		}

		static const SCOREATTRIB_NOFLAGS = 0;
		static const SCOREATTRIB_DEADFLAG = (1<<0);

		for(new i, player; i < pnum; i++)
		{
			player = players[i];

			message_begin(MSG_ALL, iMsg_TeamInfo);
			write_byte(player);
			write_string(szTeam[fm_get_user_team(player)]);
			message_end();
			
			message_begin(MSG_ALL, iMsg_ScoreAttrib);
			write_byte(player);
			write_byte( check_flag(g_iAlive,player) ?  SCOREATTRIB_NOFLAGS : SCOREATTRIB_DEADFLAG );
			message_end();
			
			jb_set_user_class_model(player);
			remove_task(player+TASK_REVEAL_ROLE);
		}
		
		new ent;
		while( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", g_szCORPSE_CLASSNAME)) > 0)
		{
			if(SERIAL_NUMBER == pev(ent, SERIAL_KEY))
			{
				set_pev(ent, pev_flags, FL_KILLME);
				dllfunc(DLLFunc_Think, ent);
			}
		}
		
		g_bTTTActive = false;

		DisableHamForward(HamFuncButtonUsePost);
		DisableHamForward(HamPlayerKilledPost);
		DisableHamForward(HamPlayerTakeDamagePre);
		DisableHamForward(HamPlayerTakeDamagePost);
		DisableHamForward(HamPlayerSpawnPost);
		for(new i = 1; i <= g_iMaxplayers; i++) jb_set_user_enemies(i, JB_ENEMIES_EVERYONE);
		
		if(fwMessage_textmsg > INVALID_HANDLE) unregister_message(iMsg_TextMsg, fwMessage_textmsg); fwMessage_textmsg = INVALID_HANDLE;
		if(fwMessage_sendaudio > INVALID_HANDLE) unregister_message(iMsg_SendAudio, fwMessage_sendaudio); fwMessage_sendaudio = INVALID_HANDLE;
		if(fwMessage_saytext > INVALID_HANDLE) unregister_message(iMsg_SayText, fwMessage_saytext); fwMessage_saytext = INVALID_HANDLE;
		if(FW_MESSAGE_RADAR > INVALID_HANDLE) unregister_message(iMsg_Radar, FW_MESSAGE_RADAR); FW_MESSAGE_RADAR = INVALID_HANDLE;
		
		if(iMsg_DeathMsg > 0) set_msg_block(iMsg_DeathMsg, BLOCK_NOT);
		if(iMsg_ScoreAttrib > 0) set_msg_block(iMsg_ScoreAttrib, BLOCK_NOT);
		if(iMsg_ScoreInfo > 0) set_msg_block(iMsg_ScoreInfo, BLOCK_NOT);
		if(iMsg_HealthInfo > 0) set_msg_block(iMsg_HealthInfo, BLOCK_NOT);
		if(iMsg_ClCorpse > 0) set_msg_block(iMsg_ClCorpse, BLOCK_NOT);
		remove_task(TASK_REVEAL_ROLES);
		remove_task(TASK_ENDING);
		
		g_iDetectives = 0;
		g_iInnocents = 0;
		g_iTraitors = 0;
	}
}

public radar_block()
{
	return PLUGIN_HANDLED;
}

public reveal_roles()
{
	jb_logmessage("TTT Day Roles have been revealed!");
	
	if(!FW_FM_ADDTOFULLPACK)
	{
		FW_FM_ADDTOFULLPACK = register_forward(FM_AddToFullPack, "fw_AddToFullPack", 1);
	}
	
	new players[32], pnum, i, player;
	get_players(players, pnum, "ah");
	
	const sizeOfPRWeapons = sizeof PR_WEAPONS_INFO;
	const sizeOfSECWeapons = sizeof SEC_WEAPONS_INFO;

	for(new wpn_index, szString[32], asize = ArraySize(array_terrorist_mdls); i < pnum; i++)
	{
		player = players[i];
		
		give_item(player, "weapon_knife");
		
		wpn_index=random(sizeOfPRWeapons);
		give_item(player, PR_WEAPONS_INFO[wpn_index][WEAPON_NAME_ID]);
		cs_set_user_bpammo(player, get_weaponid(PR_WEAPONS_INFO[wpn_index][WEAPON_NAME_ID]), PR_WEAPONS_INFO[wpn_index][WEAPON_BPAMMO]);
		
		wpn_index=random(sizeOfSECWeapons);
		give_item(player, SEC_WEAPONS_INFO[wpn_index][WEAPON_NAME_ID]);
		cs_set_user_bpammo(player, get_weaponid(SEC_WEAPONS_INFO[wpn_index][WEAPON_NAME_ID]), SEC_WEAPONS_INFO[wpn_index][WEAPON_BPAMMO]);
		
		remove_task( player+TASK_REVEAL_ROLE );
		set_task(1.0, "task_reveal_role", player+TASK_REVEAL_ROLE, _, _, "b");
		
		if(check_flag(g_iDetectives,player))
		{
			cprint_chat(player, _, "You're a !gDetective, !yhave a good luck !tdetecting & analayzing!g!");
			
			cs_set_player_model(player, DETECTIVE_MDL);
			
			message_begin(MSG_ALL, iMsg_TeamInfo);
			write_byte(player);
			write_string("CT");
			message_end();
			
			continue;
		}
		
		if(check_flag(g_iTraitors,player))
		{
			cprint_chat(player, _, "You're a !tTraitor, !ghave a good luck with your hunting!t!");
			
			ArrayGetString(array_terrorist_mdls, random(asize), szString, charsmax(szString));
			cs_set_player_model(player, szString);
			
			message_begin(MSG_ALL, iMsg_TeamInfo);
			write_byte(player);
			write_string("TERRORIST");
			message_end();
			
			continue;
		}
		
		if(check_flag(g_iInnocents,player))
		{
			cprint_chat(player, _, "You're a !gInnocent, !tpay up your bills and don't make a mess!g!")
			
			ArrayGetString(array_terrorist_mdls, random(asize), szString, charsmax(szString))
			cs_set_player_model(player, szString)

			message_begin(MSG_ALL, iMsg_TeamInfo);
			write_byte(player);
			write_string("TERRORIST");
			message_end();
		}
	}
}

public task_reveal_role(taskid)
{
	new id = taskid - TASK_REVEAL_ROLE, target = id;

	if( !is_user_connected(id) )
	{
		remove_task(taskid);
		return;
	}
	
	if(!check_flag(g_iAlive,id))
	{
		// get spectator.
		target = pev(id, pev_iuser2);

		if( !( 1 <= target <= g_iMaxplayers ) || !check_flag(g_iAlive,target) )
		{
			return;
		}
	}
	
	if(check_flag(g_iTraitors,target))
	{
		set_hudmessage(255, 0, 0, -1.0, 0.90, 0, 0.5, 1.0, 0.1, 0.1, -1);
		show_hudmessage(id, "Role: Traitor ^n RDM Rate: %d%%", floatround(g_fRDM_CurrentRate[target]));
	}
	else if(check_flag(g_iDetectives,target))
	{
		set_hudmessage(0, 0, 255, -1.0, 0.90, 0, 0.5, 1.0, 0.1, 0.1, -1);
		show_hudmessage(id, "Role: Detectives ^n RDM Rate: %d%%", floatround(g_fRDM_CurrentRate[target]));
	}
	else if(check_flag(g_iInnocents,target))
	{
		set_hudmessage(255, 255, 255, -1.0, 0.90, 0, 0.5, 1.0, 0.1, 0.1, -1);
		show_hudmessage(id, "Role: Innocent ^n RDM Rate: %d%%", floatround(g_fRDM_CurrentRate[target]));
	}
}

public message_textmsg( msg_id, msg_dest, msg_entity )
{
	if(get_msg_args() >= 2 && get_msg_argtype(2) == ARG_STRING)
	{
		static message[3];
		get_msg_arg_string( 2, message, sizeof message - 1 );
		
		switch( message[1] )
		{
			// -- #CTs_Win ; #Terrorists_Win ; #Round_Draw
			case 'C', 'T', 'R' : return PLUGIN_HANDLED;
		}
	}
	return PLUGIN_CONTINUE;
}

public message_sendaudio( msg_id, msg_dest, msg_entity )
{
	if(get_msg_args() >= 2 && get_msg_argtype(2) == ARG_STRING)
	{
		static message[10];
		get_msg_arg_string( 2, message, sizeof message - 1 );
		
		switch( message[7] )
		{
			// -- %!MRAD_terwin ; %!MRAD_ctwin ; %!MRAD_rounddraw
			case 'c', 't', 'r' : return PLUGIN_HANDLED;
		}
	}
	return PLUGIN_CONTINUE;
}

public fw_AddToFullPack(es_handle, e, ent, host, hostflags, player, pSet)
{
	if( !g_bTTTActive )
	{
		if( FW_FM_ADDTOFULLPACK )
		{
			unregister_forward(FM_AddToFullPack, FW_FM_ADDTOFULLPACK, 1);
			FW_FM_ADDTOFULLPACK = 0;
		}

		return;
	}

	if(!player || !(1 <= ent <= g_iMaxplayers) || !(1 <= host <= g_iMaxplayers)) return;
	
	if(check_flag(g_iTraitors,ent) && (check_flag(g_iTraitors,host) || !check_flag(g_iAlive,host)))
	{
		set_es(es_handle, ES_RenderFx, kRenderFxGlowShell);
		set_es(es_handle, ES_RenderColor, {200,0,0});
		set_es(es_handle, ES_RenderAmt, 50);
	}
}
