/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <hamsandwich>
#include <engine>
#include <jailbreak_core>
#include <cstrike>
#include <fun>

#define PLUGIN "[JB] LR:HP-Duel"
#define AUTHOR "Natsheh"

const SNIPERS_BITSUM = (1<<CSW_SCOUT) | (1<<CSW_SG550) | (1<<CSW_AWP) | (1<<CSW_G3SG1);

const NULL_WEAPONS = (1<<CSW_C4) | (1<<CSW_SMOKEGRENADE) | (1<<CSW_FLASHBANG) | (1<<CSW_KNIFE);

new const iWeaponsid[] = {
	CSW_P228,
	CSW_SCOUT, //
	CSW_HEGRENADE,
	CSW_XM1014,
	CSW_MAC10,
	CSW_AUG,
	CSW_ELITE,
	CSW_FIVESEVEN,
	CSW_UMP45,
	CSW_SG550, //
	CSW_GALIL,
	CSW_FAMAS,
	CSW_USP,
	CSW_GLOCK18,
	CSW_AWP, //
	CSW_MP5NAVY,
	CSW_M249,
	CSW_M3,
	CSW_M4A1,
	CSW_TMP,
	CSW_G3SG1, //
	CSW_DEAGLE,
	CSW_SG552,
	CSW_AK47,
	CSW_P90
}

new const sWeapons_name[][] = {
	"P228",
	"Scout",
	"HE-Grenade",
	"XM1014",
	"Mac10",
	"AUG",
	"Elite",
	"Five-Seven",
	"UMP45",
	"SG550",
	"Galil",
	"Famas",
	"USP",
	"Glock18",
	"AWP",
	"MP5navy",
	"M249",
	"M3",
	"M4a1",
	"TMP",
	"G3SG1",
	"Desert Deagle",
	"SG552",
	"AK47",
	"P90"
}

new g_iduelid;
new g_user_weapon, bool:g_user_scope, g_user_health = 100, bool:g_has_themenu;
new HamHook:Ham_SecondaryAttack[4];

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	g_iduelid = register_jailbreak_lritem("HP Duel");
	
	static sWpnid[32], iWpnid, i, j;
	for(i = 0; i < sizeof sWeapons_name && j < 4; i++)
	{
		iWpnid = iWeaponsid[i];
		
		if((1<<iWpnid) & SNIPERS_BITSUM)
		{
			get_weaponname(iWpnid, sWpnid, charsmax(sWpnid));
			Ham_SecondaryAttack[j] = RegisterHam(Ham_Weapon_SecondaryAttack, sWpnid, "fw_player_scope", false);
			DisableHamForward(Ham_SecondaryAttack[j]);
			j++;
		}
	}
	
	register_clcmd("LRHPDuel_Health", "clcmd_health");
}

public fw_player_scope(const iWpnid)
{
	new guard, prisoner;
	
	if(jb_get_current_duel(guard, prisoner) != g_iduelid)
		return HAM_IGNORED;
	
	jb_get_current_duel(guard, prisoner);
	new id = entity_get_edict(iWpnid, EV_ENT_owner);
	
	if((id == guard || id == prisoner) && !g_user_scope)
	{
		return HAM_SUPERCEDE;
	}
	
	return HAM_IGNORED;
}

//incase of bug
public jb_round_start()
{
	g_has_themenu  = false;
}

public clcmd_health(id)
{
	if(!is_user_alive(id) || !g_has_themenu)
		return;
	
	new sString[16];
	read_argv(1, sString, charsmax(sString));
	
	new g_health = str_to_num(sString);
	
	if(!g_health)
	{
		client_print(id, print_center, "Minimum health is 1");
	}
	
	if(g_health > 2000)
	{
		client_print(id, print_center, "Maximum health is 2000");
	}
	
	g_user_health = clamp(g_health, 1, 2000);
	Show_menu(id);
}

public Show_menu(id)
{
	new sText[32];
	
	formatex(sText, 31, "[ Jailbreak ] Choose your^nduel weapon...");
	new iMenu = menu_create(sText, "menu_handle");
	
	new iWpnid = iWeaponsid[g_user_weapon]
	
	if(~((1<<iWpnid) & NULL_WEAPONS) && iWpnid != -1)
	{
		menu_additem(iMenu, "\rStart the duel...", "START");
	}
	
	formatex(sText, charsmax(sText), "\rHealth: \y%d", g_user_health);
	menu_additem(iMenu, sText, "HEALTH");
	
	if((1<<iWpnid) & SNIPERS_BITSUM)
	{
		formatex(sText, charsmax(sText), "\rSCOPE: \y%s", g_user_scope ? "Yes":"No");
		menu_additem(iMenu, sText, "SCOPE");
	}
	
	new sData[16], iWpnid2;
	
	for( new i = 0; i < sizeof sWeapons_name; i++ )
	{
		iWpnid2 = iWeaponsid[i];
		
		if((1<<iWpnid2) & NULL_WEAPONS || !iWpnid2)
		{
			continue;
		}
		
		num_to_str(i, sData, charsmax(sData));
		formatex(sText, charsmax(sText), "%s%s", iWpnid == iWpnid2 ? "\d":"\w", sWeapons_name[i]);
		menu_additem(iMenu, sText, sData);
	}
	
	menu_display(id, iMenu);
}

public menu_handle(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		g_has_themenu = false;
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new sData[16], iAccess, sName[32], iCallbk;
	menu_item_getinfo(menu, item, iAccess, sData, charsmax(sData), sName, charsmax(sName), iCallbk);
	menu_destroy(menu);

	if(equal(sData, "START"))
	{
		g_has_themenu  = false;
		
		jb_lr_show_targetsmenu(id, g_iduelid);
		return PLUGIN_HANDLED;
	}
	else if(equal(sData, "HEALTH"))
	{
		g_has_themenu  = true;
		client_cmd(id, "messagemode LRHPDuel_Health");
	}
	else if(equal(sData, "SCOPE"))
	{
		if(g_user_scope)
		{
			g_user_scope = false;
		}
		else
		{
			g_user_scope = true;
		}
	}
	else
	{
		g_user_weapon = str_to_num(sData);
	}
	
	Show_menu(id);
	return PLUGIN_HANDLED;
}


public jb_lr_duel_selected(id, itemid)
{
	if(itemid == g_iduelid)
	{
		g_user_weapon = 0;
		g_user_scope = false;
		g_user_health = 100;
		g_has_themenu = true;
		Show_menu(id)
		return JB_LR_OTHER_MENU;
	}
	
	return PLUGIN_CONTINUE;
}

public jb_lr_duel_started(prisoner, guard, duelid)
{
	if(duelid == g_iduelid)
	{
		new sWpn[32], iWpnid = iWeaponsid[g_user_weapon];
		get_weaponname(iWpnid, sWpn, charsmax(sWpn))
		
		if((1<<iWpnid) & SNIPERS_BITSUM && !g_user_scope)
		{
			switch( iWpnid )
			{
				case CSW_SCOUT: EnableHamForward(Ham_SecondaryAttack[0]);
				case CSW_SG550: EnableHamForward(Ham_SecondaryAttack[1]);
				case CSW_AWP: EnableHamForward(Ham_SecondaryAttack[2]);
				case CSW_G3SG1: EnableHamForward(Ham_SecondaryAttack[3]);
			}
		}
		
		jb_block_user_weapons(guard, true)
		jb_block_user_weapons(guard, false, (1<<iWpnid))
		jb_block_user_weapons(prisoner, true)
		jb_block_user_weapons(prisoner, false, (1<<iWpnid))
		
		set_user_health(prisoner, g_user_health)
		set_user_health(guard, g_user_health)
		
		set_user_weapon(prisoner, sWpn, 1000)
		set_user_weapon(guard, sWpn, 1000)
		
		set_hudmessage(117, 255, 117, -1.0, 0.73, 3, 6.0, 8.0, 3.0, 5.0, 4)
		show_hudmessage(0, ".: HP Duel :.^nRIP Each Other to Death Come between...")
		
		g_has_themenu  = false
	}
}

public jb_lr_duel_ended(prisoner, guard, duelid)
{
	if(duelid == g_iduelid)
	{
		new sWpn[32], iWpnid = iWeaponsid[g_user_weapon];
		get_weaponname(iWpnid, sWpn, charsmax(sWpn));
		
		if((1<<iWpnid) & SNIPERS_BITSUM && !g_user_scope)
		{
			switch( iWpnid )
			{
				case CSW_SCOUT: DisableHamForward(Ham_SecondaryAttack[0]);
				case CSW_SG550: DisableHamForward(Ham_SecondaryAttack[1]);
				case CSW_AWP: DisableHamForward(Ham_SecondaryAttack[2]);
				case CSW_G3SG1: DisableHamForward(Ham_SecondaryAttack[3]);
			}
		}
		
		if(is_user_alive(prisoner)) set_user_health(prisoner, 100);
		if(is_user_alive(guard)) set_user_health(guard, 100);
		
		jb_block_user_weapons(prisoner, false);
		jb_block_user_weapons(guard, false);
		
		g_user_health = 100;
		g_user_weapon = 0;
		g_user_scope = false;
	}
}

stock set_user_weapon(id, const wpname[], bpammo)
{
	strip_user_weapons(id);
	give_item(id, wpname);
	cs_set_user_bpammo(id, get_weaponid(wpname), bpammo);
}

