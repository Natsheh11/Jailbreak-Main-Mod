/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <hamsandwich>
#include <jailbreak_core>
#include <fun>
#include <fakemeta>
#include <cstrike>
#include <engine>

#define PLUGIN "[JB] Shop:Custom-Items"
#define AUTHOR "Natsheh"

#if !defined IsPlayer
#define IsPlayer(%1) (1 <= %1 <= MAX_PLAYERS)
#endif

#define CSW_SHIELD		(1<<2)

#if AMXX_VERSION_NUM > 182
#define client_disconnect client_disconnected
#endif

enum ITEMS_PARAM(+=1)
{
	ITEM_NAME[32] = 0,
	ITEM_INFO[50],
	ITEM_COST,
	ITEM_TEAM
}

enum (+=1)
{
	ITEM_WEAPON = 0,
	ITEM_SHIELD,
	ITEM_INVISIBILTY,
	ITEM_NOCLIP,
	ITEM_ZAWP
}

enum (+=100)
{
	TASK_INVISIBLE = 10000,
	TASK_NOCLIP,
	TASK_BULLET
}

new sShop_items[][ITEMS_PARAM] = {
	{ "%s", "'%d' bullets", 10000, TEAM_PRISONERS },
	{ "Shield", "Bullets Proof!", 12000, TEAM_PRISONERS },
	{ "Invisibility", "Invisible for '%d' seconds", 13500, TEAM_PRISONERS },
	{ "Noclip", "Noclip for '%d' seconds", 17000, TEAM_PRISONERS },
	{ "Z-Awp", "'%d' explosives shots", 20000, TEAM_PRISONERS }
}

new ZAWP_V_MDL[64] = "models/v_awp.mdl";
new ZAWP_P_MDL[64] = "models/p_awp.mdl";
new const g_szSND_Stealth[] = "jailbreak/stealth.wav";

new g_iItemid[sizeof sShop_items]

new g_cvar_weapon_type, g_cvar_weapon_ammo, g_cvar_invisible_time, g_cvar_noclip_time, g_cvar_zawp_expshots

new g_pcvar_one[14], g_pcvar_two, g_pcvar_three, g_pcvar_four, g_pcvar_five;

new g_cvar_invis_radius, g_cvar_zawp_expradius, g_cvar_zawp_expdmg, g_cvar_zawp_ff;

new g_invisible[33], Float:revealed_percent[33][33], g_using_invisiblity;

new g_noclip[33];

new g_has_zawp[33], g_zawp_counts;

new FW_PLAYERPOSTTHINK, FW_ADDTOFULLPACK, FW_FM_PlayBackEvent_Pre = -1;

new spr_dot, spr_explosion;

new g_fw_FM_PrecacheEvent_post, g_guns_eventids_bitsum;

public plugin_precache()
{
	spr_dot = PRECACHE_SPRITE_I("sprites/dot.spr");
	spr_explosion = PRECACHE_SPRITE_I("sprites/zerogxplode.spr");
	
	PRECACHE_SOUND(g_szSND_Stealth);

	jb_ini_get_keyvalue("CUSTOM_ITEMS", "ZAWP_V_MDL", ZAWP_V_MDL, charsmax(ZAWP_V_MDL));
	jb_ini_get_keyvalue("CUSTOM_ITEMS", "ZAWP_P_MDL", ZAWP_P_MDL, charsmax(ZAWP_P_MDL));
	PRECACHE_WEAPON_VIEW_MODEL(ZAWP_V_MDL);
	PRECACHE_WEAPON_PLAYER_MODEL(ZAWP_P_MDL);

	g_fw_FM_PrecacheEvent_post = register_forward( FM_PrecacheEvent , "fwPrecacheEvent" , true );
}

public fwPrecacheEvent( type , const name[] ) 
{
	if ( equal( "events/awp.sc" , name ) ) 
	{
		g_guns_eventids_bitsum |= ( 1 << get_orig_retval() );
		return FMRES_HANDLED;
	}
	
	return FMRES_IGNORED;
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_cvar_weapon_type = register_cvar("jb_shop_weapon_type", "deagle");
	g_cvar_weapon_ammo = register_cvar("jb_shop_weapon_ammo", "7");
	g_cvar_invisible_time = register_cvar("jb_shop_invisible_time", "10");
	g_cvar_invis_radius = register_cvar("jb_shop_invisible_radius", "150");
	g_cvar_noclip_time = register_cvar("jb_shop_noclip_time", "8");
	g_cvar_zawp_expshots = register_cvar("jb_shop_zawp_expshots", "1");
	g_cvar_zawp_expradius = register_cvar("jb_shop_zawp_expradius", "250");
	g_cvar_zawp_expdmg = register_cvar("jb_shop_zawp_expdmg", "200");
	g_cvar_zawp_ff = register_cvar("jb_shop_zawp_ff", "1");
	
	get_pcvar_string(g_cvar_weapon_type, g_pcvar_one, charsmax(g_pcvar_one));
	g_pcvar_two = get_pcvar_num(g_cvar_weapon_ammo);
	g_pcvar_three = get_pcvar_num(g_cvar_invisible_time);
	g_pcvar_four = get_pcvar_num(g_cvar_noclip_time);
	g_pcvar_five = get_pcvar_num(g_cvar_zawp_expshots);
	
	new sBuffer[2][50];
	
	formatex(sBuffer[1], charsmax(sBuffer[]), sShop_items[ITEM_WEAPON][ITEM_INFO], g_pcvar_two);
	formatex(sBuffer[0], charsmax(sBuffer[]), sShop_items[ITEM_WEAPON][ITEM_NAME], g_pcvar_one);
	ucfirst(sBuffer[0]);
	g_iItemid[ITEM_WEAPON] = register_jailbreak_shopitem(sBuffer[0], sBuffer[1], sShop_items[ITEM_WEAPON][ITEM_COST], sShop_items[ITEM_WEAPON][ITEM_TEAM]);
	
	g_iItemid[ITEM_SHIELD] = register_jailbreak_shopitem(sShop_items[ITEM_SHIELD][ITEM_NAME], sShop_items[ITEM_SHIELD][ITEM_INFO], sShop_items[ITEM_SHIELD][ITEM_COST], sShop_items[ITEM_SHIELD][ITEM_TEAM]);
	
	formatex(sBuffer[0], charsmax(sBuffer[]), sShop_items[ITEM_INVISIBILTY][ITEM_INFO], g_pcvar_three);
	g_iItemid[ITEM_INVISIBILTY] = register_jailbreak_shopitem(sShop_items[ITEM_INVISIBILTY][ITEM_NAME], sBuffer[0], sShop_items[ITEM_INVISIBILTY][ITEM_COST], sShop_items[ITEM_INVISIBILTY][ITEM_TEAM]);
	
	formatex(sBuffer[0], charsmax(sBuffer[]), sShop_items[ITEM_NOCLIP][ITEM_INFO], g_pcvar_four);
	g_iItemid[ITEM_NOCLIP] = register_jailbreak_shopitem(sShop_items[ITEM_NOCLIP][ITEM_NAME], sBuffer[0], sShop_items[ITEM_NOCLIP][ITEM_COST], sShop_items[ITEM_NOCLIP][ITEM_TEAM]);
	
	formatex(sBuffer[0], charsmax(sBuffer[]), sShop_items[ITEM_ZAWP][ITEM_INFO], g_pcvar_five);
	g_iItemid[ITEM_ZAWP] = register_jailbreak_shopitem(sShop_items[ITEM_ZAWP][ITEM_NAME], sBuffer[0], sShop_items[ITEM_ZAWP][ITEM_COST], sShop_items[ITEM_ZAWP][ITEM_TEAM]);
	
	formatex(g_pcvar_one, charsmax(g_pcvar_one), "");
	g_pcvar_two = 0;
	g_pcvar_three = 0;
	g_pcvar_four = 0;
	g_pcvar_five = 0;
	
	register_event("DeathMsg", "event_deathmsg", "a");

	unregister_forward( FM_PrecacheEvent , g_fw_FM_PrecacheEvent_post , true );
}

public fwPlaybackEvent( flags , invoker , eventid )
 {
	if ( !( g_guns_eventids_bitsum & ( 1 << eventid ) ) || !( 1 <= invoker <= 32 ) )
		return FMRES_IGNORED;
	
	if(!g_has_zawp[invoker])
		return FMRES_IGNORED;
	
	new vec1[3], vec2[3];
	#if !defined Origin_Eyes
	#define Origin_Eyes 1
	#endif
	#if !defined Origin_AimEndEyes
	#define Origin_AimEndEyes 3
	#endif
	get_user_origin(invoker, vec1, Origin_Eyes); // origin; your camera point.
	get_user_origin(invoker, vec2, Origin_AimEndEyes);
	
	//BEAMENTPOINTS
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte (TE_BEAMPOINTS);     //TE_BEAMENTPOINTS 0
	write_coord(vec1[0]);
	write_coord(vec1[1]);
	write_coord(vec1[2]);
	write_coord(vec2[0]);
	write_coord(vec2[1]);
	write_coord(vec2[2]);
	write_short(spr_dot);
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(3) // life
	write_byte(10) // width
	write_byte(0) // noise
	write_byte(255) // r
	write_byte(215) // g
	write_byte(0) // b
	write_byte(200) // brightness
	write_byte(150) // speed
	message_end();
	
	g_has_zawp[invoker] --;
	
	if(!g_has_zawp[invoker])
	{
		g_zawp_counts--;
		
		if(!g_zawp_counts)
		{
			unregister_forward(FM_PlaybackEvent, FW_FM_PlayBackEvent_Pre, false);
			FW_FM_PlayBackEvent_Pre = -1;
		}
	}
	
	static Float:fVec2[3];
	IVecFVec(vec2, fVec2);
	task_explosion(fVec2, TASK_BULLET+invoker);
	return FMRES_IGNORED;
}

public task_explosion(Float:fOrigin[3], taskid)
{
	new id = taskid - TASK_BULLET;
	
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST, SVC_TEMPENTITY, fOrigin, 0);
	write_byte(TE_EXPLOSION);
	engfunc(EngFunc_WriteCoord, fOrigin[0]);
	engfunc(EngFunc_WriteCoord, fOrigin[1]);
	engfunc(EngFunc_WriteCoord, fOrigin[2]);
	write_short(spr_explosion);
	write_byte(30);
	write_byte(30);
	write_byte(10);
	message_end();
	
	Xradius_damage(id, get_pcvar_float(g_cvar_zawp_expradius), fOrigin, get_pcvar_float(g_cvar_zawp_expdmg), DMG_BLAST, bool:get_pcvar_num(g_cvar_zawp_ff));
	
	remove_task(taskid);
}

Xradius_damage(iAttacker, Float:Radius, Float:Origin[3], Float:fMaxdamage, dmgtype, bool:ff)
{
	if(Radius == 0.0)
		return;

	fMaxdamage = floatmax(fMaxdamage, 1.0);
	
	new iVictim, Float:vOrigin[3], Float:fDamage, Atteam = get_user_team(iAttacker);
	new Float:fDistance, Float:fHealth, Float:flTakeDamage;
	
	while ((iVictim = engfunc(EngFunc_FindEntityInSphere, iVictim, Origin, Radius)) > 0)
	{
		pev(iVictim, pev_health, fHealth);
		pev(iVictim, pev_takedamage, flTakeDamage);
		if(fHealth <= 0.0 || flTakeDamage == DAMAGE_NO)
			continue;
		
		if((iVictim != iAttacker && get_user_team(iVictim) == Atteam) && !ff)
			continue;
		
		if(pev(iVictim, pev_solid) != SOLID_BSP)
			pev(iVictim, pev_origin, vOrigin);
		else get_brush_entity_origin(iVictim, vOrigin);
		fDistance = get_distance_f(Origin, vOrigin);
		
		if(fDistance > Radius)
			continue;
		
		fDamage = ((Radius-fDistance)/(Radius) * fMaxdamage);
		
		if(fDamage <= 0.0) continue;
		
		if(IsPlayer(iVictim) && fHealth < fDamage)
			ExecuteHamB(Ham_Killed, iVictim, iAttacker, 0);
		else
			ExecuteHamB(Ham_TakeDamage, iVictim, iAttacker, iAttacker, fDamage, dmgtype);
	}
}

public event_deathmsg()
{
	new iVictim = read_data(2);
	
	if(g_invisible[iVictim])
	{
		g_invisible[iVictim] = 0;
		g_using_invisiblity--;
		remove_task(TASK_INVISIBLE+iVictim);
	}
	
	if(g_noclip[iVictim])
	{
		g_noclip[iVictim] = 0;
		remove_task(TASK_NOCLIP+iVictim);
	}
}

public jb_shop_item_preselect(id, itemid)
{
	if(itemid == g_iItemid[ITEM_WEAPON])
	{
		new sString[32];
		get_pcvar_string(g_cvar_weapon_type, sString, charsmax(sString));
		if(!equali(sString, g_pcvar_one))
		{
			formatex(g_pcvar_one, charsmax(g_pcvar_one), sString);
			jb_update_shop_item(itemid, sString);
		}
		if(get_pcvar_num(g_cvar_weapon_ammo) != g_pcvar_two)
		{
			g_pcvar_two = get_pcvar_num(g_cvar_weapon_ammo);
			formatex(sString, charsmax(sString), sShop_items[ITEM_WEAPON][ITEM_INFO], g_pcvar_two);
			jb_update_shop_item(itemid, "", sString);
		}
	}
	else if(itemid == g_iItemid[ITEM_INVISIBILTY])
	{
		if(get_pcvar_num(g_cvar_invisible_time) != g_pcvar_three)
		{
			new sString[32];
			g_pcvar_three = get_pcvar_num(g_cvar_invisible_time);
			formatex(sString, charsmax(sString), sShop_items[ITEM_INVISIBILTY][ITEM_INFO], g_pcvar_three);
			jb_update_shop_item(itemid, "", sString);
		}
	}
	else if(itemid == g_iItemid[ITEM_NOCLIP])
	{
		if(get_pcvar_num(g_cvar_noclip_time) != g_pcvar_four)
		{
			new sString[32];
			g_pcvar_four = get_pcvar_num(g_cvar_noclip_time);
			formatex(sString, charsmax(sString), sShop_items[ITEM_NOCLIP][ITEM_INFO], g_pcvar_four);
			jb_update_shop_item(itemid, "", sString);
		}
	}
	else if(itemid == g_iItemid[ITEM_ZAWP])
	{
		if(get_pcvar_num(g_cvar_zawp_expshots) != g_pcvar_five)
		{
			new sString[32];
			g_pcvar_five = get_pcvar_num(g_cvar_zawp_expshots);
			formatex(sString, charsmax(sString), sShop_items[ITEM_ZAWP][ITEM_INFO], g_pcvar_five);
			jb_update_shop_item(itemid, "", sString);
		}
	}
}

public jb_shop_item_postselect(id, itemid)
{
	if(itemid == g_iItemid[ITEM_INVISIBILTY])
	{
		if(task_exists(TASK_INVISIBLE+id))
		{
			return JB_MENU_ITEM_UNAVAILABLE;
		}
	}
	if(itemid == g_iItemid[ITEM_NOCLIP])
	{
		if(task_exists(TASK_NOCLIP+id))
		{
			return JB_MENU_ITEM_UNAVAILABLE;
		}
	}
	else if(itemid == g_iItemid[ITEM_SHIELD])
	{
		if(cs_get_user_hasprim(id))
		{
			return JB_MENU_ITEM_UNAVAILABLE;
		}
	}
	return PLUGIN_CONTINUE;
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == g_iItemid[ITEM_WEAPON])
	{
		new sWeapon[24], ent;
		get_pcvar_string(g_cvar_weapon_type, sWeapon, charsmax(sWeapon));
		strtolower(sWeapon);
		format(sWeapon, charsmax(sWeapon), "weapon_%s", sWeapon);
		
		give_item(id, sWeapon);
		ent = find_ent_by_owner(-1, sWeapon, id);
		if(ent > 0) cs_set_weapon_ammo(ent, get_pcvar_num(g_cvar_weapon_ammo));
		cs_set_user_bpammo(id, get_weaponid(sWeapon), 0);
	}
	else if(itemid == g_iItemid[ITEM_SHIELD])
	{
		give_item(id, "weapon_shield");
		cs_set_user_bpammo(id, CSW_SHIELD, 1);
		give_item(id, "weapon_knife");
	}
	else if(itemid == g_iItemid[ITEM_INVISIBILTY])
	{
		if(task_exists(TASK_INVISIBLE+id))
			return;
		
		if(!g_using_invisiblity)
		{
			FW_ADDTOFULLPACK = register_forward(FM_AddToFullPack, "fw_AddToFullPack_Post", 1);
			FW_PLAYERPOSTTHINK = register_forward(FM_PlayerPostThink, "fw_playerposthink_pre", 0);
		}
		
		emit_sound(id, CHAN_AUTO, g_szSND_Stealth, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);

		g_invisible[id] = g_pcvar_three
		set_task(1.0, "task_invisiblity", TASK_INVISIBLE+id, _, _, "b");
		g_using_invisiblity++;
	}
	else if(itemid == g_iItemid[ITEM_NOCLIP])
	{
		set_user_noclip(id, 1)
		g_noclip[id] = g_pcvar_four;
		set_task(1.0, "task_noclip", TASK_NOCLIP+id, _, _, "b");
	}
	else if(itemid == g_iItemid[ITEM_ZAWP])
	{
		if(g_has_zawp[id])
		{
			g_has_zawp[id] += get_pcvar_num(g_cvar_zawp_expshots)
		}
		else
		{
			if(!g_zawp_counts && FW_FM_PlayBackEvent_Pre == -1)
				FW_FM_PlayBackEvent_Pre = register_forward( FM_PlaybackEvent , "fwPlaybackEvent" );
			
			g_zawp_counts++;
			g_has_zawp[id] = get_pcvar_num(g_cvar_zawp_expshots);
		}
		
		new ent;
		give_item(id, "weapon_awp")
		ent = find_ent_by_owner(-1, "weapon_awp", id);
		if(ent > 0) cs_set_weapon_ammo(ent, g_has_zawp[id]);
		cs_set_user_bpammo(id, CSW_AWP, 0);
	}
}

public task_noclip(taskid)
{
	new id = taskid - TASK_NOCLIP
	
	if(!g_noclip[id])
	{
		set_user_noclip(id, 0)
		remove_task(taskid)
		return;
	}
	
	set_hudmessage(255, 255, 255, 0.0, 0.65, 1, 6.0, 1.0, 0.5, 0.5, -1);
	show_hudmessage(id, "You're noclipped for ^n   '%d' Second's...", g_noclip[id]--);
}

public client_disconnect(id)
{
	if(g_invisible[id])
	{
		g_invisible[id] = 0;
		g_using_invisiblity --;
		remove_task(TASK_INVISIBLE+id);
	}
}

public task_invisiblity(taskid)
{
	new id = taskid - TASK_INVISIBLE
	
	if(!g_invisible[id])
	{
		g_using_invisiblity --;
		remove_task(taskid);
		
		return;
	}
	
	set_hudmessage(255, 255, 255, 0.0, 0.65, 1, 6.0, 1.0, 0.5, 0.5, 4);
	show_hudmessage(id, "You're invisible for ^n  '%d' Second's...", g_invisible[id]--);
}

check_radious(const ent)
{
	if(!pev_valid(ent))
		return 0;
	
	static players[32], pnum, player, i, Float:eOrigin[3], Float:pOrigin[3], Float:pdistance, Float:radious;
	pev(ent, pev_origin, eOrigin);
	get_players(players, pnum, "a");
	radious = floatmax(get_pcvar_float(g_cvar_invis_radius), 1.0);
	
	for(i = 0; i < pnum; i++)
	{
		player = players[i]
		
		pev(player, pev_origin, pOrigin);
		pdistance = get_distance_f(pOrigin, eOrigin);
		
		if(pdistance > radious)
		{
			revealed_percent[ent][player] = 0.0;
			continue;
		}
		
		revealed_percent[ent][player] = ((radious-pdistance) / radious) * 255.0;
	}
	
	return 1;
}

public fw_playerposthink_pre(id)
{
	if(!g_using_invisiblity)
	{
		unregister_forward(FM_PlayerPostThink, FW_PLAYERPOSTTHINK, 0);
	}

	if(!is_user_alive(id))
	{
		return FMRES_IGNORED;
	}
	
	if(g_invisible[id])
	{
		check_radious(id);
	}

	return FMRES_IGNORED;
}

public fw_AddToFullPack_Post(es_handle, e, ent, host, hostflags, player, pset) 
{
	if(!g_using_invisiblity)
	{
		unregister_forward(FM_AddToFullPack, FW_ADDTOFULLPACK, 1);
	}

	if( !player )
	{
		return;
	}
	
	if( g_invisible[ent] )
	{
		set_es(es_handle, ES_RenderMode, kRenderTransAlpha);
		set_es(es_handle, ES_RenderAmt, floatround(revealed_percent[ent][host]));
	}
}
