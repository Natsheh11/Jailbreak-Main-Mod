/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <jailbreak_core>
#include <fakemeta>
#include <engine>
#include <cstrike>
#include <hamsandwich>
#include <cs_player_models_api>

#define PLUGIN "[JB] DAY:Chicken-day"
#define AUTHOR "Natsheh"

#define CHICKEN_TALL	-2.0
#define TASK_DELAY	56798

new CHICKEN_PLAYER_MODEL[32] = "chicken";
new EGG_MODEL[64] = "models/egg.mdl";

#define FEATHER_SPRITE		"models/feather.mdl"
#define LIGHTING_SPRITE		"sprites/lgtning.spr"
#define LASERBEAM_SPRITE	"sprites/laserbeam.spr"

// taken from VEN's
#define fm_create_entity(%1) engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, %1)) 

#if AMXX_VERSION_NUM > 182
#define client_disconnect client_disconnected
#endif

new const day_name[] = "Chicken's day";
const day_access = 0;
const Float:day_length = 240.0; // 4 minutes...

new dayid, g_lightning_sprite, g_blood_drop, g_blood_spray, g_laserbeam_sprite, g_feather_sprite;
new g_cvar_chicken_health, g_cvar_chicken_speed, g_cvar_chicken_gravity, g_cvar_egg_exp_time, g_cvar_egg_fire_speed,
g_cvar_egg_shoot_delay, g_cvar_egg_damage_max, g_cvar_egg_damage_min;

new HamHook:Ham_player_prethink_pre, HamHook:Ham_player_spawn_post,
FM_TOUCH_POST, FM_THINK_POST;

// player variables..
new g_user_chicken, g_user_delay;

new const egg_classname[] = "egg";

enum (+=1)
{
	SUPER_CHICKEN = 0,
	CHICKEN_NOISE1,
	CHICKEN_NOISE2,
	CHICKEN_NOISE3,
	CHICKEN_EGG_LAUNCH
}

new chicken_sounds[][64] = {
	"chicken/chicken0.wav",
	"chicken/chicken1.wav",
	"chicken/chicken2.wav",
	"chicken/chicken3.wav",
	"chicken/chicken4.wav"
}

public plugin_precache()
{
	new szModel[64];
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_PLAYER_MDL", CHICKEN_PLAYER_MODEL, charsmax(CHICKEN_PLAYER_MODEL));
	formatex(szModel, charsmax(szModel), "models/player/%s/%s.mdl", CHICKEN_PLAYER_MODEL, CHICKEN_PLAYER_MODEL)
	PRECACHE_PLAYER_MODEL(szModel)
	formatex(szModel, charsmax(szModel), "models/player/%s/%sT.mdl", CHICKEN_PLAYER_MODEL, CHICKEN_PLAYER_MODEL)
	if(file_exists(szModel)) PRECACHE_PLAYER_MODEL(szModel);
	
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_EGG_MDL", EGG_MODEL, charsmax(EGG_MODEL));
	PRECACHE_WORLD_ITEM(EGG_MODEL);
	
	g_lightning_sprite = PRECACHE_SPRITE_I(LIGHTING_SPRITE);
	g_laserbeam_sprite = PRECACHE_SPRITE_I(LASERBEAM_SPRITE);
	g_feather_sprite = PRECACHE_SPRITE_I(FEATHER_SPRITE);
	g_blood_drop = PRECACHE_SPRITE_I("sprites/blood.spr");
	g_blood_spray = PRECACHE_SPRITE_I("sprites/bloodspray.spr");
	
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_SPAWN_SND", chicken_sounds[SUPER_CHICKEN], charsmax(chicken_sounds[]));
	PRECACHE_SOUND(chicken_sounds[SUPER_CHICKEN]);
	
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_NOISE1_SND", chicken_sounds[CHICKEN_NOISE1], charsmax(chicken_sounds[]));
	PRECACHE_SOUND(chicken_sounds[CHICKEN_NOISE1]);
	
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_NOISE2_SND", chicken_sounds[CHICKEN_NOISE2], charsmax(chicken_sounds[]));
	PRECACHE_SOUND(chicken_sounds[CHICKEN_NOISE2]);
	
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_NOISE3_SND", chicken_sounds[CHICKEN_NOISE3], charsmax(chicken_sounds[]));
	PRECACHE_SOUND(chicken_sounds[CHICKEN_NOISE3]);
	
	jb_ini_get_keyvalue("CHICKEN_DAY", "CHICKEN_FIREING_EGG_SND", chicken_sounds[CHICKEN_EGG_LAUNCH], charsmax(chicken_sounds[]));
	PRECACHE_SOUND(chicken_sounds[CHICKEN_EGG_LAUNCH]);
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	dayid = register_jailbreak_day(day_name, day_access, day_length, DAY_GUARDS_VS_PRISONERS)
	g_cvar_chicken_health = register_cvar("jb_day_chicken_health", "250")
	g_cvar_chicken_speed = register_cvar("jb_day_chicken_speed", "400")
	g_cvar_chicken_gravity = register_cvar("jb_day_chicken_gravity", "0.65")
	g_cvar_egg_exp_time = register_cvar("jb_day_chicken_egg_exp_time", "5")
	g_cvar_egg_fire_speed = register_cvar("jb_day_chicken_egg_fire_speed", "1750")
	g_cvar_egg_shoot_delay = register_cvar("jb_day_chicken_egg_fire_delay", "1.0")
	g_cvar_egg_damage_max  = register_cvar("jb_day_chicken_egg_maxdamage", "25")
	g_cvar_egg_damage_min  = register_cvar("jb_day_chicken_egg_mindamage", "5")
	
	register_concmd("jb_chicken", "concmd_chicken", ADMIN_KICK, "make client a chicken!")
	
	Ham_player_spawn_post = RegisterHam(Ham_Spawn, "player", "fw_player_respawn_post", true)
	DisableHamForward(Ham_player_spawn_post)
	
	Ham_player_prethink_pre = RegisterHam(Ham_Player_PreThink, "player", "fw_player_prethink_pre")
	DisableHamForward(Ham_player_prethink_pre)
	
	register_event("DeathMsg", "deathmsg_event", "a");
	
	FM_TOUCH_POST = -1;
	FM_THINK_POST = -1;
}

public concmd_chicken(id,level,cid)
{
	if(id > 0 && !(get_user_flags(id) & level))
	{
		console_print(id, "You have no access to use this command!")
		return 1;
	}
	
	new szTarget[32], player;
	read_argv(1, szTarget, charsmax(szTarget))
	
	if(szTarget[0] == '@' && strlen(szTarget) <= 4)
	{
		new players[32], pnum;
		switch(szTarget[1])
		{
			case 'T','t': get_players(players, pnum, "he", "TERRORIST")
			case 'C','c': get_players(players, pnum, "he", "CT")
			case 'A','a': get_players(players, pnum, "h")
			default:
			{
				console_print(id, "Target is not found!")
				return 1;
			}
		}
		
		new szValue[4];
		read_argv(2, szValue, charsmax(szValue))
		
		if(!szValue[0])
		{
			console_print(id, "Please add the secound argument <1=chicken/0=human>")
			return 1;
		}
		
		new bool:bSwitch = bool:str_to_num(szValue);
		
		if(!g_user_chicken && bSwitch && pnum > 0)
		{
			EnableHamForward(Ham_player_prethink_pre)
			EnableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST == -1) FM_TOUCH_POST = register_forward(FM_Touch, "fw_touch_post", true);
			if(FM_THINK_POST == -1) FM_THINK_POST = register_forward(FM_Think, "fw_think_post", true);
		}
		
		for(new i; i < pnum; i++)
		{
			player = players[i];
			if(check_flag(g_user_chicken,player) == _:bSwitch) continue;
			set_user_chicken(player,bSwitch)
		}
		
		if(!g_user_chicken && !bSwitch && pnum > 0)
		{
			DisableHamForward(Ham_player_prethink_pre)
			DisableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST != -1)
			{
				unregister_forward(FM_Touch, FM_TOUCH_POST, true);
				FM_TOUCH_POST = -1;
			}
			if(FM_THINK_POST != -1)
			{
				unregister_forward(FM_Think, FM_THINK_POST, true);
				FM_THINK_POST = -1;
			}
		}
		
		new AName[32], sTeam[16];
		get_user_name(id, AName, charsmax(AName))
		
		switch(szTarget[1])
		{
			case 'T','t': copy(sTeam, charsmax(sTeam), "Terrorist");
			case 'C','c': copy(sTeam, charsmax(sTeam), "Counter terrorist");
			case 'A','a': copy(sTeam, charsmax(sTeam), "Players");
		}
		
		cprint_chat(0, _, "^4Admin ^3%s ^1has transferred All the ^4%s^1 into ^3%s!", AName, sTeam, bSwitch ? "Chickens":"Humans")
		
		return 1;
	}
	
	player = find_player("a", szTarget);
	if(!player) player = find_player("b", szTarget);
	if(!player) player = find_player("c", szTarget);
	if(!player && szTarget[0] == '#') player = find_player("k", str_to_num(szTarget[1]));
	
	if(!player)
	{
		console_print(id, "Target is not found!")
		return 1;
	}
	
	if(check_flag(g_user_chicken,player))
	{
		set_user_chicken(player,false)
		if(!g_user_chicken)
		{
			DisableHamForward(Ham_player_prethink_pre)
			DisableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST != -1)
			{
				unregister_forward(FM_Touch, FM_TOUCH_POST, true);
				FM_TOUCH_POST = -1;
			}
			if(FM_THINK_POST != -1)
			{
				unregister_forward(FM_Think, FM_THINK_POST, true);
				FM_THINK_POST = -1;
			}
		}
	}
	else
	{
		if(!g_user_chicken)
		{
			EnableHamForward(Ham_player_prethink_pre);
			EnableHamForward(Ham_player_spawn_post);
			if(FM_TOUCH_POST == -1) FM_TOUCH_POST = register_forward(FM_Touch, "fw_touch_post", true);
			if(FM_THINK_POST == -1) FM_THINK_POST= register_forward(FM_Think, "fw_think_post", true);
		}
		set_user_chicken(player)
	}
	
	new AName[32], PName[32];
	get_user_name(id, AName, charsmax(AName))
	get_user_name(player, PName, charsmax(PName))
	cprint_chat(0, _, "^4Admin ^3%s ^1has transferred player ^4%s^1 into a ^3%s!", AName, PName, check_flag(g_user_chicken,player) ? "Chicken":"Human")
	
	return 1;
}

public deathmsg_event()
{
	new iVictim = read_data(2);
	
	if(!is_user_connected(iVictim))
		return;
	
	if(check_flag(g_user_chicken,iVictim))
	{
		set_rendering(iVictim, kRenderFxNone, 0, 0, 0, kRenderTransAdd, 0)
		new orig[3]
		get_user_origin(iVictim, orig)
		create_gibs(iVictim, orig, 5, 30, 30)
		emit_sound(iVictim, CHAN_AUTO, chicken_sounds[CHICKEN_NOISE3], VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		new killer = read_data(1);
		if(killer > 0) emit_sound(killer, CHAN_AUTO, chicken_sounds[CHICKEN_NOISE3], VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	}
}

public fw_think_post(iEnt)
{
	if(!pev_valid(iEnt))
		return FMRES_IGNORED;
	
	static classname[32]
	pev(iEnt, pev_classname, classname, charsmax(classname))
	
	if(!equal(classname, egg_classname))
		return FMRES_IGNORED;
	
	// destroy entity
	egg_explode(iEnt)
	return FMRES_IGNORED;
}

egg_explode(egg)
{
	new Float:fOrigin[3];
	pev(egg, pev_origin, fOrigin)
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_BLOODSPRITE);
	engfunc(EngFunc_WriteCoord, fOrigin[0]);
	engfunc(EngFunc_WriteCoord, fOrigin[1]);
	engfunc(EngFunc_WriteCoord, (fOrigin[2]+random_num(-10,10)));
	write_short(g_blood_spray);
	write_short(g_blood_drop);
	write_byte(random_num(50, 255));
	write_byte(random_num(5, 15));
	message_end();


	// remove entity..
	set_pev(egg, pev_flags, FL_KILLME);
	dllfunc(DLLFunc_Think, egg);
}

public fw_touch_post(ent, id)
{
	if(!pev_valid(ent))
		return FMRES_IGNORED;
	
	static classname[32];
	pev(ent, pev_classname, classname, charsmax(classname))
	
	if(!equal(classname, egg_classname))
		return FMRES_IGNORED;
	
	if(is_user_alive(id))
	{
		static attacker, Float:dmg; attacker = pev(ent, pev_owner);
		dmg = random_float(get_pcvar_float(g_cvar_egg_damage_min), get_pcvar_float(g_cvar_egg_damage_max));
		
		// if it touching the owner, ignore...
		if(attacker == id || pev(id, pev_flags) & FL_GODMODE)
			return FMRES_IGNORED;
		
		if(pev(id, pev_health) > dmg)
			ExecuteHamB(Ham_TakeDamage, id, attacker, attacker, dmg, DMG_BULLET);
		else
			ExecuteHamB(Ham_Killed, id, attacker, false);
	}
	else
	{
		pev(id, pev_classname, classname, charsmax(classname))
		if(equal(classname, "func_breakable"))
		{
			force_use(pev(ent, pev_owner), id)
		}
	}
		
	// destroy the egg..
	egg_explode(ent)
	
	return FMRES_IGNORED;
}

new Float:chicken_noise[33];

public fw_player_prethink_pre(id)
{
	if(!is_user_alive(id))
		return;
	
	static buttons, oldbuttons;
	buttons = pev(id, pev_button)
	oldbuttons = pev(id, pev_oldbuttons)
	
	if(check_flag(g_user_chicken,id))
	{
		static Float:fView[3];
		pev(id, pev_view_ofs, fView)
		fView[2] = CHICKEN_TALL;
		set_pev(id, pev_view_ofs, fView)
		
		// block crouching..
		set_pev(id, pev_bInDuck, false);
		set_pev(id, pev_flags, pev(id, pev_flags)& ~FL_DUCKING);
		
		if(((buttons & IN_USE) && !(oldbuttons & IN_USE)) && !check_flag(g_user_delay,id))
		{
			// launching eggs...
			launch_egg(id)
		}
		
		if(pev(id, pev_movetype) == MOVETYPE_FLY) client_cmd(id, "+jump;wait;-jump");
		
		static Float:gtime;
		gtime = get_gametime();
		
		if(chicken_noise[id] < gtime)
		{
			emit_sound(id, CHAN_BODY, chicken_sounds[random_num(CHICKEN_NOISE1,CHICKEN_NOISE3)], VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
			chicken_noise[id] = gtime + random_float(3.0,10.0);
		}
	}
}

launch_egg(id)
{
	new Float:fOrigin[3]
	pev(id, pev_origin, fOrigin)
	
	new ent = fm_create_entity("info_target") 
	
	if(!ent) return;
	
	new Float:fViewOfs[3];
	set_pev(ent, pev_classname, egg_classname)
	pev(ent, pev_view_ofs, fViewOfs)
	fOrigin[0] += fViewOfs[0];
	fOrigin[1] += fViewOfs[1];
	fOrigin[2] += fViewOfs[2];
	entity_set_origin(ent, fOrigin);
	entity_set_model(ent, EGG_MODEL);
	
	new Float:MinBox[3] = { -1.0, -1.0, -1.0 };
	new Float:MaxBox[3] = { 1.0, 1.0, 1.0 };
	entity_set_vector(ent, EV_VEC_mins, MinBox);
	entity_set_vector(ent, EV_VEC_maxs, MaxBox);
	
	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	entity_set_int(ent, EV_INT_movetype, MOVETYPE_FLY);
	entity_set_edict(ent, EV_ENT_owner, id);
	
	new Float:Velocity[3];
	VelocityByAim(id, get_pcvar_num(g_cvar_egg_fire_speed), Velocity);
	entity_set_vector(ent, EV_VEC_velocity, Velocity);
	
	set_pev(ent, pev_nextthink, get_gametime() + get_pcvar_float(g_cvar_egg_exp_time))
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMFOLLOW)	// TE_BEAMFOLLOW
	write_short(ent) // index
	write_short(g_laserbeam_sprite) // sprite
	write_byte(25) // life
	write_byte(5) // size
	write_byte(200) //r
	write_byte(200) //g
	write_byte(200) //b
	write_byte(200) //brightness
	message_end()
	
	emit_sound(id, CHAN_WEAPON, chicken_sounds[CHICKEN_EGG_LAUNCH], VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	
	if(!check_flag(g_user_delay,id))
	{
		set_flag(g_user_delay,id);
		set_task(get_pcvar_float(g_cvar_egg_shoot_delay), "task_end_delaying", TASK_DELAY+id);
	}
}

public task_end_delaying(const taskid)
{
	remove_flag(g_user_delay,(taskid - TASK_DELAY))
	remove_task(taskid)
}

public fw_player_respawn_post(id)
{
	if(!is_user_alive(id))
		return;
	
	if(jb_get_current_day() == dayid)
	{
		switch( get_user_team(id) )
		{
			case TEAM_PRISONERS:
			{
				set_user_chicken(id)
				set_hudmessage(127, 255, 127, -1.0, 0.75, 1, 6.0, 6.0, 0.1, 0.3, -1)
				show_hudmessage(id, "[Chicken Day]^nChickens are able to launch eggs^nby pressing '+use' key")
			}
			case TEAM_GUARDS:
			{
				set_user_chicken(id, false)
				ham_give_weapon(id, "weapon_m4a1", 90)
				ham_give_weapon(id, "weapon_deagle", 35)
			}
		}
	}
	else if(check_flag(g_user_chicken,id))
	{
		set_user_chicken(id)
	}
}

public jb_day_started(iDayid)
{
	if(iDayid == dayid)
	{
		if(!g_user_chicken)
		{
			// enable chicken fwds
			EnableHamForward(Ham_player_prethink_pre)
			EnableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST == -1) FM_TOUCH_POST = register_forward(FM_Touch, "fw_touch_post", true);
			if(FM_THINK_POST == -1) FM_THINK_POST = register_forward(FM_Think, "fw_think_post", true);
		}
		
		// open the cells
		jb_cells();
		
		set_hudmessage(127, 255, 127, -1.0, 0.75, 1, 6.0, 6.0, 0.1, 0.3, -1)
		show_hudmessage(0, "[Chicken Day]^nChickens are able to launch eggs^nby pressing '+use' key")
		
		new players[32], pnum, i, id;
		get_players(players, pnum, "ah")
		
		for(i = 0; i < pnum; i++)
		{
			id = players[i];
			switch( get_user_team(id) )
			{
				case TEAM_PRISONERS: set_user_chicken(id, true)
				case TEAM_GUARDS:
				{
					ham_give_weapon(id, "weapon_m4a1", 90)
					ham_give_weapon(id, "weapon_deagle", 35)
				}
			}
		}
	}
	else
	{
		if(g_user_chicken > 0)
		{
			DisableHamForward(Ham_player_prethink_pre)
			DisableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST != -1)
			{
				unregister_forward(FM_Touch, FM_TOUCH_POST, true);
				FM_TOUCH_POST = -1;
			}
			if(FM_THINK_POST != -1)
			{
				unregister_forward(FM_Think, FM_THINK_POST, true);
				FM_THINK_POST = -1;
			}
			
			// remove all eggs
			new iEnt = -1;
			while((iEnt = find_ent_by_class(iEnt, egg_classname)) > 0)
			{
				egg_explode(iEnt);
			}
			
			new players[32], pnum, i;
			get_players(players, pnum, "h")
			
			for(i = 0; i < pnum; i++)
			{
				if(check_flag(g_user_chicken,players[i]))
				{
					set_user_chicken(players[i], false)
				}
			}
			
			g_user_chicken = 0;
		}
	}
}

public client_disconnect(id)
{
	if(g_user_chicken)
	{
		remove_flag(g_user_chicken,id)
		
		if(!g_user_chicken)
		{
			DisableHamForward(Ham_player_prethink_pre)
			DisableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST != -1)
			{
				unregister_forward(FM_Touch, FM_TOUCH_POST, true);
				FM_TOUCH_POST = -1;
			}
			if(FM_THINK_POST != -1)
			{
				unregister_forward(FM_Think, FM_THINK_POST, true);
				FM_THINK_POST = -1;
			}
		}
	}
}

public jb_day_ended(iDayid)
{
	if(iDayid == dayid)
	{
		if(g_user_chicken)
		{
			// disable chicken fwds
			DisableHamForward(Ham_player_prethink_pre)
			DisableHamForward(Ham_player_spawn_post)
			if(FM_TOUCH_POST != -1)
			{
				unregister_forward(FM_Touch, FM_TOUCH_POST, true);
				FM_TOUCH_POST = -1;
			}
			if(FM_THINK_POST != -1)
			{
				unregister_forward(FM_Think, FM_THINK_POST, true);
				FM_THINK_POST = -1;
			}
		}
		
		// remove all eggs
		new iEnt = -1;
		while((iEnt = find_ent_by_class(iEnt, egg_classname)) > 0)
		{
			egg_explode(iEnt);
		}
		
		new players[32], pnum, i;
		get_players(players, pnum, "h")
		
		for(i = 0; i < pnum; i++)
		{
			if(check_flag(g_user_chicken,players[i]))
			{
				set_user_chicken(players[i], false)
			}
		}
	}
}

stock strip_weapons(id)
{
	if(!is_user_alive(id)) return;
	
	new wpns[32], wnum, sWeapon[24];
	get_user_weapons(id, wpns, wnum)
	
	for(new i = 0; i < wnum; i++)
	{
		get_weaponname(wpns[i], sWeapon, charsmax(sWeapon))
		ham_strip_weapons(id, sWeapon)
	}
}

stock ham_strip_weapons(id, const weapon[])
{
	new wId = get_weaponid(weapon);
	if(!wId) return 0;
	new wEnt = -1;
	while ((wEnt = engfunc(EngFunc_FindEntityByString, wEnt, "classname", weapon)) && pev(wEnt, pev_owner) != id) {}
	if(!pev_valid(wEnt)) return 0;
	if(get_user_weapon(id) == wId) ExecuteHamB(Ham_Weapon_RetireWeapon,wEnt);
	if(!ExecuteHamB(Ham_RemovePlayerItem,id,wEnt)) return 0;
	ExecuteHamB(Ham_Item_Kill, wEnt);
	set_pev(id, pev_weapons, pev(id,pev_weapons) & ~(1<<wId));
	return 1;
}

set_user_chicken(id, bool:set=true)
{
	new bool:alive = bool:is_user_alive(id);
	
	switch( set )
	{
		case true:
		{
			set_flag(g_user_chicken,id);
			cs_set_player_model(id, CHICKEN_PLAYER_MODEL);
			if(alive) {
				set_pev(id, pev_health, get_pcvar_float(g_cvar_chicken_health));
				set_pev(id, pev_maxspeed, get_pcvar_float(g_cvar_chicken_speed));
				set_pev(id, pev_gravity, get_pcvar_float(g_cvar_chicken_gravity));
				
				jb_block_user_weapons(id, true);
				strip_weapons(id);
				
				emit_sound(id, CHAN_BODY, chicken_sounds[SUPER_CHICKEN], VOL_NORM, ATTN_NORM, 0, PITCH_HIGH)
			}
		}
		case false:
		{
			remove_flag(g_user_chicken,id);
			jb_block_user_weapons(id, false);
			jb_set_user_class_model(id);
			if(alive) {
				set_pev(id, pev_health, 100.0);
				set_pev(id, pev_maxspeed, 250.0);
				set_pev(id, pev_gravity, 1.0);
				ham_give_weapon(id, "weapon_knife");
			}
		}
	}
	
	// doing a transfer effect...
	transfer_effect(id)
}

// gives a player a weapon efficiently
stock ham_give_weapon(id, weapon[], bpammo=0)
{
	new wpnid = get_weaponid(weapon)
	if(!wpnid) return 0;
	new wEnt = engfunc(EngFunc_CreateNamedEntity,engfunc(EngFunc_AllocString,weapon));
	if(!pev_valid(wEnt)) return 0;
	set_pev(wEnt,pev_spawnflags,SF_NORESPAWN);
	dllfunc(DLLFunc_Spawn,wEnt);
	
	if(!ExecuteHamB(Ham_AddPlayerItem, id, wEnt))
	{
		if(pev_valid(wEnt)) set_pev(wEnt,pev_flags,pev(wEnt,pev_flags) | FL_KILLME);
		return 0;
	}
	
	ExecuteHamB(Ham_Item_AttachToPlayer,wEnt,id)
	if(bpammo > 0) cs_set_user_bpammo(id, wpnid, bpammo)
	return 1;
}

transfer_effect(id)
{
	new Float:fOrigin[3];
	pev(id, pev_origin, fOrigin)
	
	new Float:tfOrigin[3], tr2;
	tfOrigin[2] = 9999.0
	tr2 = create_tr2();
	engfunc(EngFunc_TraceLine, fOrigin, tfOrigin, (IGNORE_MISSILE|IGNORE_MONSTERS), id, tr2)
	get_tr2(tr2, TR_vecEndPos, tfOrigin)
	free_tr2(tr2)
	
	engfunc(EngFunc_MessageBegin, MSG_BROADCAST, SVC_TEMPENTITY, {0.0, 0.0, 0.0}, 0)
	write_byte(0) 
	engfunc(EngFunc_WriteCoord, tfOrigin[0])
	engfunc(EngFunc_WriteCoord, tfOrigin[1])
	engfunc(EngFunc_WriteCoord, tfOrigin[2])
	engfunc(EngFunc_WriteCoord, fOrigin[0])
	engfunc(EngFunc_WriteCoord, fOrigin[1])
	engfunc(EngFunc_WriteCoord, fOrigin[2])
	write_short(g_lightning_sprite) 
	write_byte(1) // framestart 
	write_byte(5) // framerate 
	write_byte(5) // life 
	write_byte(100) // width 
	write_byte(100) // noise 
	write_byte(200) // r, g, b 
	write_byte(200) // r, g, b 
	write_byte(200) // r, g, b 
	write_byte(200) // brightness 
	write_byte(200) //  
	message_end()
	
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, fOrigin, 0) 
	write_byte(TE_TELEPORT) // TE_TELEPORT
	engfunc(EngFunc_WriteCoord, fOrigin[0])
	engfunc(EngFunc_WriteCoord, fOrigin[1])
	engfunc(EngFunc_WriteCoord, fOrigin[2])
	message_end()
}

create_gibs(id, vec[3], velocity, xrandom, amount)
{
	// gibs
	new Float:size[3]
	entity_get_vector(id, EV_VEC_size, size)

	message_begin(MSG_PVS, SVC_TEMPENTITY, vec)
	write_byte(108) // TE_BREAKMODEL
	// position
	write_coord(vec[0])
	write_coord(vec[1])
	write_coord(vec[2])
	// size
	write_coord(floatround(size[0]))
	write_coord(floatround(size[1]))
	write_coord(floatround(size[2]))
	// velocity
	write_coord(0)
	write_coord(0)
	write_coord(velocity) //10
	// randomization
	write_byte(xrandom) //30
	// Model
	write_short(g_feather_sprite)	//model id#
	// # of shards
	write_byte(amount) //30
	// duration
	write_byte(300);// 15.0 seconds
	// flags
	write_byte(0x04) // BREAK_FLESH
	message_end()
}

/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
