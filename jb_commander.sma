/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <hamsandwich>
#include <fun>
#include <fakemeta>
#include <xs>
#include <jailbreak_core>
#include <cs_player_models_api>
#include <inc_get_team_fix>

// MM - shortcut for main menu
#define PLUGIN "[JB] MM:Commander"
#define AUTHOR "Natsheh"

#define TASK_HUDMSG 1300
#define TASK_COUNTDOWN 21900
#define TASK_ANSWERING 1200
#define TASK_BEAM 876545

#define WARDEN_MENU_ITEM_NAME_LENGTH 48

#if !defined MAX_PLAYERS
#define MAX_PLAYERS 32
#endif

#if AMXX_VERSION_NUM > 182
#define client_disconnect(id) client_disconnected(id)
#endif

new g_sQuestion[MAX_PLAYERS+1][64], g_sAnswer[MAX_PLAYERS+1][64], Float:g_fLast_Use[MAX_PLAYERS+1], JB_CELLS_STATE:g_Cells_State = JB_CELLS_CLOSE;

new g_Commander, g_iPlayerMute[MAX_PLAYERS+1], g_PlayerQuestioned, g_iPlayerVoiceAccess, g_PlayerPaints, g_PlayerPainting, g_IsUserAlive, g_IsUserSolid, g_UserSemiClip[MAX_PLAYERS+1];

new g_mm_itemid_warden_menu, g_mm_itemid_mute_menu, g_fwd_addtofullpack_post, HamHook:g_fw_PlayerSemiClipStart, HamHook:g_fw_PlayerSemiClipEnd;

const Ham:Ham_Player_SemiclipStart = Ham_Player_UpdateClientData;	/* Ham_Player_UpdateClientData <|> Ham_Player_PreThink */
const Ham:Ham_Player_SemiclipEnd   = Ham_Item_ItemSlot;				/* Ham_Item_ItemSlot <|> Ham_Player_PostThink */

new const commander_cmds[][] = {
	"command",
	"/command",
	"!command",
    "warden",
    "/warden",
 	"!warden"
}

enum VOICE_ACCESS
{
	VOICE_ALL = 0,
	VOICE_CT,
	VOICE_CTONLY,
	VOICE_TT,
	VOICE_TTONLY,
	VOICE_PLAYER,
	VOICE_COMMANDER
}

new const g_szVoiceCategoriesMenu_items[][] = {
	"VOICE_CHAT_EVERYONE",
	"VOICE_CHAT_FOR_CT",
	"VOICE_CHAT_FOR_CT_ONLY",
	"VOICE_CHAT_FOR_TT",
	"VOICE_CHAT_FOR_TT_ONLY",
	"VOICE_CHAT_SPECIFIED",
	"VOICE_CHAT_COMMANDER_ONLY"
}

enum any:WARDEN_ASSIGNED_STATES (+=1)
{
    WARDEN_ASSIGNED_STATE_LEGACY = 0,
    WARDEN_ASSIGNED_STATE_TRANSFERED,
    WARDEN_ASSIGNED_STATE_PROMOTED
}

enum any:WARDEN_DROP_STATES (+=1)
{
    WARDEN_DROP_STATE_QUIT = 0,
    WARDEN_DROP_STATE_KILLED,
    WARDEN_DROP_STATE_TRANSFERED,
    WARDEN_DROP_STATE_DEMOTED,
    WARDEN_DROP_STATE_DISCONNECTED
}

new g_pcvr_answer_time, g_pcvr_vc_onfunday, g_pcvr_vc_onlr, g_cvar_effects_color, g_cvar_effects, g_beaconSpr,
g_pcvar_max_medkits, g_cvar_auto_choose;

new g_iMaxplayers, g_sprite_lightning, HamHook:g_Ham_fw_PreThink_post, g_commanderSpr;

new g_countdown, Float:g_fEnd_Origin[33][3], g_VIP_MODEL[32], g_VIP_MODEL_BODY, g_VIP_MODEL_SKIN, MEDKIT_W_MDL[64] = "models/w_medkit.mdl",
MEDKIT_GIBS_MDL[64] = "models/chromegibs.mdl", MEDKIT_BREAK_SND[64] = "debris/metal5.wav";

new g_medkits, HamHook:FW_TRACEATTACK_FUNC_HC_POST, HamHook:FW_KILLED_FUNC_HC_POST, g_medkit_gibs_mdl_index;
new const g_medkit_name[] = "Medkit";
new Array:ARRAY_CM_EXTRA_ITEMS, CM_EXTRA_ITEMS, FWD_CM_EXTRA_ITEMS, g_fw_warden_assigned, g_fw_warden_dropped, g_fw_PlayersVoiceAccessReset;

new Float:g_fDrawDelay[MAX_PLAYERS+1];

public plugin_end()
{
	ArrayDestroy(ARRAY_CM_EXTRA_ITEMS);
	DestroyForward(FWD_CM_EXTRA_ITEMS);
	DestroyForward(g_fw_warden_assigned);
	DestroyForward(g_fw_warden_dropped);
	DestroyForward(g_fw_PlayersVoiceAccessReset);
}

public plugin_natives()
{
	ARRAY_CM_EXTRA_ITEMS = ArrayCreate(WARDEN_MENU_ITEM_NAME_LENGTH,1);
	
	register_native("jb_get_commander", "_get_commander");
	register_native("jb_set_commander", "_set_commander");
	
	register_native("register_jailbreak_cmitem", "_reg_cmitem")
	register_native("unregister_jailbreak_cmitem", "_unreg_cmitem")

	register_native("jb_grant_voice_access", "_grant_voice_access");
	register_native("jb_strip_voice_access", "_strip_voice_access");
}

public _grant_voice_access(plugin, argc)
{
	new id = get_param(1);

	if( (1 <= id <= g_iMaxplayers) )
	{
		set_flag(g_iPlayerVoiceAccess,id);
	}
	else
	{
		g_iPlayerVoiceAccess = 0xFFFFFFFF;
	}
}

public _strip_voice_access(plugin, argc)
{
	new id = get_param(1);

	if( (1 <= id <= g_iMaxplayers) )
	{
		remove_flag(g_iPlayerVoiceAccess,id);
	}
	else
	{
		g_iPlayerVoiceAccess = 0;
	}
}

public _set_commander(plugin, argc)
{
	new id = get_param(1), sName[32];

	if(g_Commander > 0)
	{
		remove_commander(g_Commander, WARDEN_DROP_STATE_DEMOTED);
	}

	get_user_name(id, sName, charsmax(sName));
	setup_commander(id, WARDEN_ASSIGNED_STATES:get_param(2));
	cprint_chat(0, _, "%L", LANG_PLAYER, "NEW_COMMANDER_ANNOUNCE", sName);
}

public _get_commander(plugin, argc)
{
	return g_Commander;
}

public _reg_cmitem(plugin, argc)
{
	new szString[WARDEN_MENU_ITEM_NAME_LENGTH];
	get_string(1, szString, charsmax(szString))
	
	if(ARRAY_CM_EXTRA_ITEMS == Invalid_Array || strlen(szString) < 3)
	{
		log_error(AMX_ERR_NATIVE, "Error could not register (%s) into the commander menu, Array Index: %d", szString, ARRAY_CM_EXTRA_ITEMS)
		return -1;
	}
	
	new szNull[2], loop = CM_EXTRA_ITEMS;
	while( loop-- > 0 )
	{
		ArrayGetString(ARRAY_CM_EXTRA_ITEMS, loop, szNull, charsmax(szNull));
		if(!szNull[0])
		{
			ArraySetString(ARRAY_CM_EXTRA_ITEMS, loop, szString);
			return loop;
		}
	}
	
	ArrayPushString(ARRAY_CM_EXTRA_ITEMS, szString);
	CM_EXTRA_ITEMS++;
	return (CM_EXTRA_ITEMS-1);
}

public _unreg_cmitem(plugin, argc)
{
	new index = get_param(1);
	
	if(ARRAY_CM_EXTRA_ITEMS == Invalid_Array)
	{
		log_error(AMX_ERR_NATIVE, "Error could not Unregister Array Index(%d) is invalid!", ARRAY_CM_EXTRA_ITEMS)
		return 0;
	}
	if(!(0 <= index < CM_EXTRA_ITEMS))
	{
		log_error(AMX_ERR_NATIVE, "Error Invaild Array Index (%d)", index);
		return 0;
	}
	
	ArraySetString(ARRAY_CM_EXTRA_ITEMS, index, "");
	return 1;
}

public plugin_precache()
{
	g_sprite_lightning = PRECACHE_SPRITE_I("sprites/lgtning.spr");
	
	new BEACON_SPRITE[64] = "sprites/laserbeam.spr";
	new COMMANDER_SPRITE[64] = "sprites/commander.spr";
	jb_ini_get_keyvalue("COMMANDER", "COMMANDER_BEACON_SPR", BEACON_SPRITE, charsmax(BEACON_SPRITE))
	jb_ini_get_keyvalue("COMMANDER", "COMMANDER_HEAD_SPR", COMMANDER_SPRITE, charsmax(COMMANDER_SPRITE))
	g_beaconSpr = PRECACHE_SPRITE_I(BEACON_SPRITE);
	g_commanderSpr = PRECACHE_SPRITE_I(COMMANDER_SPRITE);
	
	new szString[64];
	jb_ini_get_keyvalue("COMMANDER", "COMMANDER_PLAYER_MDL", g_VIP_MODEL, charsmax(g_VIP_MODEL));
	formatex(szString, charsmax(szString), "models/player/%s/%s.mdl", g_VIP_MODEL, g_VIP_MODEL);
	if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);
	formatex(szString, charsmax(szString), "models/player/%s/%sT.mdl", g_VIP_MODEL, g_VIP_MODEL);
	if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);

	szString[0] = '0'; szString[1] = EOS;
	jb_ini_get_keyvalue("COMMANDER", "COMMANDER_PLAYER_MDL_BODY", szString, charsmax(szString));
	g_VIP_MODEL_BODY = str_to_num(szString);

	szString[0] = '0'; szString[1] = EOS;
	jb_ini_get_keyvalue("COMMANDER", "COMMANDER_PLAYER_MDL_SKIN", szString, charsmax(szString));
	g_VIP_MODEL_SKIN = str_to_num(szString);

	jb_ini_get_keyvalue("COMMANDER", "MEDKIT_W_MDL", MEDKIT_W_MDL, charsmax(MEDKIT_W_MDL));
	PRECACHE_WORLD_ITEM(MEDKIT_W_MDL);
	
	jb_ini_get_keyvalue("COMMANDER", "MEDKIT_GIBS_MDL", MEDKIT_GIBS_MDL, charsmax(MEDKIT_GIBS_MDL))
	g_medkit_gibs_mdl_index = PRECACHE_WORLD_ITEM_I(MEDKIT_GIBS_MDL)
	
	jb_ini_get_keyvalue("COMMANDER", "MEDKIT_GIBS_SND", MEDKIT_BREAK_SND, charsmax(MEDKIT_BREAK_SND))
	PRECACHE_SOUND(MEDKIT_BREAK_SND)
	
	PRECACHE_SOUND("items/medshot4.wav");
	PRECACHE_SOUND("items/medshot5.wav");
	PRECACHE_SOUND("items/medshotno1.wav");
	PRECACHE_SOUND("items/medcharge4.wav");
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_mm_itemid_warden_menu = register_jailbreak_mmitem("MM_ITEM_COMMANDER_MENU", _, TEAM_GUARDS);
	g_mm_itemid_mute_menu = register_jailbreak_mmitem("MM_ITEM_VOICE_MUTE_MENU", 0, TEAM_ANY);
	
	g_pcvr_answer_time = register_cvar("jb_question_answeringtime", "15");
	g_pcvr_vc_onfunday = register_cvar("jb_enable_voicechat_onfunday", "1");
	g_pcvr_vc_onlr = register_cvar("jb_enable_voicechat_onlr", "1");
	g_pcvar_max_medkits = register_cvar("jb_commander_MaxMedkits", "5");
	
	register_concmd("jb_semiclip", "clcmd_semiclip", ADMIN_KICK, "en/disable semiclip for teammates <1/0>");

	register_clcmd("say", "cmd_say");
	register_clcmd("say_team", "cmd_say");
	
	register_clcmd("radio3", "clcmd_radio3");
	
	register_concmd("amx_allowmic", "cmd_mic", ADMIN_LEVEL_A, "give user the ability to use the voice chat for 1 map");
	register_concmd("jb_allowmic", "cmd_mic", ADMIN_LEVEL_A, "give user the ability to use the voice chat for 1 map");
	register_concmd("amx_paints", "concmd_paint", ADMIN_LEVEL_A, "give/take user the ability to paint!");
	register_concmd("jb_paints", "concmd_paint", ADMIN_LEVEL_A, "give/take user the ability to paint!");
	
	register_clcmd("Question", "clcmd_question");
	register_clcmd("Answer", "clcmd_answer");
	
	register_clcmd("+paint", "clcmd_paint");
	register_clcmd("-paint", "clcmd_paint");
    
	register_clcmd("jb_voice_menu", "VoiceAccessCategoriesMenu");
	register_clcmd("say /mute", "Clcmd_VoiceMuteMenu");
	
	g_cvar_auto_choose = register_cvar("jb_commander_random_chosen", "1");
	g_cvar_effects = register_cvar("jb_commander_effects", "3");
	g_cvar_effects_color = register_cvar("jb_commander_effects_color", "200 200 200 50");
	
	register_forward(FM_CmdStart, "fw_CmdStart_post", true);
	RegisterHam(Ham_Spawn, "player", "fw_player_spawned", true);
	RegisterHam(Ham_Killed, "player", "fw_player_killed", true);

	DisableHamForward( (g_Ham_fw_PreThink_post = RegisterHam(Ham_Player_PreThink, "player", "fw_player_prethink_post", true)) );
	DisableHamForward( (g_fw_PlayerSemiClipStart = RegisterHam(Ham_Player_SemiclipStart, "player", "fw_PlayerSemiclip_Start", true)) );
	DisableHamForward( (g_fw_PlayerSemiClipEnd = RegisterHam(Ham_Player_SemiclipEnd, "player", "fw_PlayerSemiclip_End", false)) );
	
	register_forward(FM_Voice_SetClientListening, "fw_voice_listening");
	
	g_iMaxplayers = get_maxplayers();
	
	FWD_CM_EXTRA_ITEMS = CreateMultiForward("jb_cmenu_item_postselect", ET_CONTINUE, FP_CELL, FP_CELL);
	g_fw_warden_assigned = CreateMultiForward("jb_warden_assigned", ET_IGNORE, FP_CELL, FP_CELL);
	g_fw_warden_dropped = CreateMultiForward("jb_warden_dropped", ET_IGNORE, FP_CELL, FP_CELL);\
	g_fw_PlayersVoiceAccessReset = CreateMultiForward("jb_voice_access_reset", ET_IGNORE);

	reset_setting();

	register_jailbreak_logmessages("fw_logmessage_LR_Activated", "Last request is activated!");
}

public clcmd_semiclip(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1) && g_Commander != id)
		return PLUGIN_HANDLED;

	new szArg[2];
	read_argv(1, szArg, 1);

	if(!szArg[0])
	{
		console_print(id, "jb_semiclip <1 - enable / 0 - disable>");
		return PLUGIN_HANDLED;
	}

	new iState = str_to_num(szArg);

	if(iState == ((g_fwd_addtofullpack_post > 0) ? 1:0))
	{
		console_print(id, "Semiclip already %sabled for teammates!", iState ? "en":"dis");
		return PLUGIN_HANDLED;
	}

	toggle_semiclip();
	console_print(id, "Semiclip has been %sabled for teammates!", iState ? "en":"dis");
	return PLUGIN_HANDLED;
}

public clcmd_radio3(id)
{
	if(get_user_team(id) == TEAM_GUARDS)
	{
		Commander_Menu(id);
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public fw_CmdStart_post(id, uc_handle, seed)
{
	if(!check_flag(g_IsUserAlive,id)) return FMRES_IGNORED;
	
	if(check_flag(g_PlayerPaints,id))
	{
		static buttons, iOldButtons; buttons = get_uc(uc_handle ,UC_Buttons);
		iOldButtons = pev(id, pev_oldbuttons);
		
		if(buttons & IN_USE && !(iOldButtons & IN_USE))
		{
			static Float:gametime;
			if(g_fLast_Use[id] >= (gametime=get_gametime()))
			{
				static Float:fOrigin[3], iOrigin[3];
				get_user_origin(id, iOrigin, 2);
				IVecFVec(iOrigin, fOrigin);
				draw_circle(id, fOrigin);
			}
			
			g_fLast_Use[id] = gametime + 0.2;
			
			if(!g_PlayerPainting)
			{
				EnableHamForward(g_Ham_fw_PreThink_post)
			}
			
			fm_get_user_aiming_origin(id, g_fEnd_Origin[id]);
			move_toward_client(id, g_fEnd_Origin[id]);
			set_flag(g_PlayerPainting,id);
		}
		else if(!(buttons & IN_USE) && (iOldButtons & IN_USE))
		{
			remove_flag(g_PlayerPainting,id);
			
			if(!g_PlayerPainting)
			{
				DisableHamForward(g_Ham_fw_PreThink_post)
			}
		}
	}
	return FMRES_IGNORED;
}

draw_circle(id, const Float:fOrigin[3])
{
	static Float:fAngle[3], Float:fStartVec[3], Float:fEndVec[3], iLoops = 0;
	const Float:fCircle_Shift = 30.0;
	
	iLoops = floatround(360.0 / fCircle_Shift);
	
	angle_vector(fAngle, ANGLEVECTOR_RIGHT, fStartVec);
	xs_vec_mul_scalar(fStartVec, 100.0, fStartVec);
	xs_vec_add(fOrigin, fStartVec, fStartVec);
	
	while( iLoops-- > 0 )
	{
		fAngle[1] += fCircle_Shift;
		
		angle_vector(fAngle, ANGLEVECTOR_RIGHT, fEndVec);
		xs_vec_mul_scalar(fEndVec, 100.0, fEndVec);
		xs_vec_add(fOrigin, fEndVec, fEndVec);
		
		draw_line(id, fStartVec, fEndVec)
		
		xs_vec_copy(fEndVec, fStartVec);
	}
}

set_commander_effects(const id)
{
	if(g_VIP_MODEL[0] != EOS)
	{
		cs_set_player_model(id, g_VIP_MODEL);
		set_pev(id, pev_body, g_VIP_MODEL_BODY);
		set_pev(id, pev_skin, g_VIP_MODEL_SKIN);
	}
	
	new type = get_pcvar_num(g_cvar_effects);

	if((type & 3) != 2)
	{
		new szValue[20], iColor[4];
		get_pcvar_string(g_cvar_effects_color, szValue, charsmax(szValue));
		string_to_color(szValue, iColor);
		set_user_rendering(id, kRenderFxGlowShell, iColor[0], iColor[1], iColor[2], kRenderNormal, iColor[3]);
	}

	if(type & 2)
	{
		if(!task_exists(id+TASK_BEAM)) set_task(3.0, "task_beam", id + TASK_BEAM, _, _, "b");
	}
}

remove_commander_effects(const id)
{
	jb_set_user_class_model(id);
	set_user_rendering(id)
	remove_task(id+TASK_BEAM)
}

public task_beam(const taskid)
{
	new id = taskid - TASK_BEAM;
	
	if(!is_user_connected(id)) return;
	
	new iOrigin[3];
	get_user_origin(id, iOrigin);
	
	new szValue[20], iColor[4];
	get_pcvar_string(g_cvar_effects_color, szValue, charsmax(szValue));
	string_to_color(szValue, iColor);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, iOrigin, id);
	write_byte(TE_BEAMCYLINDER);	// TE id
	write_coord(iOrigin[0]);	 	// x
	write_coord(iOrigin[1]);		// y
	write_coord(iOrigin[2]-20);	// z
	write_coord(iOrigin[0]+20);    	// x axis
	write_coord(iOrigin[1]+20);    	// y axis
	write_coord(iOrigin[2]+200);	// z axis
	write_short(g_beaconSpr);		// sprite
	write_byte(10);			// startframe
	write_byte(10);			// framerate
	write_byte(3);			// life
	write_byte(5);	  		// width
	write_byte(8);   			// noise
	write_byte(iColor[0]);  		// red
	write_byte(iColor[1]);   		// green
	write_byte(iColor[2]); 		// blue
	write_byte(iColor[3]);		// brightness
	write_byte(2);			// speed
	message_end();
}

stock string_to_color(const szString[], iColor[4])
{
	new sLeft[4], sString[20];
	formatex(sString, charsmax(sString), szString)
	remove_quotes(sString);
	
	for(new i; i < 4; i++)
	{
		strtok(sString, sLeft, charsmax(sLeft), sString, charsmax(sString), ' ')
		iColor[i] = str_to_num(sLeft);
	}
}

public concmd_paint(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1))
		return 1;
	
	new sTarget[32];
	read_argv(1, sTarget, 31)
	
	new target = cmd_target(id, sTarget, CMDTARGET_ALLOW_SELF | CMDTARGET_NO_BOTS | CMDTARGET_OBEY_IMMUNITY);
	
	if(!target) return 1;
	
	new sName[32];
	get_user_name(target, sTarget, charsmax(sTarget))
	get_user_name(id, sName, charsmax(sName))
	check_flag(g_PlayerPaints,target) ? remove_flag(g_PlayerPaints,target):set_flag(g_PlayerPaints,target);
	
	if(check_flag(g_PlayerPaints, target))
		cprint_chat(0, _, "%L", LANG_PLAYER, "ADMIN_GAVE_PAINT_TO_PLAYER", sName, sTarget);
	else
		cprint_chat(0, _, "%L", LANG_PLAYER, "ADMIN_TOOK_PAINT_FROM_PLAYER", sName, sTarget);
	jb_logmessage_action(check_flag(g_PlayerPaints, target) ? "gave paint to":"took paint from", id, target);
	return 1;
}

public clcmd_paint(id)
{
	if(!check_flag(g_PlayerPaints, id)) return 0;
	
	if(is_aiming_at_sky(id)) return 0;
	
	static sArg[2];
	read_argv(0, sArg, charsmax(sArg))
	
	switch( sArg[0] )
	{
		case '+': 
		{
			if(!g_PlayerPainting)
			{
				EnableHamForward(g_Ham_fw_PreThink_post);
			}
			
			fm_get_user_aiming_origin(id, g_fEnd_Origin[id]);
			move_toward_client(id, g_fEnd_Origin[id]);
			set_flag(g_PlayerPainting,id);
		}
		case '-':
		{
			remove_flag(g_PlayerPainting,id);
			
			if(!g_PlayerPainting)
			{
				DisableHamForward(g_Ham_fw_PreThink_post);
			}
		}
	}
	
	return 0;
}

public fw_player_prethink_post(const id)
{
	if(!check_flag(g_PlayerPaints, id)) return;
	
	if(!check_flag(g_PlayerPainting,id)) return;
	
	if(is_aiming_at_sky(id)) return;
	
	static Float:fStart[3];
	fm_get_user_aiming_origin(id, fStart);
	move_toward_client(id, fStart);
	
	static Float:distance, Float:fGTime;
	distance = get_distance_f(fStart, g_fEnd_Origin[id]);
	fGTime = get_gametime();
	
	if(g_fDrawDelay[id] < fGTime)
	{
		if(distance > 2.0)
		{
			draw_line(id, fStart, g_fEnd_Origin[id])
		}
		
		g_fDrawDelay[id] = get_gametime() + 0.1;
		fm_get_user_aiming_origin(id, g_fEnd_Origin[id]);
	}
}

move_toward_client(id, Float:origin[3])
{		
	static Float:player_origin[3]
	
	pev(id, pev_origin, player_origin)
	
	origin[0] += (player_origin[0] > origin[0]) ? 1.0 : -1.0
	origin[1] += (player_origin[1] > origin[1]) ? 1.0 : -1.0
	origin[2] += (player_origin[2] > origin[2]) ? 1.0 : -1.0
}

fm_get_user_aiming_origin(id, Float:vOrigReturn[3])
{
	static tr2, Float:fOrigin[3], Float:fViewOfs[3];
	tr2 = create_tr2();
	pev(id, pev_origin, fOrigin)
	pev(id, pev_view_ofs, fViewOfs)
	xs_vec_add(fOrigin, fViewOfs, fOrigin)
	
	static Float:fEnd[3], Float:fwd[3];
	pev(id, pev_v_angle, fEnd);
	angle_vector(fEnd, ANGLEVECTOR_FORWARD, fwd);
	
	fEnd[0] = fOrigin[0] + 8192.0 * fwd[0];
	fEnd[1] = fOrigin[1] + 8192.0 * fwd[1];
	fEnd[2] = fOrigin[2] + 8192.0 * fwd[2];
	
	engfunc(EngFunc_TraceLine, fOrigin, fEnd, IGNORE_MISSILE, id, tr2);
	get_tr2(tr2, TR_vecEndPos, vOrigReturn);
	
	free_tr2(tr2)
}

bool:is_aiming_at_sky(index)
{
	static Float:origin[3];
	fm_get_user_aiming_origin(index, origin);
	
	return (engfunc(EngFunc_PointContents, origin) == CONTENTS_SKY) ? true:false;
}

draw_line(id, Float:fStart[3], Float:fEnd[3])
{
	static iColor[3];
	
	if(!is_user_admin(id))
	{
		iColor[0] = iColor[1] = iColor[2] = 0;
		switch( get_user_team(id) )
		{
			case TEAM_PRISONERS: iColor[0] = random_num(150,255);
			case TEAM_GUARDS: iColor[2] = random_num(150,255);
			default: iColor[1] = random_num(150, 255);
		}
	}
	else
	{
		static const PaintColors[][3] = {
			{ 255, 255, 255 },
			{ 255, 255, 0 },
			{ 255, 0, 0 },
			{ 0, 255, 255 },
			{ 0, 0, 255 },
			{ 0, 255, 0 },
			{ 255, 0, 255 },
			{ 50, 150, 50 }
		}
		
		static rand; rand = random(sizeof PaintColors);
		iColor[0] = PaintColors[rand][0];
		iColor[1] = PaintColors[rand][1];
		iColor[2] = PaintColors[rand][2];
	}
	
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_BEAMPOINTS);
	engfunc(EngFunc_WriteCoord, fStart[0]);
	engfunc(EngFunc_WriteCoord, fStart[1]);
	engfunc(EngFunc_WriteCoord, fStart[2] + 1.0);
	engfunc(EngFunc_WriteCoord, fEnd[0]);
	engfunc(EngFunc_WriteCoord, fEnd[1]);
	engfunc(EngFunc_WriteCoord, fEnd[2] + 1.0);
	write_short(g_sprite_lightning);
	write_byte(0);
	write_byte(10);
	write_byte(255);
	write_byte(50); // width
	write_byte(0);
	write_byte(iColor[0]); // r
	write_byte(iColor[1]); // g
	write_byte(iColor[2]); // b
	write_byte(255); // alpha
	write_byte(0);
	message_end();
}

public fw_player_killed(victim, attacker, shouldgib)
{
	remove_flag(g_IsUserAlive,victim);
	remove_flag(g_PlayerPaints,victim);
	
	if(g_PlayerPainting)
	{
		remove_flag(g_PlayerPainting,victim);

		if(!g_PlayerPainting)
		{
			DisableHamForward(g_Ham_fw_PreThink_post);
		}
	}
	
	if(g_Commander == victim)
	{
		remove_commander(victim, WARDEN_DROP_STATE_KILLED);
		
		random_commander();
	}
	
	return HAM_IGNORED;
}

public cmd_mic(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1))
		return 1;
	
	new szTarget[32], sName[32];
	read_argv(1, szTarget, charsmax(szTarget));
	
	get_user_name(id, sName, charsmax(sName));
	
	if(szTarget[0] == '@')
	{
		new szAmount[2];
		read_argv(2, szAmount, charsmax(szAmount))
		new iAmount = str_to_num(szAmount);
		
		new players[MAX_PLAYERS], pnum;
		switch( szTarget[1] )
		{
			case 'C', 'c', 'G', 'g':
			{
				get_players(players, pnum, "che", "CT")
				formatex(szTarget, 31, "All Guards")
			}
			case 'T', 't', 'P', 'p':
			{
				get_players(players, pnum, "che", "TERRORIST")
				formatex(szTarget, 31, "All Prisoners")
			}
			default:
			{
				pnum = g_iMaxplayers;
				for(new i; i < pnum; i++) players[i] = i + 1;
				formatex(szTarget, charsmax(szTarget), "All Players");
			}
		}
		
		switch( iAmount )
		{
			case 0: cprint_chat(0, _, "%L", LANG_PLAYER, "ADMIN_TOOK_VOICE_FROM_GROUP", sName, szTarget);
			default: cprint_chat(0, _, "%L", LANG_PLAYER, "ADMIN_GAVE_VOICE_TO_GROUP", sName, szTarget);
		}
		
		for(new i, target; i < pnum; i++)
		{
			target = players[i];

			if(iAmount > 0)
			{
				set_flag(g_iPlayerVoiceAccess,target);
				continue;
			}
			
			remove_flag(g_iPlayerVoiceAccess,target);
		}
		
		return 1;
	}
	
	new player = cmd_target(id, szTarget, CMDTARGET_OBEY_IMMUNITY | CMDTARGET_ALLOW_SELF | CMDTARGET_NO_BOTS)
	
	if(!player)
		return 1;
	
	new pName[32];
	get_user_name(player, pName, charsmax(pName))
	
	check_flag(g_iPlayerVoiceAccess,player) ? remove_flag(g_iPlayerVoiceAccess,player) : set_flag(g_iPlayerVoiceAccess,player);
	switch( check_flag(g_iPlayerVoiceAccess,player) )
	{
		case false: cprint_chat(0, _, "%L", LANG_PLAYER, "ADMIN_TOOK_VOICE_FROM_PLAYER", sName, pName);
		default: cprint_chat(0, _, "%L", LANG_PLAYER, "ADMIN_GAVE_VOICE_TO_PLAYER", sName, pName);
	}
	
	return 1;
}

public fw_player_spawned(id)
{
	if(!is_user_alive(id))
		return HAM_IGNORED;
	
	set_flag(g_IsUserAlive,id);
	set_flag(g_IsUserSolid,id);
	g_UserSemiClip[ id ] = 0;

	switch( get_user_team(id) )
	{
		case TEAM_GUARDS:
		{
			new players[32], pnum;
			get_players(players, pnum, "he", "CT");

			for(new i, player; i < pnum; i++)
			{
				player = players[ i ];
				set_flag(g_UserSemiClip[ id ], player);
				set_flag(g_UserSemiClip[ player ], id);
			}
		}
		case TEAM_PRISONERS:
		{
			new players[32], pnum;
			get_players(players, pnum, "he", "TERRORIST");

			for(new i, player; i < pnum; i++)
			{
				player = players[ i ];
				set_flag(g_UserSemiClip[ id ], player);
				set_flag(g_UserSemiClip[ player ], id);
			}
		}
	}
	
	remove_flag(g_PlayerQuestioned,id);
	remove_task(id+TASK_ANSWERING);
	
	return HAM_IGNORED;
}

public client_putinserver(id)
{
	set_flag(g_IsUserSolid, id);

	if(g_Commander != 0)
	{
		attach_sprite_toplayer(id, g_commanderSpr, 9999, id);
	}
}

bool:Check_Commander_available(id, bool:bMsg=false, mode=0)
{
	if(!check_flag(g_IsUserAlive,id))
	{
		return false;
	}
	if(jb_get_current_day() != -1)
	{
		if(bMsg) cprint_chat(id, _, "%L", id, "COMMANDER_MENU_NOT_AVAILABLE");
		return false;
	}
	if(jb_get_current_duel() != -1)
	{
		if(bMsg) cprint_chat(id, _, "%L", id, "COMMANDER_MENU_NOT_AVAILABLE");
		return false;
	}
	
	if(mode == 0)
	{
		if(!g_Commander)
		{
			if(bMsg) cprint_chat(id, _, "%L", id, "THERE_IS_NO_COMMANDER");
			return false;
		}
		if(g_Commander != id) 
		{
			if(bMsg) cprint_chat(id, _, "%L", id, "YOURE_NOT_THE_COMMANDER");
			return false;
		}
	}
	return true;
}

public clcmd_question(id)
{
	if(!Check_Commander_available(id, true))
		return;
	
	read_args(g_sQuestion[id], charsmax(g_sQuestion[]))
	remove_quotes(g_sQuestion[id])
	
	client_print(id, print_center, "Type the answer!")
	client_cmd(id, "messagemode Answer")
}

public clcmd_answer(id)
{
	if(!Check_Commander_available(id, true))
		return;
	
	read_args(g_sAnswer[id], charsmax(g_sAnswer[]))
	remove_quotes(g_sAnswer[id])
	
	Show_playersmenu(id)
}

public Show_playersmenu(id)
{
	if(!Check_Commander_available(id, true))
		return;
	
	new players[32], pnum
	get_players(players, pnum, "ache", "TERRORIST");

	if(!pnum)
	{
		return;
	}

	new sText[168];
	
	formatex(sText, charsmax(sText), "\r%L: \y%s^n\r%L: \y%s^n\w%L", id, "QUESTION", g_sQuestion[id], id, "ANSWER", g_sAnswer[id], id, "ASK_THE_QUESTION")
	new iMenu = menu_create(sText, "Ask_handle", true)
	
	formatex(sText, charsmax(sText), "%L", id, "CHANGE_THE_QUESTION");
	menu_additem(iMenu, sText, "Q", 0)
	
	formatex(sText, charsmax(sText), "%L", id, "ASK_ALL_TERRORIST_Q");
	menu_additem(iMenu, sText, "T", 0)
	
	new player, pname[32], pid[16]
	
	for( new i = 0; i < pnum ; i++)
	{
		player = players[i]
		
		get_user_name(player, pname, charsmax(pname));
		num_to_str(get_user_userid(player), pid, charsmax(pid));
		menu_additem(iMenu, pname, pid, 0);
	}
	
	menu_display(id, iMenu)
}

public Ask_handle(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	
	new data[16], pn[4];
	new paccess, Clbk;
	menu_item_getinfo(menu, item, paccess, data, charsmax(data), pn, charsmax(pn), Clbk)
	
	menu_destroy(menu);
	
	if(equal(data, "Q"))
	{
		client_cmd(id, "messagemode Question")
		return PLUGIN_HANDLED;
	}
	
	new szCName[32], Float:fAnsweringTime = floatclamp(get_pcvar_float(g_pcvr_answer_time), 1.0, 60.0);
	get_user_name(id, szCName, charsmax(szCName))
	
	if(equal(data, "T"))
	{
		new players[32], pnum
		get_players(players, pnum, "ache", "TERRORIST")
		
		switch( pnum )
		{
			case 0:
			{
				cprint_chat(id, 'n', "%L", id, "THERE_ARE_NO_TERRORIST");
				return PLUGIN_HANDLED;
			}
			case 1:
			{
				cprint_chat(id, 'n', "%L", id, "THERE_ARE_NO_ENOUGH_TERRORIST");
				return PLUGIN_HANDLED;
			}
		}
		
		for( new i = 0, player; i < pnum ; i++)
		{
			player = players[i];
			
			set_flag(g_PlayerQuestioned,player);
			formatex(g_sQuestion[player], charsmax(g_sQuestion[]), g_sQuestion[id]);
			formatex(g_sAnswer[player], charsmax(g_sAnswer[]), g_sAnswer[id]);
		}
		
		set_task(fAnsweringTime, "task_timetoanswer", TASK_ANSWERING)
		cprint_chat(0, 'n', "%L", LANG_PLAYER, "COMMANDER_ASKED_QUESTION_ALL", szCName)
		cprint_chat(0, 't', "%L", LANG_PLAYER, "WHAT_IS", g_sQuestion[id])
		jb_logmessage_action("Commander delivered a question to prisoners", id);
		log_amx("JAILBREAK COMMANDER %s ASKED ALL-PRISONERS A QUESTION: '%s' ANSWER: '%s'", szCName, g_sQuestion[id], g_sAnswer[id]);
		Show_playersmenu(id);
		return PLUGIN_HANDLED;
	}
	
	new pid = find_player("k", str_to_num(data));

	if(!pid)
	{
		Show_playersmenu(id);
		return PLUGIN_HANDLED;
	}

	set_flag(g_PlayerQuestioned,pid)
	formatex(g_sQuestion[pid], charsmax(g_sQuestion[]), g_sQuestion[id]);
	formatex(g_sAnswer[pid], charsmax(g_sAnswer[]), g_sAnswer[id]);
	
	cprint_chat(0, 'n', "%L", LANG_PLAYER, "COMMANDER_ASKED_PLAYER_QUES", szCName, pn)
	cprint_chat(pid, 'n', "%L", id, "WHAT_IS", g_sQuestion[id])
	
	remove_task(TASK_ANSWERING);
	set_task(fAnsweringTime, "task_timetoanswer", TASK_ANSWERING+pid)
	
	jb_logmessage_action("Commander delivered a question to", id, pid);
	log_amx("JAILBREAK COMMANDER %s ASKED %s A QUESTION: '%s' ANSWER: '%s'", szCName, pn, g_sQuestion[id], g_sAnswer[id]);
	Show_playersmenu(id);
	return PLUGIN_HANDLED;
}

public task_timetoanswer(pid)
{
	if(!g_Commander) return;
	
	pid -= TASK_ANSWERING;
	
	if(!pid) // all prisoners has failed to answer the question!
	{
		cprint_chat(0, 'n', "%L", LANG_PLAYER, "ALL_PLAYERS_FAILED_TO_ANSWER")
		jb_logmessage("All prisoners have failed to answer the question intime!");
		g_PlayerQuestioned = 0;
		return;
	}
	
	if(!(check_flag(g_PlayerQuestioned,pid)))
	{
		remove_task(pid+TASK_ANSWERING)
		return;
	}
	
	new sName[32]
	get_user_name(pid, sName, charsmax(sName))
	cprint_chat(0, 'n', "%L", LANG_PLAYER, "PLAYER_HAS_FAILED_TO_ANSWER", sName)
	remove_flag(g_PlayerQuestioned,pid);
	jb_logmessage_action("Failed to answer the question intime", pid);
}

public client_disconnect(id)
{
	if(id == g_Commander)
	{
		remove_commander(id, WARDEN_DROP_STATE_DISCONNECTED);
		cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_LEFT_SERVER");
		g_Commander = id;
	}
}

public client_remove(id)
{
	remove_flag(g_PlayerQuestioned,id);
	g_iPlayerMute[id] = 0;
	remove_flag(g_PlayerPaints,id);
	remove_flag(g_PlayerPainting,id);
	remove_flag(g_IsUserSolid,id);
	remove_flag(g_IsUserAlive,id);
	g_UserSemiClip[ id ] = 0;
	
	if(!g_PlayerPainting)
	{
		DisableHamForward(g_Ham_fw_PreThink_post);
	}
	
	if(id == g_Commander)
	{
		g_Commander = 0;
		random_commander();
	}
}

public jb_round_start()
{
	g_Cells_State = JB_CELLS_CLOSE;
	reset_setting();
	set_task(0.5, "random_commander");
}

public random_commander()
{
	if(get_pcvar_num(g_cvar_auto_choose) > 0)
	{
		new players[32], pnum;
		get_players(players, pnum, "ahe", "CT");
		
		if(pnum > 0)
		{
			new id = players[random(pnum)];

			new sName[32];
			get_user_name(id, sName, charsmax(sName));
			setup_commander(id, WARDEN_ASSIGNED_STATE_LEGACY);
			cprint_chat(0, _, "%L", LANG_PLAYER, "NEW_COMMANDER_ANNOUNCE", sName);
		}
	}
}

public jb_round_ended()
{
	reset_setting();
}

public fw_voice_listening(receiver, sender, bool:listen)
{
	if(receiver == sender)
		return FMRES_IGNORED;
	
	if(is_user_admin(sender) || g_Commander == sender)
	{
		engfunc(EngFunc_SetClientListening, receiver, sender, true);
		return FMRES_SUPERCEDE;
	}
    
	if(check_flag(g_iPlayerVoiceAccess,sender) && !check_flag(g_iPlayerMute[receiver],sender))
	{
		engfunc(EngFunc_SetClientListening, receiver, sender, true);
		return FMRES_SUPERCEDE;
	}
	
	engfunc(EngFunc_SetClientListening, receiver, sender, false);
	return FMRES_SUPERCEDE;
}

reset_setting()
{
	if(g_Commander > 0)
	{
		remove_commander(g_Commander, WARDEN_DROP_STATE_DEMOTED);
	}

	// disable semiclip for teammates.
	if(g_fwd_addtofullpack_post != 0)
	{
		toggle_semiclip();
	}
	
	g_PlayerPaints = 0;
	g_iPlayerVoiceAccess = 0;
	
	remove_all_medkits();
	
	new players[32], pnum, player;
	get_players(players, pnum);
	
	for(new i; i < pnum; i++)
	{
		player = players[i];
		
		switch( get_user_team(player) )
		{
			case TEAM_GUARDS: set_flag(g_iPlayerVoiceAccess,player);
		}
		
		remove_flag(g_PlayerQuestioned,player);
		
		if(task_exists(player+TASK_ANSWERING))
		{
			remove_task(player+TASK_ANSWERING);
		}
	}

	new iRet;
	ExecuteForward(g_fw_PlayersVoiceAccessReset, iRet);
	
	remove_task(TASK_COUNTDOWN);
}

public fw_logmessage_LR_Activated(const szLogMessage[])
{
	reset_setting();
	
	if(get_pcvar_num(g_pcvr_vc_onlr))
	{
		new guard, prisoner;
		jb_get_current_duel(guard, prisoner);
		set_flag(g_iPlayerVoiceAccess,prisoner);
		cprint_chat(prisoner, _, "%L", prisoner, "LR_VOICE_CHAT");
	}
}

public jb_day_started(iDayid)
{
	reset_setting();
	
	if(get_pcvar_num(g_pcvr_vc_onfunday))
	{
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			set_flag(g_iPlayerVoiceAccess,i);
		}
		
		cprint_chat(0, _, "%L", LANG_PLAYER, "FUNDAY_VOICE_CHAT");
	}
}

public cmd_say(id)
{
	new sLeft[16], sRight[16], Args[64];
	read_args(Args, charsmax(Args));
	remove_quotes(Args);

	strtok(Args, sLeft, charsmax(sLeft), sRight, charsmax(sRight));

	if(equali(sLeft, "/cd") || equali(sLeft, "!cd"))
	{
		if(g_Commander != id && !is_user_admin(id))
		{
			cprint_chat(id, _, "%L", id, "COMMAND_NOACCESS");
			return 1;
		}

		if(task_exists(TASK_COUNTDOWN))
		{
			cprint_chat(id, _, "%L", id, "COUNTDOWN_ALREADY_INPROGRESS");
			return 1;
		}

		new cd;
		switch( (cd = str_to_num(sRight)) )
		{
			case 1..60:
			{
				g_countdown = cd;
				set_task(1.0, "task_countdown", TASK_COUNTDOWN, _, _, "b");

				formatex(Args, charsmax(Args), "%s started a countdown '%d' sec", g_Commander != id ? "commander":"admin", cd);
				jb_logmessage_action(Args, id);
			}
			default: cprint_chat(id, _, "%L", id, "COUNTDOWN_PICKNUM_BETWEEN_1TO60")
		}

		return 1;
	}

	if(!check_flag(g_IsUserAlive,id) || jb_get_current_day() != DAY_NONE || jb_get_current_duel() > DUEL_NONE)
	{
		return 0;
	}
	
	new sName[32];
	get_user_name(id, sName, charsmax(sName));
	
	if(check_flag(g_PlayerQuestioned,id))
	{
		if(equali(Args, g_sAnswer[id]))
		{
			if(task_exists(TASK_ANSWERING)) // if its a group question
			{
				jb_logmessage_action("Answered the question first", id);
				cprint_chat(0, 'n', "%L", LANG_PLAYER, "PLAYER_ANSWERED_FIRST", sName);
				remove_task(TASK_ANSWERING);
				g_PlayerQuestioned = 0;
				return 1;
			}
			
			remove_task(id+TASK_ANSWERING);
			remove_flag(g_PlayerQuestioned,id);
			jb_logmessage_action("Answered the question correctly", id);
			cprint_chat(0, 'n', "%L", LANG_PLAYER, "PLAYER_ANSWERED", sName)
			return 1;
		}
	}
	
	for(new i; i < sizeof commander_cmds; i++)
	{
		if(equali(Args, commander_cmds[i]))
		{
			if(get_user_team(id) != TEAM_GUARDS)
			{
				cprint_chat(id, _, "%L", id, "COMMAND_NOACCESS")
				return 1;
			}
			if(!g_Commander)
			{
				setup_commander(id, WARDEN_ASSIGNED_STATE_PROMOTED);
				cprint_chat(0, _, "%L", LANG_PLAYER, "NEW_COMMANDER_ANNOUNCE", sName);
				return 1;
			}
			if(g_Commander != id)
			{
				get_user_name(g_Commander, sName, charsmax(sName));
				cprint_chat(id, _, "%L", id, "YOURE_NOT_THE_COMMANDER", sName);
				return 1;
			}
			
			remove_commander(id, WARDEN_DROP_STATE_QUIT);
			cprint_chat(0, 'c', "%L", LANG_PLAYER, "COMMANDER_QUIT_COMMANDING", sName, commander_cmds[i])
			return 1;
		}
	}
	
	return 0;
}

setup_commander(const id, const WARDEN_ASSIGNED_STATES:eState)
{
	g_Commander = id;
	set_flag(g_PlayerPaints,id);
	attach_sprite_toplayer(id, g_commanderSpr, 9999);
	set_commander_effects(id);
	jb_logmessage_action("is now the warden!", id);

	new fwReturn;
	ExecuteForward(g_fw_warden_assigned, fwReturn, id, eState);
}

remove_commander(const id, const WARDEN_DROP_STATES:eState)
{
	remove_attachment_fromplayer(id);
	remove_commander_effects(id);
	jb_logmessage_action("is nolonger the warden!", id);
	g_Commander = 0;

	new fwReturn;
	ExecuteForward(g_fw_warden_dropped, fwReturn, id, eState);
}

public task_countdown(taskid)
{
	if(g_countdown)
	{
		g_countdown--;
		new Args[40];
		formatex(Args, charsmax(Args), "countdown '%d' sec left", g_countdown);
		jb_logmessage(Args);
	}
	else
	{
		remove_task(taskid);
		jb_logmessage("countdown has finished!");
	}
}

public jb_mm_itemadded(id, itemid)
{
	if(itemid == g_mm_itemid_warden_menu)
	{
		if(!Check_Commander_available(id,false,1))
		{
			return JB_MENU_ITEM_UNAVAILABLE;
		}
	}
    
	return JB_IGNORED;
}

public jb_mm_itemselected(id, itemid)
{
	if(itemid == g_mm_itemid_mute_menu)
	{
		VoiceMuteMenu(id);
	}

	if(itemid == g_mm_itemid_warden_menu)
	{
		if(!Check_Commander_available(id, true, 1))
			return;
		
		new GName[32];
		get_user_name((g_Commander > 0) ? g_Commander:id, GName, charsmax(GName));
		
		if(!g_Commander)
		{
			setup_commander(id, WARDEN_ASSIGNED_STATE_PROMOTED);
			cprint_chat(0, _, "%L", LANG_PLAYER, "NEW_COMMANDER_ANNOUNCE", GName);
		}
		else if(g_Commander != id)
		{
			cprint_chat(id, _, "%L", id, "YOURE_NOT_THE_COMMANDER", GName);
			return;
		}
		
		Commander_Menu(id);
	}
}

remove_all_medkits()
{
	if(!g_medkits) return;
	
	if(_:FW_TRACEATTACK_FUNC_HC_POST > 0 && _:FW_KILLED_FUNC_HC_POST)
	{
		DisableHamForward(FW_TRACEATTACK_FUNC_HC_POST)
		DisableHamForward(FW_KILLED_FUNC_HC_POST)
	}
	
	g_medkits = 0;
	
	new ent, sGlobalname[32];
	while( ( (ent = engfunc(EngFunc_FindEntityByString, ent, "classname", "func_healthcharger")) > 0) )
	{
		pev(ent, pev_netname, sGlobalname, charsmax(sGlobalname));
		if(equal(sGlobalname, g_medkit_name))
		{
			set_pev(ent, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, ent);
		}
	}
}

drop_medkit(id)
{
	new ent = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "func_healthcharger"));
	
	if(!ent) return;
	
	new Float:fOrigin[3], Float:fOrigin2[3], Float:fVelocity[3];
	velocity_by_aim(id, 250, fVelocity)
	pev(id, pev_origin, fOrigin)
	pev(id, pev_view_ofs, fOrigin2)
	xs_vec_add(fOrigin, fOrigin2, fOrigin)
	
	engfunc(EngFunc_SetOrigin, ent, fOrigin);
	engfunc(EngFunc_SetModel, ent, MEDKIT_W_MDL);
	set_pev(ent, pev_spawnflags, SF_NORESPAWN);
	dllfunc(DLLFunc_Spawn, ent);
	engfunc(EngFunc_SetSize, ent, Float:{-5.0,-5.0,-5.0}, Float:{5.0,5.0,5.0});
	set_pev(ent, pev_velocity, fVelocity);
	fVelocity[0] = 0.0; fVelocity[2] = 0.0; fVelocity[1] = !random(1) ? -360.0:360.0;
	set_pev(ent, pev_avelocity, fVelocity);
	set_pev(ent, pev_friction, 1.4);
	set_pev(ent, pev_netname, g_medkit_name);
	set_pev(ent, pev_owner, id);
	set_pev(ent, pev_takedamage, DAMAGE_YES);
	set_pev(ent, pev_health, 100.0);
	set_pev(ent, pev_dmg_take, 25.0)
	set_pev(ent, pev_solid, SOLID_BBOX);
	set_pev(ent, pev_movetype, MOVETYPE_BOUNCE);
	
	g_medkits ++;
	
	if(g_medkits == 1)
	{
		if(!FW_TRACEATTACK_FUNC_HC_POST)
		{
			DisableHamForward(FW_TRACEATTACK_FUNC_HC_POST = RegisterHam(Ham_TraceAttack, "func_healthcharger", "fw_tattack_func_hc_post", 1));
			DisableHamForward(FW_KILLED_FUNC_HC_POST = RegisterHam(Ham_Killed, "func_healthcharger", "fw_killed_func_hg_pre"));
		}
		
		EnableHamForward(FW_TRACEATTACK_FUNC_HC_POST);
		EnableHamForward(FW_KILLED_FUNC_HC_POST);
	}
	
	set_task(1.2, "reset_velocity", ent);
}

public fw_killed_func_hg_pre(victim, attacker, shouldgib)
{
	new sTargetname[16];
	pev(victim, pev_netname, sTargetname, charsmax(sTargetname))
	
	if(!equal(sTargetname, g_medkit_name)) return HAM_IGNORED;
	
	new Float:fOrigin[3];
	pev(victim, pev_origin, fOrigin)
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BREAKMODEL);
	engfunc(EngFunc_WriteCoord, fOrigin[0]);
	engfunc(EngFunc_WriteCoord, fOrigin[1]);
	engfunc(EngFunc_WriteCoord, fOrigin[2] + 25.0);
	write_coord(16); // size x 
	write_coord(16); // size y 
	write_coord(16); // size z 
	write_coord(random_num(-50,50)); // velocity x 
	write_coord(random_num(-50,50)); // velocity y 
	write_coord(25); // velocity z 
	write_byte(10); // random velocity 
	write_short(g_medkit_gibs_mdl_index); // model index that you want to break
	write_byte(10); // count 
	write_byte(25); // life 
	write_byte(0x02); // flags
	message_end();
	
	emit_sound(victim, CHAN_BODY, MEDKIT_BREAK_SND, VOL_NORM, ATTN_NORM, 0, PITCH_HIGH);
	g_medkits --;
	
	set_pev(victim, pev_flags, FL_KILLME);
	dllfunc(DLLFunc_Think, victim);
	
	return HAM_IGNORED;
}

public fw_tattack_func_hc_post(ent, attacker, Float:damage, Float:direction[3], traceresult, damagebits)
{
	static sTargetname[16];
	pev(ent, pev_netname, sTargetname, charsmax(sTargetname));
	
	if(!equal(sTargetname, g_medkit_name)) return HAM_IGNORED;
	
	if(pev(ent, pev_takedamage) == DAMAGE_YES)
	{
		static Float:fEnd[3];
		get_tr2(traceresult, TR_vecEndPos, fEnd)
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_GUNSHOT);
		engfunc(EngFunc_WriteCoord, fEnd[0]);
		engfunc(EngFunc_WriteCoord, fEnd[1]);
		engfunc(EngFunc_WriteCoord, fEnd[2]);
		message_end();
		
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
		write_byte(TE_SPARKS);
		engfunc(EngFunc_WriteCoord, fEnd[0]);
		engfunc(EngFunc_WriteCoord, fEnd[1]);
		engfunc(EngFunc_WriteCoord, fEnd[2]);
		message_end();
	}
	
	return HAM_IGNORED;
}

public reset_velocity(ent)
{
	if(pev_valid(ent))
	{
		set_pev(ent, pev_velocity, Float:{0.0,0.0,0.0});
		set_pev(ent, pev_avelocity, Float:{0.0,0.0,0.0});
		set_pev(ent, pev_owner, 0);
	}
}

glowing_menu(id)
{
	if(!Check_Commander_available(id, true))
		return;
	
	new sText[128];
	formatex(sText, charsmax(sText), "%L", id, "GLOWING_SET_MENU_TITLE");
	new CMenu = menu_create(sText, "glowing_menu_h",true);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_SPLIT_HALF");
	menu_additem(CMenu, sText, "1", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_SPLIT_3HALF");
	menu_additem(CMenu, sText, "2", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_SPLIT_4HALF");
	menu_additem(CMenu, sText, "3", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_RANDOM_PRIS");
	menu_additem(CMenu, sText, "-2", 0);

	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_GLOW_MENU");
	menu_additem(CMenu, sText, "-6", 0);
	
	menu_display(id, CMenu);
}

public glowing_menu_h(id, menu, item)
{
	if(item == MENU_EXIT || g_Commander != id)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	
	new sData[8], sName[48], iAccess, iCallback;
	menu_item_getinfo(menu, item, iAccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	
	new iInfo = str_to_num(sData);
	
	new GName[32];
	get_user_name(id, GName, charsmax(GName));
	
	menu_destroy(menu);
	
	switch( iInfo )
	{
		case -2:
		{
			static iRandomize_prisoners[MAX_PLAYERS] = { 0,0, ...}, iRandomize_pnum = 0;
			
			if(iRandomize_pnum > 0)
			{
				for(new i = 0, player; i < iRandomize_pnum; i++)
				{
					player = iRandomize_prisoners[i];
					
					if(is_user_connected(player) && check_flag(g_IsUserAlive,player) && get_user_team(player) == TEAM_PRISONERS)
					{
						continue;
					}
					
					iRandomize_prisoners[i--] = iRandomize_prisoners[--iRandomize_pnum];
				}
			}

			if(!iRandomize_pnum)
			{
				get_players(iRandomize_prisoners, iRandomize_pnum, "ahe", "TERRORIST");
			}
			
			if(!iRandomize_pnum)
			{
				cprint_chat(id, _, "%L", id, "THERE_ARE_NO_TERRORIST");
				return PLUGIN_HANDLED;
			}
			
			new randomp, PName[32], slot;

			slot = random(iRandomize_pnum);
			randomp = iRandomize_prisoners[slot];
			iRandomize_pnum--;
			iRandomize_prisoners[slot] = iRandomize_prisoners[iRandomize_pnum];
			
			get_user_name(randomp, PName, charsmax(PName));
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_RANDOM_CHOOSE_PRIS", GName, PName);
			set_user_rendering(randomp, kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 16);
		}
		case -6:
		{
			formatex(sName, charsmax(sName), "%L", id, "GLOW_MENU_TITLE");
			new szColor[22], glowmenu = menu_create(sName, "glowmenu_handler",true);
			
			formatex(szColor, charsmax(szColor), "%L", id, "RED");
			menu_additem(glowmenu, szColor);
			formatex(szColor, charsmax(szColor), "%L", id, "BLUE");
			menu_additem(glowmenu, szColor);
			formatex(szColor, charsmax(szColor), "%L", id, "GREEN");
			menu_additem(glowmenu, szColor);
			formatex(szColor, charsmax(szColor), "%L", id, "YELLOW");
			menu_additem(glowmenu, szColor);
			formatex(szColor, charsmax(szColor), "%L", id, "PURPLE");
			menu_additem(glowmenu, szColor);
			formatex(szColor, charsmax(szColor), "%L", id, "PINK");
			menu_additem(glowmenu, szColor);
			formatex(szColor, charsmax(szColor), "%L", id, "UNGLOW");
			menu_additem(glowmenu, szColor)
			
			menu_setprop(glowmenu, MPROP_EXIT, MEXIT_ALL)
			
			menu_display(id, glowmenu);
			return PLUGIN_HANDLED;
		}
		case 1,2,3:
		{
			new players[32], pnum;
			get_players(players, pnum, "ahe", "TERRORIST");
			
			if(pnum < 2 && iInfo == 1)
			{
				cprint_chat(id, _, "%L", id, "COMMANDER_CANT_SPLIT_INHALF")
				return PLUGIN_HANDLED;
			}
			else if(pnum < 3 && iInfo == 2)
			{
				cprint_chat(id, _, "%L", id, "COMMANDER_CANT_SPLIT_INTO_3")
				return PLUGIN_HANDLED;
			}
			else if(pnum < 4 && iInfo == 3)
			{
				cprint_chat(id, _, "%L", id, "COMMANDER_CANT_SPLIT_INTO_4")
				return PLUGIN_HANDLED;
			}
			
			new gt, t;
			switch( iInfo )
			{
				case 1:
				{
					gt = pnum / 2;  //  4 / 2 = 2 
					cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_SPLIT_INMATES_INHALF", GName);
				}
				case 2:
				{
					gt = pnum / 3;  //  9 / 3 = 3
					cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_SPLIT_INMATES_INTO3", GName);
				}
				case 3:
				{
					gt = pnum / 4; //  12 / 4 = 3
					cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_SPLIT_INMATES_INTO4", GName);
				}
			}
			
			for(new i; i < pnum; i++)
			{
				++t;
				
				switch( iInfo )
				{
					case 1:
					{
						if(t <= gt) // fill red
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 0, 0, 200);
						}
						else // fill blue
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 200, 0, 0);
						}
					}
					case 2:
					{
						if(t <= gt) // fill red
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 0, 0, 200);
						}
						else if(t <= gt * 2) // fill blue
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 200, 0, 0);
						}
						else if(t <= gt * 3) // fill green
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 0, 255, 0, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 200, 0, 0);
						}
					}
					case 3:
					{
						if(t <= gt) // fill red
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 0, 0, 255, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 0, 0, 200);
						}
						else if(t <= gt * 2) // fill blue
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 255, 0, 0, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 200, 0, 0);
						}
						else if(t <= gt * 3) // fill green
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 0, 255, 0, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 200, 0, 0);
						}
						else if(t <= gt * 4) // fill yellow
						{
							set_user_rendering(players[i], kRenderFxGlowShell, 255, 255, 0, kRenderNormal, 50);
							Screen_Fade(players[i], 1.0, 1.0, 200, 200, 0);
						}
					}
				}
			}
		}
	}
	
	glowing_menu(id);
	return PLUGIN_HANDLED;
}

Commander_Menu(id, iPage=0)
{
	if(!Check_Commander_available(id, true))
		return;
	
	new sText[128];
	formatex(sText, charsmax(sText), "%L", id, "COMMANDER_MENU_TITLE");
	new CMenu = menu_create(sText, "Commander_Menu_Handle",true);
	
	formatex(sText, charsmax(sText), "%L", id, (g_Cells_State == JB_CELLS_CLOSE) ? "CMD_MENU_ITEM_OPENCELLS":"CMD_MENU_ITEM_CLOSECELLS");
	menu_additem(CMenu, sText, "-10", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_PAINTMENU");
	menu_additem(CMenu, sText, "-8", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_GLOWINGMENU");
	menu_additem(CMenu, sText, "-6", 0);
	
	new maxmedkits = get_pcvar_num(g_pcvar_max_medkits);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_DROP_MEDKITS", g_medkits, maxmedkits)
	menu_additem(CMenu, sText, "-4", g_medkits >= maxmedkits ? (1<<26):0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_ASK_QUESTION");
	menu_additem(CMenu, sText, "-5", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_VOICE_MENU");
	menu_additem(CMenu, sText, "-3", 0);
	
	formatex(sText, charsmax(sText), "%L", id, "CMD_MENU_ITEM_QUIT_CMDING");
	menu_additem(CMenu, sText, "-9", 0);

	formatex(sText, charsmax(sText), "%L", id, !g_fwd_addtofullpack_post ? "CMD_MENU_ITEM_ENABLE_SEMICLIP" : "CMD_MENU_ITEM_DISABLE_SEMICLIP");
	menu_additem(CMenu, sText, "-11", 0);
	
	for(new i, loop=CM_EXTRA_ITEMS, szString[WARDEN_MENU_ITEM_NAME_LENGTH], szInfo[16]; i < loop; i++)
	{
		num_to_str(i, szInfo, charsmax(szInfo));
		ArrayGetString(ARRAY_CM_EXTRA_ITEMS, i, szString, charsmax(szString));
		if(szString[0] == EOS) continue;
		
		format(szString, charsmax(szString), "%L", id, szString);
		menu_additem(CMenu, szString, szInfo, 0);
	}
	
	
	menu_display(id, CMenu, iPage);
}

public Commander_Menu_Handle(id, menu, item)
{
	if(item == MENU_EXIT || g_Commander != id)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	
	new sData[16], sName[48], iAccess, iCallback, iNull, iPage;
	menu_item_getinfo(menu, item, iAccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	player_menu_info(id, iNull, iNull, iPage);
	
	new iInfo = str_to_num(sData);
	
	new GName[32];
	get_user_name(id, GName, charsmax(GName));
	
	menu_destroy(menu);
	
	switch( iInfo )
	{
		case -6:
		{
			glowing_menu(id);
		}
		case -9:
		{
			remove_commander(id, WARDEN_DROP_STATE_QUIT);
			cprint_chat(0, 'c', "%L", LANG_PLAYER, "COMMANDER_QUIT_COMMANDING", GName, commander_cmds[random(sizeof commander_cmds)])
			return PLUGIN_HANDLED;
		}
		case -8:
		{
			new players[32], pnum;
			get_players(players, pnum, "ach");
			if(pnum <= 0)
			{
				cprint_chat(id, _, "%L", id, "THERE_ARE_NO_PLAYERS")
				return PLUGIN_HANDLED;
			}
			
			new szText[64];
			formatex(szText, charsmax(szText), "%L", LANG_PLAYER, "PAINT_MENU_TITLE");
			new pmenu = menu_create(szText, "paint_menu_handler",true);
			
			get_user_name(id, sName, charsmax(sName));
			format(sName, charsmax(sName),"%s%s", check_flag(g_PlayerPaints, id) ? "\y":"\r", sName);
			num_to_str(get_user_userid(id), sData, charsmax(sData));
			menu_additem(pmenu, sName, sData, 0);

			for(new i = 0, player; i < pnum; i++)
			{
				player = players[i];

				if(player == id) continue;

				get_user_name(player, sName, charsmax(sName));
				format(sName, charsmax(sName),"%s%s", check_flag(g_PlayerPaints, player) ? "\y":"\r", sName);
				num_to_str(get_user_userid(player), sData, charsmax(sData));
				menu_additem(pmenu, sName, sData, 0);
			}
			
			if(!menu_display(id, pmenu))
			{
				menu_destroy(pmenu);
			}
		}
		case -10:
		{
			g_Cells_State = (g_Cells_State == JB_CELLS_CLOSE) ? JB_CELLS_OPEN : JB_CELLS_CLOSE;
			jb_cells(g_Cells_State);
			
			switch( g_Cells_State ) {
				case JB_CELLS_OPEN: cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_OPEN_CELLS", GName);
				case JB_CELLS_CLOSE: cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_CLOSED_CELLS", GName);
			}

			Commander_Menu(id, iPage);
		}
		case -3:
		{
			VoiceAccessCategoriesMenu(id);
		}
		case -4:
		{
			drop_medkit(id);
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_DROPPED_MEDKITS", GName);
			Commander_Menu(id, iPage);
		}
		case -5: { client_cmd(id, "messagemode Question"); }
		case -11:
		{
			toggle_semiclip();

			cprint_chat(0, _, "%L", LANG_PLAYER, !g_fwd_addtofullpack_post ? "COMMANDER_DISABLED_SEMICLIP" : "COMMANDER_ENABLED_SEMICLIP", GName);
			Commander_Menu(id, iPage);
		}
		default:
		{
			new fwReturn;
			ExecuteForward(FWD_CM_EXTRA_ITEMS, fwReturn, id, iInfo);

			if(fwReturn >= JB_HANDLED)
			{
				return PLUGIN_HANDLED;
			}

			Commander_Menu(id, iPage);
		}
	}
	return PLUGIN_HANDLED;
}

toggle_semiclip()
{
	if(!g_fwd_addtofullpack_post)
	{
		g_IsUserSolid = 0xFFFFFFFF;
		g_fwd_addtofullpack_post = register_forward(FM_AddToFullPack, "fw_addtofullpack_post", true);
		EnableHamForward(g_fw_PlayerSemiClipStart);
		EnableHamForward(g_fw_PlayerSemiClipEnd);
	}
	else if(g_fwd_addtofullpack_post != 0)
	{
		unregister_forward(FM_AddToFullPack, g_fwd_addtofullpack_post, true);
		g_fwd_addtofullpack_post = 0;
		DisableHamForward(g_fw_PlayerSemiClipStart);
		DisableHamForward(g_fw_PlayerSemiClipEnd);
	}
}

public fw_PlayerSemiclip_Start(id)
{
	if (!check_flag(g_IsUserAlive,id))
		return;

	static i;
	for (i = 1; i <= g_iMaxplayers; i++)
	{
		if (!check_flag(g_IsUserAlive,i) || i == id || !check_flag(g_IsUserSolid,i) || !check_flag(g_UserSemiClip[id],i))
			continue;

		set_pev(i, pev_solid, SOLID_NOT);
		remove_flag(g_IsUserSolid, i);
	}
}

public fw_PlayerSemiclip_End(id)
{
	if (!check_flag(g_IsUserAlive,id))
		return;

	static i;
	for (i = 1; i <= g_iMaxplayers; i++)
	{
		if (!check_flag(g_IsUserAlive,i) || check_flag(g_IsUserSolid,i) || !check_flag(g_UserSemiClip[id],i))
			continue;

		set_pev(i, pev_solid, SOLID_SLIDEBOX);
		set_flag(g_IsUserSolid, i);
	}
}

public fw_addtofullpack_post(estate, e, ent, host, flags, player, pSet)
{
	if(!g_fwd_addtofullpack_post || !check_flag(g_IsUserAlive,host)) return;

	if(player && (1 <= e <= g_iMaxplayers) && check_flag(g_UserSemiClip[host],e))
	{
		set_es(estate, ES_Solid, SOLID_NOT);
	}
}

public paint_menu_handler(id, menu, item)
{
	if(item == MENU_EXIT || g_Commander != id)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new sData[24], sName[48], iAccess, iCallback;
	menu_item_getinfo(menu, item, iAccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	
	menu_destroy(menu);
	
	new player = find_player("k", str_to_num(sData));
	
	if(!is_user_connected(player))
	{
		return PLUGIN_HANDLED;
	}
	
	check_flag(g_PlayerPaints, player) ? remove_flag(g_PlayerPaints,player):set_flag(g_PlayerPaints,player);
	
	if(id == player) 
	{
		switch( check_flag(g_PlayerPaints, player) > 0 ? true:false )
		{
			case true: cprint_chat(id, _, "%L", id, "COMMANDER_GAVE_PAINT_HIMSELF");
			default: cprint_chat(id, _, "%L", id, "COMMANDER_TOOK_PAINT_HIMSELF");
		}
		return PLUGIN_HANDLED;
	}
	
	new szPName[32];
	get_user_name(player, szPName, charsmax(szPName));
	get_user_name(id, sName, charsmax(sName));
	
	switch( check_flag(g_PlayerPaints, player) > 0 ? true:false )
	{
		case true: cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GAVE_PAINT_PLAYER", sName, szPName);
		default: cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_TOOK_PAINT_PLAYER", sName, szPName);
	}
	
	return PLUGIN_HANDLED;
}

public glowmenu_handler(id, menu, item)
{
	if(item == MENU_EXIT || g_Commander != id)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new iColor[3];
	
	switch( item )
	{
		case 0: iColor[0] = 200; // red
		case 1: iColor[2] = 200; // blue
		case 2: iColor[1] = 200; // green
		case 3: { iColor[0] = 200; iColor[1] = 200; } // yellow
		case 4: { iColor[0] = 120; iColor[2] = 120; } // purple
		case 5: { iColor[0] = 230; iColor[1] = 100; iColor[2] = 180; } // pink
	}
	
	new target, body;
	get_user_aiming(id, target, body, 2500);
	
	if((1 <= target <= g_iMaxplayers) && check_flag(g_IsUserAlive,target))
	{
		new sName[32], sTarget[32];
		get_user_name(id, sName, charsmax(sName))
		get_user_name(target, sTarget, charsmax(sTarget))
		if(item == 6)
		{
			set_user_rendering(target);
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_UNGLOWED_PLAYER", sName, sTarget)
		}
		else
		{
			new szColor[32], pCallback;
			menu_item_getinfo(menu, item, body, "", 0, szColor, charsmax(szColor), pCallback);
			set_user_rendering(target, kRenderFxGlowShell, iColor[0], iColor[1], iColor[2], kRenderNormal, 16)
			Screen_Fade(target, 2.0, 2.0, iColor[0], iColor[1], iColor[2]);
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GLOWED_PLAYER", sName, sTarget, szColor)
		}
	}
	else { client_print(id, print_center, "%L", id, "AIM_ON_PLAYER_TO_GLOW"); }
	
	menu_display(id, menu);
	return PLUGIN_HANDLED;
}

public VoiceAccessCategoriesMenu(id)
{
	if(id != g_Commander && !is_user_admin(id))
    {
    	return PLUGIN_HANDLED;
    }
    
	new sText[128];
	formatex(sText, charsmax(sText), "%L", id, id == g_Commander ? "COMMANDER_VOICE_CATEGORIES_MENU" : "ADMIN_VOICE_CATEGORIES_MENU");
	new MTalk = menu_create(sText, "VoiceAccessCategoriesMenu_h",true);
	
	for(new i = 0, loop=sizeof g_szVoiceCategoriesMenu_items; i < loop; i++)
	{
		formatex(sText, charsmax(sText), "%L", id, g_szVoiceCategoriesMenu_items[i]);
		menu_additem(MTalk, sText, "", 0);
	}
	
	menu_display(id, MTalk);
	return PLUGIN_HANDLED;
}

public VoiceAccessCategoriesMenu_h(id, menu, item)
{
	if(item == MENU_EXIT || !is_user_connected(id) || (g_Commander != id && !is_user_admin(id)))
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	menu_destroy(menu);
	
	new sCName[32], i, players[MAX_PLAYERS], pnum;
	get_user_name(id, sCName, charsmax(sCName));
	
	switch( item )
	{
		case VOICE_COMMANDER:
		{
			g_iPlayerVoiceAccess = 0;
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_VOICE_ONLY", sCName);
		}
		case VOICE_ALL:
		{
			for(i = 1; i <= g_iMaxplayers; i++)
			{
				set_flag(g_iPlayerVoiceAccess,i);
			}
			
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GAVE_VOICE_ALL", sCName);
		}
		case VOICE_CT:
		{
			get_players(players, pnum, "e", "CT");
			
			for(i = 0; i < pnum; i++)
			{
				set_flag(g_iPlayerVoiceAccess,players[i]);
			}
			
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GAVE_VOICE_CT", sCName);
		}
		case VOICE_CTONLY:
		{
			g_iPlayerVoiceAccess = 0;
			get_players(players, pnum, "e", "CT");
			
			for(i = 0; i < pnum; i++)
			{
				set_flag(g_iPlayerVoiceAccess,players[i]);
			}
			
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GAVE_VOICE_CT_ONLY", sCName);
		}
		case VOICE_TT:
		{
			get_players(players, pnum, "e", "TERRORIST");
			
			for(i = 0; i < pnum; i++)
			{
				set_flag(g_iPlayerVoiceAccess,players[i]);
			}
			
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GAVE_VOICE_TT", sCName);
		}
		case VOICE_TTONLY:
		{
			g_iPlayerVoiceAccess = 0;
			get_players(players, pnum, "e", "TERRORIST");
			
			for(i = 0; i < pnum; i++)
			{
				set_flag(g_iPlayerVoiceAccess,players[i]);
			}
			
			cprint_chat(0, _, "%L", LANG_PLAYER, "COMMANDER_GAVE_VOICE_TT_ONLY", sCName);
		}
		case VOICE_PLAYER:
		{
			VoiceAccessMenu(id);
			return PLUGIN_HANDLED;
		}
	}
	
	set_flag(g_iPlayerVoiceAccess,id);
	VoiceAccessCategoriesMenu(id);
	return PLUGIN_HANDLED;
}

public Clcmd_VoiceMuteMenu(id)
{
	VoiceMuteMenu(id);
	return PLUGIN_HANDLED;
}

VoiceMuteMenu(id, iPage=0)
{
	new sText[64], name[32], iMenuItems, sInfo[3];
	new MuteMenu = menu_create("Mute or unmute a player!", "VoiceMuteMenu_Handler");
	
	new players[32], pnum;
	get_players(players, pnum);
	
	for(new a = 0, player; a < pnum; a++)
	{
		player = players[a];
		
		if(is_user_admin(player) || player == g_Commander || id == player)
			continue;
		
		get_user_name(player, name, charsmax(name));
		formatex(sText, charsmax(sText), "%s     %s%L", name, id, check_flag(g_iPlayerMute[id],player) ? "\r":"\w", check_flag(g_iPlayerMute[id],player) ? "MUTED":"HAS_VOICECHAT");
		num_to_str(player, sInfo, charsmax(sInfo));
		menu_additem(MuteMenu, sText, sInfo, 0);
		iMenuItems++;
	}
	
	if(!iMenuItems)
	{
		menu_destroy(MuteMenu);
		return;
	}

	menu_display(id, MuteMenu, iPage);
}

public VoiceMuteMenu_Handler(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new sData[3], sName[64], sAccess, sCallback;
	menu_item_getinfo(menu, item, sAccess, sData, charsmax(sData), sName, charsmax(sName), sCallback);
	menu_destroy(menu);
	
	new player = str_to_num(sData)
	
	if(!is_user_connected(player))
    {
		VoiceMuteMenu(id);
		return PLUGIN_HANDLED;
    }
    
	check_flag(g_iPlayerMute[id],player) ?
	remove_flag(g_iPlayerMute[id],player) :
	set_flag(g_iPlayerMute[id],player);
	
	new iNull, iNewMenu, iPage;
	if(player_menu_info(id, iNull, iNewMenu, iPage) && iNewMenu == menu)
	{
		VoiceMuteMenu(id, iPage);
		return PLUGIN_HANDLED;
	}

	VoiceMuteMenu(id);
	return PLUGIN_HANDLED;
}

VoiceAccessMenu(id, iPage=0)
{
	new sText[64], MPTalk, players[32], pnum, sInfo[3], name[32], player, iMenuItems = 0;
	MPTalk = menu_create(id == g_Commander ? "COMMANDER_PLAYER_VOICE_MENU" : "ADMIN_PLAYER_VOICE_MENU", "VoiceAccessMenu_Handle", true);
	
	get_players(players, pnum);
	
	for(new a = 0; a < pnum; a++)
	{
		player = players[a];
		
		if(is_user_admin(player) || player == g_Commander || player == id)
			continue;
		
		get_user_name(player, name, charsmax(name));
		formatex(sText, charsmax(sText), "%s     %L", name, id, check_flag(g_iPlayerVoiceAccess,player) ? "HAS_VOICECHAT":"MUTED");
		num_to_str(player, sInfo, charsmax(sInfo));
		menu_additem(MPTalk, sText, sInfo, 0);
		iMenuItems++;
	}
	
	if(!iMenuItems)
	{
		menu_destroy(MPTalk);
		return;
	}

	menu_display(id, MPTalk, iPage);
}

public VoiceAccessMenu_Handle(id, menu, item)
{
	if(item == MENU_EXIT || !is_user_connected(id) || (g_Commander != id && !is_user_admin(id)))
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new sData[3], sName[64], sAccess, sCallback
	menu_item_getinfo(menu, item, sAccess, sData, charsmax(sData), sName, charsmax(sName), sCallback);
	menu_destroy(menu);
	
	new player = str_to_num(sData)
	
	if(!is_user_connected(player))
    {
		VoiceAccessMenu(id);
		return PLUGIN_HANDLED;
    }
	
	new GuarName[32], PrisName[32];
	get_user_name(id, GuarName, charsmax(GuarName));
	get_user_name(player, PrisName, charsmax(PrisName));
	
	if(check_flag(g_iPlayerVoiceAccess,player))
	{
		remove_flag(g_iPlayerVoiceAccess,player);
		cprint_chat(0, _, "%L", LANG_PLAYER, (id != g_Commander) ? "ADMIN_TOOK_PLAYER_VOICE":"COMMANDER_TOOK_PLAYER_VOICE", GuarName, PrisName);
	}
	else
	{
		set_flag(g_iPlayerVoiceAccess,player);
		cprint_chat(0, _, "%L", LANG_PLAYER, (id != g_Commander) ? "ADMIN_GAVE_PLAYER_VOICE":"COMMANDER_GAVE_PLAYER_VOICE", GuarName, PrisName);
	}

	new iNull, iNewMenu, iPage;
	if(player_menu_info(id, iNull, iNewMenu, iPage) && iNewMenu == menu)
	{
		VoiceAccessMenu(id, iPage);
		return PLUGIN_HANDLED;
	}

	VoiceAccessMenu(id);
	return PLUGIN_HANDLED;
}

remove_attachment_fromplayer(plr)
{
	message_begin(MSG_ALL, SVC_TEMPENTITY);
	write_byte(TE_KILLPLAYERATTACHMENTS);
	write_byte(plr);
	message_end();
}

attach_sprite_toplayer(plr, mindex, life, host=0)
{
	message_begin(!host ? MSG_ALL : MSG_ONE, SVC_TEMPENTITY, _, host);
 	write_byte(TE_PLAYERATTACHMENT);
 	write_byte(plr);
 	write_coord(70);
 	write_short(mindex);
 	write_short(life * 10);
	message_end();
}

Screen_Fade(id, Float:fDuration, Float:fHoldTime, r, g, b)
{
	static iMSG_ScreenFade = 0; if( !iMSG_ScreenFade ) iMSG_ScreenFade = get_user_msgid("ScreenFade");
	message_begin(MSG_ONE_UNRELIABLE, iMSG_ScreenFade, _, id);
	write_short(floatround(4096 * fDuration));  // 1 << 12 = 4096
	write_short(floatround(4096 * fHoldTime));
	write_short(0x0000); // FFADE_IN = 0x0000
	write_byte(r);
	write_byte(g);
	write_byte(b);
	write_byte(200);
	message_end();
}
