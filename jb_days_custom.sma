/* Plugin generated by AMXX-Studio */

#define REGAMEDLL

#include <amxmodx>
#include <hamsandwich>
#include <fakemeta>
#include <engine>
#include <fun>
#include <jailbreak_core>
#include <cstrike>
#include <screenfade_util>
#include <cs_player_models_api>
#include <jb_minigames_core>
#include <npc_library>

#if defined REGAMEDLL
#include <reapi>
#else
#include <orpheu>
#endif

#define PLUGIN "[JB] Custom Days"
#define AUTHOR "Natsheh"

#define OFFSET_TEAM	114
#define fm_get_user_team(%1)	get_pdata_int(%1,OFFSET_TEAM)
#define fm_set_user_team(%1,%2)	set_pdata_int(%1,OFFSET_TEAM,%2)

#define Invalid_Message_Handler INVALID_HANDLE

#define WEAPON_LINUXDIFF 4
const m_iWeaponOwner = 41

#if !defined OBS_IN_EYE
#define OBS_IN_EYE 4
#endif

#define PEV_DODGEBALL_LAST_ENT_HIT pev_euser4

enum DAYS_VARS
{
	DAY_NAME[32],
	Float:DAY_LENGTH
}

new const DAYS_INFO[][DAYS_VARS] = {
	{"Knives Day",	0.0	}, // 100 %  // cts vs ts.
	{"Deathmatch Day", 3.0	}, // 100 % // ts vs ts
	{"ScoutKnivez Day", 0.0	}, // 100 % // ts vs ts
	{"Mario Day",	4.0	}, // 100 % // ts vs ts
	{"USP-Ninja Day", 0.0	}, // 100 % // free for all
	{"Dodgeball Day", 0.0	}, // 100 % // free for all
	{"Snowball Day", 0.0	}, // 100 % // ts vs ts
	{"Sniper Day",	0.0	}, // 100 % // cts vs ts (cts has awp and ts has glock's 18)
	{"HideNseek Day", 0.0	}, // 100 % // cts vs ts
	{"Zombies Day",	 4.0	}, // 100 % // cts(Zombies) vs ts
	{"Nightcrawlers Day",4.0}, // 100 % // cts(nightcrawlers) vs ts ( ! )
	{"Space Day",	0.0	} //  100 % // cts vs ts (cts(awp) vs ts(scout))
}

new const MINIGAMES_NAME[][] = {
	"Mario",
	"DodgeBall",
	"SnowBall"
}

enum(+=1)
{
	MINIGAME_MARIO = 0,
	MINIGAME_DODGEBALL,
	MINIGAME_SNOWBALL
}

new const Day_EndType:DAYS_ENDTYPE[] = {
	DAY_ONE_SURVIVOR,
	DAY_TIMER,
	DAY_ONE_SURVIVOR,
	DAY_ONE_SURVIVOR,
	DAY_ONE_SURVIVOR,
	DAY_ONE_SURVIVOR,
	DAY_ONE_SURVIVOR,
	DAY_GUARDS_VS_PRISONERS,
	DAY_GUARDS_VS_PRISONERS,
	DAY_TIMER,
	DAY_GUARDS_VS_PRISONERS,
	DAY_GUARDS_VS_PRISONERS
}

enum (+=1)
{
	DAY_KNIVES = 0,
	DAY_DEATHMATCH,
	DAY_SCOUTKNIVEZ,
	DAY_MARIO,
	DAY_USPNINJA,
	DAY_DODGEBALL,
	DAY_SNOWBALL,
	DAY_SNIPER,
	DAY_HNS,
	DAY_ZOMBIES,
	DAY_NIGHTCRAWLER,
	DAY_SPACE,
	
	DAYS_MAX
}

new iDAYS_ID[DAYS_MAX], iMINIGAMES_ID[sizeof MINIGAMES_NAME];

#define WPN_PRIMARY	1
#define WPN_SECONDARY	2
#define WPN_KNIFE	3
#define WPN_NADE	4

new user_weapons[33][4]

enum WEAPONS_PARAMS
{
	WEAPON_NAME[32],
	WEAPON_ID[24],
	WEAPON_BPAMMO,
	WEAPON_TYPE
}

new const WEAPONS_INFO[][WEAPONS_PARAMS] = {
	{ "USP", "weapon_usp", 100, WPN_SECONDARY },
	{ "Glock18", "weapon_glock18", 120, WPN_SECONDARY },
	{ "Deagle", "weapon_deagle", 35, WPN_SECONDARY },
	{ "P228", "weapon_p228", 52, WPN_SECONDARY },
	{ "Five~Seven", "weapon_fiveseven", 100, WPN_SECONDARY },
	{ "Elite", "weapon_elite", 120, WPN_SECONDARY },
	{ "M3", "weapon_m3", 32, WPN_PRIMARY },
	{ "Xm1014", "weapon_xm1014", 32, WPN_PRIMARY },
	{ "MP5-Navy", "weapon_mp5navy", 120, WPN_PRIMARY },
	{ "TMP", "weapon_tmp", 120, WPN_PRIMARY },
	{ "Mac10", "weapon_mac10", 100, WPN_PRIMARY },
	{ "P90", "weapon_p90", 100, WPN_PRIMARY },
	{ "UMP45", "weapon_ump45", 100, WPN_PRIMARY },
	{ "FAMAS", "weapon_famas", 90, WPN_PRIMARY },
	{ "GALIL", "weapon_galil", 90, WPN_PRIMARY },
	{ "Scout", "weapon_scout", 90, WPN_PRIMARY },
	{ "M4A1", "weapon_m4a1", 90, WPN_PRIMARY },
	{ "AK47", "weapon_ak47", 90, WPN_PRIMARY },
	{ "AUG", "weapon_aug", 90, WPN_PRIMARY },
	{ "SG552", "weapon_sg552", 90, WPN_PRIMARY },
	{ "AWP", "weapon_awp", 30, WPN_PRIMARY },
	{ "G3SG1", "weapon_g3sg1", 90, WPN_PRIMARY },
	{ "SG550", "weapon_sg550", 90, WPN_PRIMARY }
}

enum
{
	WPN_USP = 0, WPN_GLOCK, WPN_DEAGLE, WPN_P228, WPN_FIVESEVEN, WPN_ELITE, WPN_M3,
	WPN_XM1014, WPN_MP5NAVY, WPN_TMP, WPN_MAC10, WPN_P90, WPN_UMP45, WPN_FAMAS,
	WPN_GALIL, WPN_SCOUT, WPN_M4A1, WPN_AK47, WPN_AUG, WPN_SG552, WPN_AWP, WPN_G3SG1, WPN_SG550
}

new W_SNOW_BALL_MDL[64] = "models/jailbreak/w_snowball.mdl";
new V_SNOW_BALL_MDL[64] = "models/jailbreak/v_snowball.mdl";
new P_SNOW_BALL_MDL[64] = "models/jailbreak/p_snowball.mdl";
new SNOWBALL_SPLASH_SPR[64] = "sprites/bhit.spr";
new SNOWBALL_CHILL_SND[64] = "jailbreak/sb_chill.wav";
new SNOWBALL_UNCHILL_SND[64] = "jailbreak/sb_unchill.wav";

new const SNOWFLAKE_ENTITY[] = "snow_splash";
new const SNOWBALL_ENTITY[] = "snowball";
#define SNOWFLAKE_ID 45672
#define PEV_SNOWFLAKE_LIFE pev_fuser4

#define PEV_IDENTITY pev_iuser4

new W_DODGEBALL_MDL[64] = "models/jailbreak/w_dodgeball.mdl";
new V_DODGEBALL_MDL[64] = "models/jailbreak/v_dodgeball.mdl";
new P_DODGEBALL_MDL[64] = "models/jailbreak/p_dodgeball.mdl";
new DODGEBALL_HIT_SND[64] = "jailbreak/dodgeball_hit.wav";
new const DODGEBALL_ENTITY[] = "dodgeball";
new g_WorldDodgeballModelBody;

new const sound_pain[][] = { "player/pl_pain2.wav","player/pl_pain4.wav","player/pl_pain5.wav","player/pl_pain6.wav","player/pl_pain7.wav" }
new const sound_hit[][] = { "player/pl_snow1.wav","player/pl_snow2.wav","player/pl_snow3.wav","player/pl_snow4.wav","player/pl_snow5.wav","player/pl_snow6.wav" }

new const Float:size[][3] = {
	{0.0, 0.0, 1.0}, {0.0, 0.0, -1.0}, {0.0, 1.0, 0.0}, {0.0, -1.0, 0.0}, {1.0, 0.0, 0.0}, {-1.0, 0.0, 0.0}, {-1.0, 1.0, 1.0}, {1.0, 1.0, 1.0}, {1.0, -1.0, 1.0}, {1.0, 1.0, -1.0}, {-1.0, -1.0, 1.0}, {1.0, -1.0, -1.0}, {-1.0, 1.0, -1.0}, {-1.0, -1.0, -1.0},
	{0.0, 0.0, 2.0}, {0.0, 0.0, -2.0}, {0.0, 2.0, 0.0}, {0.0, -2.0, 0.0}, {2.0, 0.0, 0.0}, {-2.0, 0.0, 0.0}, {-2.0, 2.0, 2.0}, {2.0, 2.0, 2.0}, {2.0, -2.0, 2.0}, {2.0, 2.0, -2.0}, {-2.0, -2.0, 2.0}, {2.0, -2.0, -2.0}, {-2.0, 2.0, -2.0}, {-2.0, -2.0, -2.0},
	{0.0, 0.0, 3.0}, {0.0, 0.0, -3.0}, {0.0, 3.0, 0.0}, {0.0, -3.0, 0.0}, {3.0, 0.0, 0.0}, {-3.0, 0.0, 0.0}, {-3.0, 3.0, 3.0}, {3.0, 3.0, 3.0}, {3.0, -3.0, 3.0}, {3.0, 3.0, -3.0}, {-3.0, -3.0, 3.0}, {3.0, -3.0, -3.0}, {-3.0, 3.0, -3.0}, {-3.0, -3.0, -3.0},
	{0.0, 0.0, 4.0}, {0.0, 0.0, -4.0}, {0.0, 4.0, 0.0}, {0.0, -4.0, 0.0}, {4.0, 0.0, 0.0}, {-4.0, 0.0, 0.0}, {-4.0, 4.0, 4.0}, {4.0, 4.0, 4.0}, {4.0, -4.0, 4.0}, {4.0, 4.0, -4.0}, {-4.0, -4.0, 4.0}, {4.0, -4.0, -4.0}, {-4.0, 4.0, -4.0}, {-4.0, -4.0, -4.0},
	{0.0, 0.0, 5.0}, {0.0, 0.0, -5.0}, {0.0, 5.0, 0.0}, {0.0, -5.0, 0.0}, {5.0, 0.0, 0.0}, {-5.0, 0.0, 0.0}, {-5.0, 5.0, 5.0}, {5.0, 5.0, 5.0}, {5.0, -5.0, 5.0}, {5.0, 5.0, -5.0}, {-5.0, -5.0, 5.0}, {5.0, -5.0, -5.0}, {-5.0, 5.0, -5.0}, {-5.0, -5.0, -5.0},
	{0.0, 0.0, 6.0}, {0.0, 0.0, -6.0}, {0.0, 6.0, 0.0}, {0.0, -6.0, 0.0}, {6.0, 0.0, 0.0}, {-6.0, 0.0, 0.0}, {-6.0, 6.0, 6.0}, {6.0, 6.0, 6.0}, {6.0, -6.0, 6.0}, {6.0, 6.0, -6.0}, {-6.0, -6.0, 6.0}, {6.0, -6.0, -6.0}, {-6.0, 6.0, -6.0}, {-6.0, -6.0, -6.0},
	{0.0, 0.0, 10.0}, {0.0, 0.0, -10.0}, {0.0, 10.0, 0.0}, {0.0, -10.0, 0.0}, {10.0, 0.0, 0.0}, {-10.0, 0.0, 0.0}, {-10.0, 10.0, 10.0}, {10.0, 10.0, 10.0}, {10.0, -10.0, 10.0}, {10.0, 10.0, -10.0}, {-10.0, -10.0, 10.0}, {10.0, -10.0, -10.0}, {-10.0, 10.0, -10.0}, {-10.0, -10.0, -10.0}
}

new bool:g_respawn_enabled

new Float:g_user_gametime[33], nc_usermana[33], nc_usermaxmana[33], Float:g_fWallorigin[33][3];

new g_cvar_respawn_time, g_cvar_knives_cthp, g_cvar_knives_tshp, g_cvar_scoutknivez_gravity,
g_cvar_mario_gravity, g_cvar_uspninja_jumpboost;

enum (+=100)
{
	TASK_RESPAWN = 14630,
	TASK_SNOWBALL_UNCHILL,
	TASK_HNS_SEEK,
	TASK_INVISIBLE,
	TASK_MANARELOAD,
	TASK_NC_HUDMSG
}

new wpn_menu1 = -1, wpn_menu2 = -1, wpn_menu3 = -1;

new HamHook:g_hTraceAttack, HamHook:Ham_fw_player_killed_post, HamHook:Ham_fw_player_touch_post;
new HamHook:Ham_fw_player_jump_post, HamHook:Ham_fw_usp_secondaryatt_pre, HamHook:Ham_fw_usp_deploy_pre;
new HamHook:Ham_fw_hegrenade_deploy_post, HamHook:Ham_fw_knife_deploy_post, HamHook:Ham_fw_player_takedmg_post,
HamHook:Ham_fw_player_prethink_post, HamHook:Ham_fw_player_takedmg_pre, HamHook:Ham_fw_player_respawn_post,
HamHook:Ham_fw_weaponbox_spawn_post;

#if defined REGAMEDLL
new HookChain:ObsIsValidTarget_pre, HookChain:ObsSetMode_pre;
#else
new OrpheuHook:ObsIsValidTarget_pre, OrpheuHook:ObsSetMode_pre,
OrpheuFunction:Observer_IsValidTarget, OrpheuFunction:Observer_SetMode;
#endif


new FM_FW_SETMODEL_PRE, FW_SNOWBALL_TOUCHED, FW_DODGEBALL_TOUCHED, FM_FW_EMITSOUND_PRE, FW_SNOWFLAKE_THINK_PRE, FM_FW_ADDTOFULLPACK_POST;
new FW_REG_MESSAGE_SAUDIO = Invalid_Message_Handler, FW_REG_MESSAGE_TXTMSG = Invalid_Message_Handler, FW_PLAYER_TOUCHED;

new g_blood_drop, g_blood_spray, g_glassgibs, g_laserbeam;

new g_cvar_snowball_dmg, g_cvar_sb_chill_chance, g_cvar_sb_chill_duration, g_cvar_snowball_sp_life;
new g_cvar_snowball_chill_speed, g_cvar_snowball_grav, g_cvar_snowball_velocity;
new g_cvar_spaceday_gravity;
new g_cvar_hidenseek_pr_grav, g_cvar_hidenseek_gr_grav, g_cvar_hidenseek_seekdur, g_cvar_hidenseek_hidedur;
new g_cvar_zombies_zmhp, g_cvar_zombies_zmsp, g_cvar_zombies_zmgrav, g_cvar_zombies_respawn_as, g_cvar_zombies_ratio;
new g_cvar_ncs_nchp, g_cvar_ncs_ncsp, g_cvar_ncs_ncgrav, g_cvar_day_nc_hit_appear_dur, g_cvar_nc_teleport_manacost,
g_cvar_nc_day_maxmana;
new g_cvar_dodgeball_grav, g_cvar_dodgeball_velocity, g_cvar_dodgeball_dmg,
g_cvar_dodgeball_free4all, g_cvar_hidenseek_ghosting;

public g_user_zombie, g_user_human, g_user_nightcrawler, g_user_has_dodgeball, g_user_invisible;

#define	USER_CHILLED		pev_iuser4
#define USER_DEF_MAXSPEED	pev_fuser4

new g_iZombie_model_body;
new ZM_DAY_ZOMBIE_MODEL[32] = "zombie_source";
new ZM_DAY_ZOMBIE_VKNIFE[64] = "models/jailbreak/v_zombie_claws.mdl";
new ZM_DAY_ZOMBIE_PKNIFE[64] = "";

new g_iNightcrawler_model_body;
new NC_DAY_NCRAWLER_MODEL[32] = "nightcrawler";
new NC_DAY_NCRAWLER_VKNIFE[64] = "models/jailbreak/v_nightcrawler_sword.mdl";
new NC_DAY_NCRAWLER_PKNIFE[64] = "models/jailbreak/p_nightcrawler_sword.mdl";
new NC_DAY_TELEPORT_SND[64] = "jailbreak/nc_teleport.wav";

new g_iSphere_model_body;
new SPHERE_MDL[64] = "models/jailbreak/magnetic_sphere.mdl";

new NC_DAY_KNIFE_SOUNDS[][64] = {
	"jailbreak/nc_sword_deploy.wav",
	"jailbreak/nc_sword_hit1.wav",
	"jailbreak/nc_sword_hit2.wav",
	"jailbreak/nc_sword_hit3.wav",
	"jailbreak/nc_sword_hit4.wav",
	"jailbreak/nc_sword_hitwall.wav",
	"jailbreak/nc_sword_slash1.wav",
	"jailbreak/nc_sword_slash2.wav",
	"jailbreak/nc_sword_stab.wav"
}

//knife sounds
new const knife_sounds[][] = {
	"_deploy1.wav",
	"_hit1.wav",
	"_hit2.wav",
	"_hit3.wav",
	"_hit4.wav",
	"_hitwall1.wav",
	"_slash1.wav",
	"_slash2.wav",
	"_stab.wav"
}

new g_iMaxplayers, g_jbshopitem_MagneticShield;
new g_msgScreenFade, g_msgScreenShake, g_msgDamage, g_msgSendAudio, g_msgFog, g_msgsync, g_msgTextMsg;

new g_iPRISONERS[32], g_iPRISONERS_NUM;

enum _:USED_FORWARDS(+=1)
{
	U_HAM_FW_PLAYER_TOUCH_POST = 0,
	U_HAM_FW_PLAYER_TRACEATTACK_PRE,
	U_HAM_FW_PLAYER_TAKEDAMAGE_PRE,
	U_FM_FW_SETMODEL_PRE,
	U_FW_SENDAUDIO_MSG,
	U_FW_TXTMSG_MSG,
	U_HAM_FW_HEGRENADE_DEPLOY_POST,
	U_FW_DODGEBALL_TOUCHED,
	U_FW_SNOWBALL_TOUCHED,
	U_FW_PLAYER_TOUCHED,
	U_FW_SNOWFLAKE_THINK_PRE,
	U_HAM_FW_PLAYER_KILLED_POST,
	U_FM_FW_EMITSOUND_PRE,
	U_FW_CUR_WEAPON,
	U_FM_FW_ADDTOFULLPACK_POST
}

new g_forward_users[USED_FORWARDS];

public plugin_precache()
{
	new szFile[64], szText[4] = "0";
	
	// zombie day...
	jb_ini_get_keyvalue("ZOMBIE_DAY", "ZOMBIE_MDL_BODY", szText, charsmax(szText));
	g_iZombie_model_body = str_to_num(szText);
	jb_ini_get_keyvalue("ZOMBIE_DAY", "ZOMBIE_MDL", ZM_DAY_ZOMBIE_MODEL, charsmax(ZM_DAY_ZOMBIE_MODEL));
	formatex(szFile, charsmax(szFile), "models/player/%s/%s.mdl", ZM_DAY_ZOMBIE_MODEL, ZM_DAY_ZOMBIE_MODEL);
	PRECACHE_PLAYER_MODEL(szFile);
	formatex(szFile, charsmax(szFile), "models/player/%s/%sT.mdl", ZM_DAY_ZOMBIE_MODEL, ZM_DAY_ZOMBIE_MODEL);
	if(file_exists(szFile)) PRECACHE_PLAYER_MODEL(szFile);
	
	jb_ini_get_keyvalue("ZOMBIE_DAY", "ZOMBIE_V_KNIFE_MDL", ZM_DAY_ZOMBIE_VKNIFE, charsmax(ZM_DAY_ZOMBIE_VKNIFE));
	if(file_exists(ZM_DAY_ZOMBIE_VKNIFE)) PRECACHE_WEAPON_VIEW_MODEL(ZM_DAY_ZOMBIE_VKNIFE);
	jb_ini_get_keyvalue("ZOMBIE_DAY", "ZOMBIE_P_KNIFE_MDL", ZM_DAY_ZOMBIE_PKNIFE, charsmax(ZM_DAY_ZOMBIE_PKNIFE));
	if(file_exists(ZM_DAY_ZOMBIE_PKNIFE)) PRECACHE_WEAPON_PLAYER_MODEL(ZM_DAY_ZOMBIE_PKNIFE);
	
	// nightcrawler day...
	szText[0] = '0'; szText[1] = EOS;
	jb_ini_get_keyvalue("NIGHTCRAWLER_DAY", "NIGHTCRAWLER_MDL_BODY", szText, charsmax(szText));
	g_iNightcrawler_model_body = str_to_num(szText);
	jb_ini_get_keyvalue("NIGHTCRAWLER_DAY", "NIGHTCRAWLER_MDL", NC_DAY_NCRAWLER_MODEL, charsmax(NC_DAY_NCRAWLER_MODEL));
	formatex(szFile, charsmax(szFile), "models/player/%s/%s.mdl", NC_DAY_NCRAWLER_MODEL, NC_DAY_NCRAWLER_MODEL);
	PRECACHE_PLAYER_MODEL(szFile);
	formatex(szFile, charsmax(szFile), "models/player/%s/%sT.mdl", NC_DAY_NCRAWLER_MODEL, NC_DAY_NCRAWLER_MODEL);
	if(file_exists(szFile)) PRECACHE_PLAYER_MODEL(szFile);
	
	jb_ini_get_keyvalue("NIGHTCRAWLER_DAY", "NC_V_KNIFE_MDL", NC_DAY_NCRAWLER_VKNIFE, charsmax(NC_DAY_NCRAWLER_VKNIFE));
	if(file_exists(NC_DAY_NCRAWLER_VKNIFE)) PRECACHE_WEAPON_VIEW_MODEL(NC_DAY_NCRAWLER_VKNIFE);
	jb_ini_get_keyvalue("NIGHTCRAWLER_DAY", "NC_P_KNIFE_MDL", NC_DAY_NCRAWLER_PKNIFE, charsmax(NC_DAY_NCRAWLER_PKNIFE));
	if(file_exists(NC_DAY_NCRAWLER_PKNIFE)) PRECACHE_WEAPON_PLAYER_MODEL(NC_DAY_NCRAWLER_PKNIFE);
	
	jb_ini_get_keyvalue("NIGHTCRAWLER_DAY", "NC_TELEPORT_SND", NC_DAY_TELEPORT_SND, charsmax(NC_DAY_TELEPORT_SND));
	PRECACHE_SOUND(NC_DAY_TELEPORT_SND);
	
	for(new i, szKey[48]; i < sizeof NC_DAY_KNIFE_SOUNDS; i++)
	{
		formatex(szKey, charsmax(szKey), "NC_KNIFE_%s", knife_sounds[i]);
		strtoupper(szKey);
		jb_ini_get_keyvalue("NIGHTCRAWLER_DAY", szKey, NC_DAY_KNIFE_SOUNDS[i], charsmax(NC_DAY_KNIFE_SOUNDS[]));
		PRECACHE_SOUND(NC_DAY_KNIFE_SOUNDS[i]);
	}
	
	// dodgeball day...
	szText[0] = '0'; szText[1] = EOS;
	jb_ini_get_keyvalue("DODGEBALL_DAY", "DODGEBALL_W_MDL_BODY", szText, charsmax(szText));
	g_WorldDodgeballModelBody = str_to_num(szText);
	jb_ini_get_keyvalue("DODGEBALL_DAY", "DODGEBALL_HIT_SND", DODGEBALL_HIT_SND, charsmax(DODGEBALL_HIT_SND));
	PRECACHE_SOUND(DODGEBALL_HIT_SND);
	
	jb_ini_get_keyvalue("DODGEBALL_DAY", "DODGEBALL_W_MDL", W_DODGEBALL_MDL, charsmax(W_DODGEBALL_MDL));
	PRECACHE_WEAPON_WORLD_MODEL(W_DODGEBALL_MDL);
	jb_ini_get_keyvalue("DODGEBALL_DAY", "DODGEBALL_V_MDL", V_DODGEBALL_MDL, charsmax(V_DODGEBALL_MDL));
	PRECACHE_WEAPON_VIEW_MODEL(V_DODGEBALL_MDL);
	jb_ini_get_keyvalue("DODGEBALL_DAY", "DODGEBALL_P_MDL", P_DODGEBALL_MDL, charsmax(P_DODGEBALL_MDL));
	PRECACHE_WEAPON_PLAYER_MODEL(P_DODGEBALL_MDL);
	
	// snowball day...
	jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_W_MDL", W_SNOW_BALL_MDL, charsmax(W_SNOW_BALL_MDL));
	PRECACHE_WEAPON_WORLD_MODEL(W_SNOW_BALL_MDL);
	jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_V_MDL", V_SNOW_BALL_MDL, charsmax(V_SNOW_BALL_MDL));
	PRECACHE_WEAPON_VIEW_MODEL(V_SNOW_BALL_MDL);
	jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_P_MDL", P_SNOW_BALL_MDL, charsmax(P_SNOW_BALL_MDL));
	PRECACHE_WEAPON_PLAYER_MODEL(P_SNOW_BALL_MDL);

	jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_SPLASH_SPR", SNOWBALL_SPLASH_SPR, charsmax(SNOWBALL_SPLASH_SPR));
	PRECACHE_SPRITE(SNOWBALL_SPLASH_SPR);
	
	jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_CHILL_SND", SNOWBALL_CHILL_SND, charsmax(SNOWBALL_CHILL_SND));
	jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_UNCHILL_SND", SNOWBALL_UNCHILL_SND, charsmax(SNOWBALL_UNCHILL_SND));
	PRECACHE_SOUND(SNOWBALL_CHILL_SND);
	PRECACHE_SOUND(SNOWBALL_UNCHILL_SND);
	
	// hidenseek day...
	szText[0] = '0'; szText[1] = EOS;
	jb_ini_get_keyvalue("HIDENSEEK", "MAGNETIC_SPHERE_MDL_BODY", szText, charsmax(szText));
	g_iSphere_model_body = str_to_num(szText);
	jb_ini_get_keyvalue("HIDENSEEK", "MAGNETIC_SPHERE_MDL", SPHERE_MDL, charsmax(SPHERE_MDL));
	PRECACHE_WORLD_ITEM(SPHERE_MDL);
	
	// sprites...
	g_blood_drop = PRECACHE_SPRITE_I("sprites/blood.spr");
	g_blood_spray = PRECACHE_SPRITE_I("sprites/bloodspray.spr");
	g_glassgibs = PRECACHE_SPRITE_I("models/glassgibs.mdl");
	g_laserbeam = PRECACHE_SPRITE_I("sprites/laserbeam.spr");

	register_clcmd("say /tok", "clcmdtok");
}

public clcmdtok(id)
{
	new weapon[24];
	get_weaponname(get_user_weapon(id), weapon, 23);

	cprint_chat(id, _, "Return %d:", ham_strip_weapon(id, weapon));
}

public plugin_end()
{
	// destroy the wpns menu;
	destroy_weapons_menus();
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	for(new i; i < DAYS_MAX; i++)
	{
		iDAYS_ID[i] = register_jailbreak_day(DAYS_INFO[i][DAY_NAME], 0, (DAYS_INFO[i][DAY_LENGTH] * 60.0), DAYS_ENDTYPE[i]);
	}
	
	for(new i; i < sizeof MINIGAMES_NAME; i++)
	{
		iMINIGAMES_ID[i] = register_jb_minigame(MINIGAMES_NAME[i], "jb_minigames_handler");
	}

	g_jbshopitem_MagneticShield = register_jailbreak_shopitem("Magnetic Shield", "Lightning Protection", 25000, TEAM_GUARDS);

	g_cvar_respawn_time = register_cvar("jb_day_dm_respawn_time", "3.0")
	g_cvar_knives_cthp = register_cvar("jb_day_knives_cthp", "100")
	g_cvar_knives_tshp = register_cvar("jb_day_knives_tshp", "100")
	g_cvar_scoutknivez_gravity = register_cvar("jb_day_scoutknivez_gravity", "0.5")
	g_cvar_mario_gravity = register_cvar("jb_day_mario_gravity", "0.385")
	g_cvar_uspninja_jumpboost = register_cvar("jb_day_uspninja_jpboost", "550.0")
	g_cvar_snowball_dmg = register_cvar("jb_day_snowball_dmg", "75.0")
	g_cvar_sb_chill_chance = register_cvar("jb_day_snowball_chill_chance", "35")
	g_cvar_sb_chill_duration = register_cvar("jb_day_snowball_chill_len", "3.0")
	g_cvar_snowball_sp_life = register_cvar("jb_day_snowball_splash_life", "3.0")
	g_cvar_snowball_chill_speed = register_cvar("jb_day_snowball_chill_sp", "0.50")
	g_cvar_snowball_grav = register_cvar("jb_day_snowball_gravity", "0.3")
	g_cvar_snowball_velocity = register_cvar("jb_day_snowball_velocity", "900.0")
	g_cvar_spaceday_gravity = register_cvar("jb_day_spaceday_gravity", "0.3")
	g_cvar_hidenseek_seekdur = register_cvar("jb_day_hidenseek_seeking_time", "150")
	g_cvar_hidenseek_hidedur = register_cvar("jb_day_hidenseek_hiding_time", "30")
	g_cvar_hidenseek_gr_grav = register_cvar("jb_day_hidenseek_guards_grav", "1.0")
	g_cvar_hidenseek_pr_grav = register_cvar("jb_day_hidenseek_prisoners_grav", "0.8")
	g_cvar_hidenseek_ghosting = register_cvar("jb_day_hidenseek_allow_ghosting", "0")
	g_cvar_zombies_zmhp = register_cvar("jb_day_zombies_zmhp", "3000")
	g_cvar_zombies_zmsp = register_cvar("jb_day_zombies_zmspeed", "320")
	g_cvar_zombies_zmgrav = register_cvar("jb_day_zombies_zmgrav", "0.65")
	g_cvar_zombies_respawn_as = register_cvar("jb_day_zombies_respawn_as", "1")
	g_cvar_zombies_ratio = register_cvar("jb_day_zombies_ratio", "0.15")
	g_cvar_ncs_nchp = register_cvar("jb_day_ncs_nchp", "200")
	g_cvar_ncs_ncsp = register_cvar("jb_day_ncs_ncspeed", "400")
	g_cvar_ncs_ncgrav = register_cvar("jb_day_ncs_ncgrav", "0.5")
	g_cvar_day_nc_hit_appear_dur = register_cvar("jb_day_ncs_hit_appear_duration", "1.5")
	g_cvar_nc_teleport_manacost = register_cvar("jb_day_ncs_teleport_cost", "50")
	g_cvar_nc_day_maxmana = register_cvar("jb_day_ncs_max_mana", "150")
	g_cvar_dodgeball_grav = register_cvar("jb_day_dodgeball_grav", "0.75")
	g_cvar_dodgeball_velocity = register_cvar("jb_day_dodgeball_velocity", "800.0")
	g_cvar_dodgeball_dmg = register_cvar("jb_day_dodgeball_dmg", "50")
	g_cvar_dodgeball_free4all = register_cvar("jb_day_dodgeball_freeforall", "1")

	register_clcmd("say /respawn", "clcmd_respawn");
	register_clcmd("say_team /respawn", "clcmd_respawn");
	//register_clcmd("say /stuck", "fix_teleport");
	register_concmd("jb_deathmatch", "clcmd_deathmatch", ADMIN_KICK);

	DisableHamForward( (Ham_fw_player_respawn_post = RegisterHam(Ham_Spawn, "player", "fw_player_respawn_post", 1)) );
	RegisterHam(Ham_Killed, "player", "fw_player_killed_pre", false); // a Fix for the player death animation.
	DisableHamForward( (Ham_fw_player_killed_post = RegisterHam(Ham_Killed, "player", "fw_player_killed_post", 1)) );
	DisableHamForward( (g_hTraceAttack = RegisterHam(Ham_TraceAttack, "player", "TraceAttack")) );
	DisableHamForward( (Ham_fw_player_takedmg_pre = RegisterHam(Ham_TakeDamage, "player", "fw_player_takedmg_pre")) );
	DisableHamForward( (Ham_fw_player_takedmg_post = RegisterHam(Ham_TakeDamage, "player", "fw_player_takedmg_post", 1)) );
	DisableHamForward( (Ham_fw_player_touch_post = RegisterHam(Ham_Touch, "player", "fw_player_touch_post", 1)) );
	DisableHamForward( (Ham_fw_player_jump_post = RegisterHam(Ham_Player_Jump, "player", "fw_player_jump_post", 1)) );
	DisableHamForward( (Ham_fw_usp_deploy_pre = RegisterHam(Ham_Item_Deploy, "weapon_usp", "fw_usp_deploy_pre")) );
	DisableHamForward( (Ham_fw_usp_secondaryatt_pre = RegisterHam(Ham_Weapon_SecondaryAttack, "weapon_usp", "fw_usp_secondaryattack_pre")) );
	DisableHamForward( (Ham_fw_player_prethink_post = RegisterHam(Ham_Player_PreThink, "player", "fw_player_prethink_post", 1)) );
	DisableHamForward( (Ham_fw_hegrenade_deploy_post = RegisterHam(Ham_Item_Deploy, "weapon_hegrenade", "fw_hegrenade_deploy_post",1)) );
	DisableHamForward( (Ham_fw_knife_deploy_post = RegisterHam(Ham_Item_Deploy, "weapon_knife", "fw_knife_deploy_post", 1)) );
	DisableHamForward( (Ham_fw_weaponbox_spawn_post = RegisterHam(Ham_Spawn, "weaponbox", "FwdSpawnWeaponbox", 1)) );

	register_event("CurWeapon", "event_CurWeapon", "be", "1=1");

	g_msgScreenFade = get_user_msgid("ScreenFade");
	g_msgScreenShake = get_user_msgid("ScreenShake");
	g_msgDamage = get_user_msgid("Damage");
	g_msgSendAudio = get_user_msgid("SendAudio");
	g_msgFog = get_user_msgid("Fog");
	g_msgsync = CreateHudSyncObj();
	g_msgTextMsg = get_user_msgid("TextMsg");
	g_iMaxplayers = get_maxplayers();

	wpn_menu1 = wpn_menu2 = wpn_menu3 = INVALID_HANDLE;

	register_think("magnetic_lightning", "fw_mlightning_think");

#if defined REGAMEDLL
	DisableHookChain((ObsIsValidTarget_pre = RegisterHookChain(RG_CBasePlayer_Observer_IsValidTarget, "Observer_IsValidTarget_Pre", .post=false)));
	DisableHookChain((ObsSetMode_pre = RegisterHookChain(RG_CBasePlayer_Observer_SetMode, "Observer_SetMode_Pre", .post=false)));
#else
	Observer_IsValidTarget = OrpheuGetFunction("Observer_IsValidTarget", "CBasePlayer");
	Observer_SetMode = OrpheuGetFunction("Observer_SetMode", "CBasePlayer");
#endif
}

public Observer_IsValidTarget_Pre(const this, const iTarget, const bool:bSameTeam)
{
	if(get_pcvar_num(g_cvar_hidenseek_ghosting))
		return;

	static players[32], ctplayers[32], pnum, ctnum;
	get_players(players, pnum, "ah");
	get_players(ctplayers, ctnum, "ahe", "CT");

	const PDATA_SAFE = 2;

	if( !iTarget || ( pev_valid(iTarget) == PDATA_SAFE && fm_get_user_team(iTarget) != TEAM_GUARDS ) )
	{
		if(pnum > 0)
		{
			new x;

			if(iTarget > 0)
			{
				for(new i; i < pnum; i++)
				{
					if(players[i] == iTarget)
					{
						x = i;
						break;
					}
				}
			}

#if defined REGAMEDLL
			SetHookChainArg(2, ATYPE_INTEGER, ctplayers[++x % ctnum]);
			SetHookChainArg(3, ATYPE_BOOL, false);
#else
			OrpheuSetParam(2, ctplayers[++x % ctnum]);
			OrpheuSetParam(3, false);
#endif
		}
	}
}

public Observer_SetMode_Pre(const this, const iMode)
{
	if(get_pcvar_num(g_cvar_hidenseek_ghosting))
		return;

	if(iMode != OBS_IN_EYE)
	{
#if defined REGAMEDLL
		SetHookChainArg(2, ATYPE_INTEGER, OBS_IN_EYE);
#else
		OrpheuSetParam(2, OBS_IN_EYE);
#endif
	}
}

public fw_player_killed_pre(id, attacker, gib)
{
	new x;
	if((x=pev(id, pev_flags)) & FL_FROZEN)
	{
		set_pev(id, pev_flags, x & ~FL_FROZEN);
	}
}

public client_putinserver(id)
{
	arrayset(user_weapons[id], -1, sizeof user_weapons[]);
}

#if AMXX_VERSION_NUM > 182
public client_disconnected(id)
#else
public client_disconnect(id)
#endif
{
	if(jb_get_current_day() == iDAYS_ID[DAY_DODGEBALL] || jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_DODGEBALL]))
	{
		if( (g_user_has_dodgeball & (1<<(id & 31))) )
		{
			g_user_has_dodgeball &= ~(1<<(id & 31))

			if(get_pcvar_num(g_cvar_dodgeball_free4all))
			{
				new Float:fOrigin[3];
				pev(id, pev_origin, fOrigin);
				drop_dodgeball(fOrigin);
			}
			else
			{
				new players[32], pnum;
				get_players(players, pnum, "ah");

				if(pnum > 0)
				{
					new ran = players[random(pnum)];

					new sName[32];
					give_dodgeball(ran);
					get_user_name(ran, sName, charsmax(sName));
					set_hudmessage(153, 238, 111, -1.0, 0.69, 1, 6.0, 12.0);
					show_hudmessage(0, "%s Now has the dodgeball !^nDodge him Quick !!!", sName);
				}
			}
		}

		new ent;
		while( (ent=find_ent_by_owner(ent, DODGEBALL_ENTITY, id)) > 0 )
		{
			set_pev(ent, pev_owner, 0);
		}
	}

	if(jb_get_current_day() == iDAYS_ID[DAY_SNOWBALL] || jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_SNOWBALL]))
	{
		new ent;
		while( (ent=find_ent_by_owner(ent, SNOWBALL_ENTITY, id)) > 0 )
		{
			set_pev(ent, pev_owner, 0);
		}
	}

	if(jb_get_current_day() == iDAYS_ID[DAY_ZOMBIES])
	{
		CheckZombieDayWinStatus();
	}

	remove_flag(g_user_nightcrawler,id);
	remove_flag(g_user_invisible,id);
	remove_flag(g_user_zombie,id);
	remove_flag(g_user_human,id);

	remove_task(id+TASK_INVISIBLE);
	remove_task(id+TASK_MANARELOAD);
	remove_task(id+TASK_NC_HUDMSG);
	remove_task(id+TASK_RESPAWN);
	remove_task(id+TASK_SNOWBALL_UNCHILL);
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == g_jbshopitem_MagneticShield)
	{
		CreateMagneticSphere(.iOwner = id);
	}
}

public fw_knife_deploy_post(const iKnife)
{
	static id, iDay;
	id = get_pdata_cbase(iKnife, m_iWeaponOwner, WEAPON_LINUXDIFF);
	iDay = jb_get_current_day();

	if(iDay == iDAYS_ID[DAY_ZOMBIES])
	{
		if(check_flag(g_user_zombie,id))
		{
			set_pev(id, pev_viewmodel2, ZM_DAY_ZOMBIE_VKNIFE);
			set_pev(id, pev_weaponmodel2, ZM_DAY_ZOMBIE_PKNIFE);
		}
	}
	else if(iDay == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		if(g_user_nightcrawler & (1<<(31&id)))
		{
			set_pev(id, pev_viewmodel2, NC_DAY_NCRAWLER_VKNIFE);
			set_pev(id, pev_weaponmodel2, NC_DAY_NCRAWLER_PKNIFE);
		}
	}
	else if(iDay == iDAYS_ID[DAY_SNOWBALL])
	{
		engclient_cmd(id, "weapon_flashbang");

		if(get_user_weapon(id) == CSW_FLASHBANG)
		{
			set_pev(id, pev_viewmodel2, V_SNOW_BALL_MDL);
			set_pev(id, pev_weaponmodel2, P_SNOW_BALL_MDL);
		}
	}
	return HAM_IGNORED;
}

public fw_emitsound_pre(ent, channel, const sound[])
{
	if(g_forward_users[U_FM_FW_EMITSOUND_PRE] <= 0 && FM_FW_EMITSOUND_PRE)
	{
		unregister_forward(FM_EmitSound, FM_FW_EMITSOUND_PRE);
		FM_FW_EMITSOUND_PRE = 0;
		return FMRES_IGNORED;
	}

	if(ent <= 0)
		return FMRES_IGNORED;

	new curday = jb_get_current_day();

	//Check if its snowball day, :)
	if(curday == iDAYS_ID[DAY_SNOWBALL] || jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_SNOWBALL]))
	{
		static sClassname[24];
		pev(ent, pev_classname, sClassname, charsmax(sClassname));

		if(!equal(sClassname, SNOWBALL_ENTITY)) return FMRES_IGNORED;

		//If it's equal - block it
		if(equal(sound, "weapons/grenade_hit1.wav") || equal(sound, "weapons/grenade_hit2.wav") ||
		equal(sound, "weapons/grenade_hit3.wav") || equal(sound, "weapons/he_bounce-1.wav"))
			return FMRES_SUPERCEDE;
	}
	if(curday == iDAYS_ID[DAY_DODGEBALL] || jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_DODGEBALL]))
	{
		static sClassname[24];
		pev(ent, pev_classname, sClassname, charsmax(sClassname));

		if(!equal(sClassname, DODGEBALL_ENTITY)) return FMRES_IGNORED;

		//If it's equal - block it
		if(equal(sound, "weapons/grenade_hit1.wav") || equal(sound, "weapons/grenade_hit2.wav") ||
		equal(sound, "weapons/grenade_hit3.wav") || equal(sound, "weapons/he_bounce-1.wav"))
		{
			emit_sound(ent, channel, DODGEBALL_HIT_SND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
			return FMRES_SUPERCEDE;
		}
	}
	if(curday == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		if(!(g_user_nightcrawler & (1<<(31&ent))))
			return FMRES_IGNORED;

		for(new i; i < sizeof knife_sounds; i++)
		{
			if(equal(sound[13], knife_sounds[i]))
			{
				emit_sound(ent, channel, NC_DAY_KNIFE_SOUNDS[i], VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
				return FMRES_SUPERCEDE;
			}
		}
	}
	return FMRES_IGNORED
}

public fw_message_audio(msg_id, msg_dest, msg_entity)
{
	if(g_forward_users[U_FW_SENDAUDIO_MSG] <= 0 && FW_REG_MESSAGE_SAUDIO != Invalid_Message_Handler)
	{
		unregister_message(g_msgSendAudio, FW_REG_MESSAGE_SAUDIO);
		FW_REG_MESSAGE_SAUDIO = Invalid_Message_Handler;
		return PLUGIN_CONTINUE;
	}

	new szString[20];
	get_msg_arg_string(2, szString, charsmax(szString));

	if(equal(szString, "%!MRAD_FIREINHOLE"))
	{
		return PLUGIN_HANDLED;
	}
	return PLUGIN_CONTINUE;
}

public fw_player_prethink_post(id)
{
	if(!is_user_alive(id)) return HAM_IGNORED;

	if(jb_get_current_day() == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		if(!(g_user_nightcrawler & (1<<(31&id))))
			return HAM_IGNORED;

		static iButton, iOldButton;
		iButton = pev(id, pev_button);
		iOldButton = pev(id, pev_oldbuttons);
		if(iButton & IN_RELOAD && !(iOldButton & IN_RELOAD))
		{
			static manacost; manacost = get_pcvar_num(g_cvar_nc_teleport_manacost);
			if(nc_usermana[id] >= manacost)
			{
				nc_usermana[id] -= manacost;
				teleport_user_byaim(id)
				remove_task(id+TASK_MANARELOAD)
				set_task(0.5, "task_manareload", id+TASK_MANARELOAD, _, _, "b");
			}
			else
				client_print(id, print_center, "%L", LANG_PLAYER, "NC_DAY_NO_ENF_MANA");
		}

		if(iButton & IN_USE)
		{
			task_climb(id, iButton);
		}
	}
	return HAM_IGNORED;
}

public task_manareload(taskid)
{
	new id = taskid - TASK_MANARELOAD;
	if(!is_user_alive(id))
	{
		remove_task(taskid);
		return;
	}

	if( nc_usermana[id] < nc_usermaxmana[id] )
		nc_usermana[id] ++;
	else if( nc_usermana[id] > nc_usermaxmana[id] )
	{
		nc_usermana[id] = nc_usermaxmana[id];
		remove_task(taskid);
	}
}

public fw_SnowFlake_Think(ent)
{
	if(g_forward_users[U_FW_SNOWFLAKE_THINK_PRE] <= 0 && FW_SNOWFLAKE_THINK_PRE)
	{
		unregister_think(FW_SNOWFLAKE_THINK_PRE);
		FW_SNOWFLAKE_THINK_PRE = 0;
	}

	//Check validity
	if(!pev_valid(ent))
		return;

	static Float:fLife;
	pev(ent, PEV_SNOWFLAKE_LIFE, fLife);

	if(fLife <= get_gametime())
	{
		set_pev(ent, pev_flags, FL_KILLME);
	}
	else
	{
		set_pev(ent, pev_nextthink, get_gametime() + 1.0);
	}
}

public task_climb(id, iButton)
{
	static Float:fOrigin[ 3 ];
	pev(id, pev_origin, fOrigin);

	if(get_distance_f(fOrigin, g_fWallorigin[id] ) > 10.0)
		return;

	if(iButton & IN_FORWARD)
	{
		static Float:fVelocity[3];
		velocity_by_aim(id, pev(id, pev_maxspeed), fVelocity);

		set_pev(id, pev_velocity, fVelocity);
	}
	else if(iButton & IN_BACK)
	{
		static Float:fVelocity[3];
		velocity_by_aim(id, -pev(id, pev_maxspeed), fVelocity);

		set_pev(id, pev_velocity, fVelocity);
	}
	else if(iButton  & IN_USE)
	{
		static Float:fVelocity[3];
		fVelocity[0] = fVelocity[1] = fVelocity[2] = 0.0;

		set_pev(id, pev_velocity, fVelocity);
	}
}

public fw_snowball_touched(const ent, const id)
{
	if(g_forward_users[U_FW_SNOWBALL_TOUCHED] <= 0 && FW_SNOWBALL_TOUCHED)
	{
		unregister_touch(FW_SNOWBALL_TOUCHED);
		FW_SNOWBALL_TOUCHED = 0;
		return;
	}

	if(pev_valid(ent))
	{
		static Float:origin[3], owner;
		pev(ent, pev_origin, origin);
		owner = pev(ent, pev_owner);

		if(is_user_alive(id))
		{
			// ignore if the ball is hitting the thrower!
			if(
				(owner == id) ||
				(jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_SNOWBALL]) &&
					(jb_is_user_inminigame(id) != iMINIGAMES_ID[MINIGAME_SNOWBALL] || !(jb_get_user_enemies(owner) & player_flag(id))))
				)
					return;

			//Check god mode
			if(pev(id, pev_flags) & FL_GODMODE || entity_takedamage(id) == DAMAGE_NO)
				return;

			static uHealth, dmg;
			if((uHealth = get_user_health(id)) > (dmg = get_pcvar_num(g_cvar_snowball_dmg)))
			{
				//Players health is greater than snowball damage

				//Calculate chill chance
				if(random_num(0,100) <= get_pcvar_num(g_cvar_sb_chill_chance))
				{
					//Chill only non-chilled player
					if(!pev(id, USER_CHILLED))
					{
						//Emit sound
						engfunc(EngFunc_EmitSound,id,CHAN_AUTO,SNOWBALL_CHILL_SND,1.0,ATTN_NORM,0,PITCH_NORM);

						//Make light effect
						sw_light(origin);

						//Chill him!
						sw_ChillPlayer(id);

						//Set unchill task
						remove_task(id + TASK_SNOWBALL_UNCHILL);
						set_task(get_pcvar_float(g_cvar_sb_chill_duration),"task_UnChill",id + TASK_SNOWBALL_UNCHILL);
					}
				}

				//Create nice effect
				sw_effect(origin);

				//Emit pain sound
				engfunc(EngFunc_EmitSound,id,CHAN_VOICE,sound_pain[random(sizeof(sound_pain))],1.0,ATTN_NORM,0,PITCH_NORM);

				//Emit hit sound
				engfunc(EngFunc_EmitSound,ent,CHAN_AUTO,sound_hit[random(sizeof(sound_hit))],1.0,ATTN_NORM,0,PITCH_NORM);

				//Do damage to player
				ExecuteHamB(Ham_TakeDamage, id, ent, owner, float(dmg), DMG_FREEZE);
				//set_user_health(id, (uHealth - dmg))

				//Remove entity
				set_pev(ent, pev_solid, SOLID_NOT);
				set_pev(ent, pev_flags, FL_KILLME);
				dllfunc(DLLFunc_Think, ent);

			}
			else if(uHealth <= dmg)
			{
				//Players health is lower or equal to snowball damage

				//Emit hit sound
				engfunc(EngFunc_EmitSound,ent,CHAN_AUTO,sound_hit[random(sizeof(sound_hit))],1.0,ATTN_NORM,0,PITCH_NORM);

				//Make nice effect
				sw_effect(origin);

				//Kill player
				ExecuteHamB(Ham_Killed, id, owner, 2);

				//Remove entity
				set_pev(ent, pev_solid, SOLID_NOT);
				set_pev(ent, pev_flags, FL_KILLME);
				dllfunc(DLLFunc_Think, ent);
			}
		}
		else
		{
			if(id > 0 && entity_takedamage(id) != DAMAGE_NO)
			{
				ExecuteHamB(Ham_TakeDamage, id, ent, owner, get_pcvar_float(g_cvar_snowball_dmg), DMG_FREEZE);
			}

			//Emit hit sound
			engfunc(EngFunc_EmitSound,ent,CHAN_AUTO,sound_hit[random(sizeof(sound_hit))],1.0,ATTN_NORM,0,PITCH_NORM);

			//Make nice effect
			sw_effect(origin);

			//Snowball hit's something, f.e. wall, etc.
			sw_splash(origin);

			//Remove entity
			set_pev(ent, pev_solid, SOLID_NOT);
			set_pev(ent, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, ent);
		}
	}
}

public fw_player_touched(const id, const ent)
{
	if(g_forward_users[U_FW_PLAYER_TOUCHED] <= 0 && FW_PLAYER_TOUCHED)
	{
		unregister_touch(FW_PLAYER_TOUCHED);
		FW_PLAYER_TOUCHED = 0;
		return;
	}

	if( id && id <= g_iMaxplayers )
	{
		if(check_flag(g_user_nightcrawler,id))
		{
			static szClassname[20]; szClassname[0] = EOS;

			if(pev_valid(ent))
			{
				pev(ent, pev_classname, szClassname, charsmax(szClassname));
			}

			if( !ent || equal(szClassname, "func_wall") || equal(szClassname, "func_breakable"))
			{
				pev(id, pev_origin, g_fWallorigin[id]);
			}
		}
	}
}

public fw_dodgeball_touched(ent, id)
{
	if(g_forward_users[U_FW_DODGEBALL_TOUCHED] <= 0 && FW_DODGEBALL_TOUCHED)
	{
		unregister_touch(FW_DODGEBALL_TOUCHED);
		FW_DODGEBALL_TOUCHED = 0;
		return;
	}

	if(pev_valid(ent))
	{
		static owner, dodgeball_dmg;
		owner = pev(ent, pev_owner);
		dodgeball_dmg = get_pcvar_num(g_cvar_dodgeball_dmg);

		if(is_user_alive(id))
		{
			// ignore if the ball is nontarget in a minigame?
			if(
				(jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_DODGEBALL]) && jb_is_user_inminigame(id) != iMINIGAMES_ID[MINIGAME_DODGEBALL])
					) return;

			static Float:fVelo[3];
			pev(ent, pev_velocity, fVelo);

			if(fVelo[0] == 0.0 && fVelo[1] == 0.0 && fVelo[2] == 0.0)
			{
				if(check_flag(g_user_has_dodgeball,id))
					return;

				if(!get_pcvar_num(g_cvar_dodgeball_free4all))
				{
					static sName[32];
					get_user_name(id, sName, charsmax(sName));
					set_hudmessage(117, 245, 117, -1.0, 0.79, 1, 6.0, 3.0, _, _, -1);
					show_hudmessage(0, "%s has the ball now!^ndodge him!", sName);
				}

				set_pev(ent, pev_flags, FL_KILLME);
				dllfunc(DLLFunc_Think, ent);
				give_dodgeball(id);
				return;
			}

			//Check god mode
			if(id == owner || entity_takedamage(id) == DAMAGE_NO || pev(ent, PEV_DODGEBALL_LAST_ENT_HIT) == id || (jb_is_user_inminigame(owner) == iMINIGAMES_ID[MINIGAME_DODGEBALL] && !(jb_get_user_enemies(owner) & player_flag(id))))
				return;

			if(get_user_health(id) > dodgeball_dmg)
			{
				//Emit pain sound
				engfunc(EngFunc_EmitSound,id,CHAN_VOICE,sound_pain[random(sizeof(sound_pain))],1.0,ATTN_NORM,0,PITCH_NORM)

					//Emit hit sound
				engfunc(EngFunc_EmitSound,ent,CHAN_AUTO,sound_hit[random(sizeof(sound_hit))],1.0,ATTN_NORM,0,PITCH_NORM)

				//Do damage to player
				//set_user_health(id, (get_user_health(id) - dodgeball_dmg));
				ExecuteHamB(Ham_TakeDamage, id, ent, owner, float(dodgeball_dmg), DMG_ENERGYBEAM);
			}
			else
			{
				//Emit hit sound
				engfunc(EngFunc_EmitSound,ent,CHAN_AUTO,sound_hit[random(sizeof(sound_hit))],1.0,ATTN_NORM,0,PITCH_NORM);

				//Kill player
				ExecuteHamB(Ham_Killed, id, owner, 2);
			}
			// lets give a chance and not to kill instantly because touch fwd is called many times per second.
			set_pev(ent, PEV_DODGEBALL_LAST_ENT_HIT, id);
		}
		else if(id > 0) // if its a random entity.
		{
			if(entity_takedamage(id) != DAMAGE_NO)
			{
				ExecuteHamB(Ham_TakeDamage, id, ent, owner, float(dodgeball_dmg), DMG_GENERIC);
			}
		}
	}
}


give_dodgeball(id)
{
	g_user_has_dodgeball |= (1<<(id & 31));
	ham_give_weapon(id, "weapon_hegrenade", 1);
	engclient_cmd(id, "weapon_hegrenade");
	set_pev(id, pev_viewmodel2, V_DODGEBALL_MDL);
	set_pev(id, pev_weaponmodel2, P_DODGEBALL_MDL);
}

sw_splash(Float:fOrigin[3])
{
	new ent = create_entity("info_target");

	if(!ent)
	{
		return;
	}

	static szFrame[4] = {0,0,...};

	if(!szFrame[0])
	{
		szFrame[0] = '0';
		jb_ini_get_keyvalue("SNOWBALL_DAY", "SNOWBALL_SPLASH_SPR_FRAME", szFrame, charsmax(szFrame));
	}

	set_pev(ent, pev_velocity, Float:{0.0, 0.0, 0.0});
	set_pev(ent, pev_classname, SNOWFLAKE_ENTITY);
	set_pev(ent, pev_movetype, MOVETYPE_TOSS);
	set_pev(ent, pev_owner, 0);
	engfunc(EngFunc_SetOrigin, ent, fOrigin);
	engfunc(EngFunc_SetModel, ent, SNOWBALL_SPLASH_SPR);
	set_pev(ent, pev_renderfx, kRenderFxNoDissipation);
	set_pev(ent, pev_rendermode, kRenderGlow);
	set_pev(ent, pev_rendercolor, {255.0, 255.0, 255.0});
	set_pev(ent, pev_renderamt, 255.0);
	set_pev(ent, PEV_IDENTITY, SNOWFLAKE_ID);
	set_pev(ent, pev_frame, floatstr(szFrame));
	set_pev(ent, PEV_SNOWFLAKE_LIFE, get_gametime() + get_pcvar_float(g_cvar_snowball_sp_life));
	set_pev(ent, pev_nextthink, get_gametime() + 0.1);
}

sw_effect(Float:fOrigin[3])
{
	new origin[3];
	FVecIVec(fOrigin,origin);

	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BLOODSPRITE);
	write_coord(origin[0]+random_num(-20,20));
	write_coord(origin[1]+random_num(-20,20));
	write_coord(origin[2]+random_num(-20,20));
	write_short(g_blood_spray);
	write_short(g_blood_drop);
	write_byte(255);
	write_byte(15);
	message_end();
}

sw_light(Float:originF[3])
{
	new origin[3];
	FVecIVec(originF,origin);

	// light effect
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_DLIGHT);
	write_coord(origin[0]); // x
	write_coord(origin[1]); // y
	write_coord(origin[2]); // z
	write_byte(floatround(240.0/5.0)); // radius
	write_byte(0); // r
	write_byte(206);// g
	write_byte(209); // b
	write_byte(8); // life
	write_byte(60); // decay rate
	message_end();
}

sw_ChillPlayer(id)
{
	//Set glow
	set_pev(id, pev_renderfx, kRenderFxGlowShell);
	set_pev(id, pev_rendermode, kRenderNormal);
	set_pev(id, pev_rendercolor, {0.0, 206.0, 209.0});
	set_pev(id, pev_renderamt, 25.0);

	//Set chill state
	set_pev(id, USER_CHILLED, true);

	//Retrieve player old maxspeed
	new Float:fuser_mspeed;
	pev(id, pev_maxspeed, fuser_mspeed);
	set_pev(id, USER_DEF_MAXSPEED, fuser_mspeed);

	//Calculate his new maxspeed
	new Float:chillyspeed = (get_pcvar_float(g_cvar_snowball_chill_speed)) * fuser_mspeed;

	//Set his new maxspeed
	set_pev(id, pev_maxspeed, chillyspeed);

	//Add blue fade on players screen
	message_begin(MSG_ONE, g_msgScreenFade,_,id);
	write_short(floatround(4096.0 * get_pcvar_float(g_cvar_sb_chill_duration))); // duration
	write_short(floatround(3072.0 * get_pcvar_float(g_cvar_sb_chill_duration))); // hold time
	write_short(0x0000); // flags
	write_byte(0); // red
	write_byte(206); // green
	write_byte(209); // blue
	write_byte(100); // alpha
	message_end();
}

public task_UnChill(id)
{
	id -= TASK_SNOWBALL_UNCHILL;

	if(!is_user_alive(id) && is_user_connected(id))
	{
		//Delete glow
		set_pev(id, pev_renderfx, kRenderFxNone);
		set_pev(id, pev_rendermode, kRenderNormal);
		set_pev(id, pev_rendercolor, {0.0, 0.0, 0.0});
		set_pev(id, pev_renderamt, 25.0);
		return;
	}

	new Float:origin[3];
	pev(id, pev_origin, origin);

	sw_UnChill(id, origin);
}

sw_UnChill(id,Float:fOrigin[3])
{
	//Make some variables
	new origin[3];

	//Change origin from float to integer
	FVecIVec(fOrigin,origin);

	//Delete glow
	set_pev(id, pev_renderfx, kRenderFxNone);
	set_pev(id, pev_rendermode, kRenderNormal);
	set_pev(id, pev_rendercolor, {0.0, 0.0, 0.0});
	set_pev(id, pev_renderamt, 25.0);

	//Restore his maxspeed
	new Float:default_mspeed;
	pev(id, USER_DEF_MAXSPEED, default_mspeed);
	set_pev(id, pev_maxspeed, default_mspeed);

	//Set chill state
	set_pev(id, USER_CHILLED, false);

	// clear tint
	message_begin(MSG_ONE,g_msgScreenFade,_,id);
	write_short(0); // duration
	write_short(0); // hold time
	write_short(0x0000); // flags
	write_byte(0); // red
	write_byte(0); // green
	write_byte(0); // blue
	write_byte(255);// alpha
	message_end();

	//Make glass effect
	message_begin(MSG_BROADCAST,SVC_TEMPENTITY);
	write_byte(TE_BREAKMODEL);
	write_coord(origin[0]); // x
	write_coord(origin[1]); // y
	write_coord(origin[2] + 24); // z
	write_coord(16); // size x
	write_coord(16); // size y
	write_coord(16); // size z
	write_coord(random_num(-50,50)); // velocity x
	write_coord(random_num(-50,50)); // velocity y
	write_coord(25); // velocity z
	write_byte(10); // random velocity
	write_short(g_glassgibs); // model
	write_byte(10); // count
	write_byte(25); // life
	write_byte(0x01); // flags
	message_end();

	//Emit sound
	engfunc(EngFunc_EmitSound,id,CHAN_AUTO,SNOWBALL_UNCHILL_SND,1.0,ATTN_NORM,0,PITCH_NORM);
}

public fw_hegrenade_deploy_post(const iEnt)
{
	if(g_forward_users[U_HAM_FW_HEGRENADE_DEPLOY_POST] <= 0)
	{
		DisableHamForward(Ham_fw_hegrenade_deploy_post);
		return;
	}

	new id = get_pdata_cbase(iEnt, m_iWeaponOwner, WEAPON_LINUXDIFF);

	if(jb_get_current_day() == iDAYS_ID[DAY_DODGEBALL] || jb_is_user_inminigame(id) == iMINIGAMES_ID[MINIGAME_DODGEBALL])
	{
		set_pev(id, pev_viewmodel2, V_DODGEBALL_MDL);
		set_pev(id, pev_weaponmodel2, P_DODGEBALL_MDL);
	}
}

public event_CurWeapon(id)
{
	if(g_forward_users[U_FW_CUR_WEAPON] <= 0) return PLUGIN_CONTINUE;

	switch( read_data(2) )
	{
		case CSW_FLASHBANG:
		{
			if(jb_get_current_day() == iDAYS_ID[DAY_SNOWBALL] || jb_is_user_inminigame(id) == iMINIGAMES_ID[MINIGAME_SNOWBALL])
			{
				set_pev(id, pev_viewmodel2, V_SNOW_BALL_MDL);
				set_pev(id, pev_weaponmodel2, P_SNOW_BALL_MDL);
			}
		}
	}

	return PLUGIN_CONTINUE;
}

public fw_SetModel_pre(ent, const model[])
{
	if(g_forward_users[U_FM_FW_SETMODEL_PRE] <= 0 && FM_FW_SETMODEL_PRE)
	{
		unregister_forward(FM_SetModel, FM_FW_SETMODEL_PRE);
		FM_FW_SETMODEL_PRE = 0;
		return FMRES_IGNORED;
	}

	//Check ent validity
	if(!pev_valid(ent))
		return FMRES_IGNORED;

	static curday, owner;
	curday = jb_get_current_day();
	owner = pev(ent, pev_owner); // owner of ent

	if(!is_user_connected(owner)) return FMRES_IGNORED;

	if(curday == iDAYS_ID[DAY_DODGEBALL] || jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_DODGEBALL]))
	{
		//If model is equal to HE model, change it to dodgeball model
		if(model[9] == 'h' && model[10] == 'e')
		{
			// user not in minigame
			if(curday != iDAYS_ID[DAY_DODGEBALL] && jb_is_user_inminigame(owner) != iMINIGAMES_ID[MINIGAME_DODGEBALL])
			{
				return FMRES_IGNORED;
			}

			// set classname, team & remove user ball..
			set_pev(ent, pev_classname, DODGEBALL_ENTITY);
			set_pev(ent, pev_team, get_user_team(owner));
			g_user_has_dodgeball &= ~(1<<(owner&31));

			//Set model
			engfunc(EngFunc_SetModel, ent, W_DODGEBALL_MDL);
			set_pev(ent, pev_body, g_WorldDodgeballModelBody);

			//Set small effects
			set_pev(ent, pev_movetype, MOVETYPE_BOUNCE);
			set_pev(ent, pev_solid, SOLID_TRIGGER);
			engfunc(EngFunc_SetSize, ent, Float:{-6.0, -6.0, -6.0}, Float:{6.0, 6.0, 6.0});
			set_pev(ent, pev_friction, 0.6);
			set_pev(ent, pev_health, 100.0);
			set_pev(ent, pev_takedamage, DAMAGE_NO);

			//Block from exploding
			set_pev(ent, pev_dmgtime, get_gametime() + 99999.0)

			//Set less gravity, so it will be "real"
			set_pev(ent,pev_gravity, get_pcvar_float(g_cvar_dodgeball_grav));

			//Get grenade velocity
			static Float:velocity[3], Float:cvar_velocity; cvar_velocity = get_pcvar_float(g_cvar_dodgeball_velocity);
			pev(owner, pev_v_angle, velocity);
			//Calculate new velocity
			angle_vector(velocity, ANGLEVECTOR_FORWARD, velocity);
			velocity[0] *= cvar_velocity;
			velocity[1] *= cvar_velocity;
			velocity[2] *= cvar_velocity;

			//Set new velocity
			set_pev(ent, pev_velocity, velocity);

			return FMRES_SUPERCEDE;
		}

		return FMRES_IGNORED;
	}
	if(curday == iDAYS_ID[DAY_SNOWBALL] || jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_SNOWBALL]))
	{
		//If model is equal to HE model, change it to snowball model
		if(equal(model[7], "w_flashbang", 11))
		{
			// user not in minigame
			if(curday != iDAYS_ID[DAY_SNOWBALL] && jb_is_user_inminigame(owner) != iMINIGAMES_ID[MINIGAME_SNOWBALL])
			{
				return FMRES_IGNORED;
			}

			//Set classname
			set_pev(ent, pev_classname, SNOWBALL_ENTITY);

			//Set model
			engfunc(EngFunc_SetModel, ent, W_SNOW_BALL_MDL);

			//Set Solidity
			set_pev(ent, pev_solid, SOLID_TRIGGER);
			engfunc(EngFunc_SetSize, ent, Float:{-0.5,-0.5,-0.5}, Float:{0.5,0.5,0.5});

			//Block from exploding
			set_pev(ent, pev_dmgtime, get_gametime() + 9999.0);

			//Set less gravity, so it will be "real" snowball
			set_pev(ent,pev_gravity, get_pcvar_float(g_cvar_snowball_grav));

			//Get grenade velocity
			static Float:velocity[3], Float:cvar_velocity; cvar_velocity = get_pcvar_float(g_cvar_snowball_velocity);
			pev(owner, pev_v_angle, velocity);
			//Calculate new velocity
			angle_vector(velocity, ANGLEVECTOR_FORWARD, velocity);
			velocity[0] *= cvar_velocity;
			velocity[1] *= cvar_velocity;
			velocity[2] *= cvar_velocity;

			//Set new velocity
			set_pev(ent, pev_velocity, velocity);

			return FMRES_SUPERCEDE;
		}
	}
	return FMRES_IGNORED;
}

const m_flNextSecondaryAttack = 47;

public fw_usp_deploy_pre( usp )
{
	const m_fWeaponState = 74;
	const WEAPONSTATE_USP_SILENCED = 1;

	new fWeaponState = get_pdata_int(usp, m_fWeaponState, 4);
	if( ~fWeaponState & WEAPONSTATE_USP_SILENCED )
	{
		set_pdata_int(usp, m_fWeaponState, fWeaponState | WEAPONSTATE_USP_SILENCED, 4);
	}

	set_pdata_float(usp, m_flNextSecondaryAttack, 9999.9, 4);
}

public fw_usp_secondaryattack_pre( usp )
{
	set_pdata_float(usp, m_flNextSecondaryAttack, 9999.9, 4);
	return HAM_SUPERCEDE;
}

public fw_player_jump_post(id)
{
	if(!is_user_alive(id))
		return;

	if(jb_get_current_day() == iDAYS_ID[DAY_USPNINJA])
	{
		new buttons = pev(id, pev_button);            // buttons in current frame
		new oldbuttons = pev(id, pev_oldbuttons);    // buttons in previous frame

		if((buttons & IN_JUMP) && !(oldbuttons & IN_JUMP) && pev(id, pev_flags) & FL_ONGROUND)
		{
			new Float:fBoost = (get_pcvar_float(g_cvar_uspninja_jumpboost));
			new Float:fVelo[3];
			entity_get_vector(id, EV_VEC_velocity, fVelo);
			fVelo[2] = fBoost;
			entity_set_vector(id, EV_VEC_velocity, fVelo);
		}
	}
}

public fw_player_touch_post(touched /* Aka player */, toucher)
{
	if(g_forward_users[U_HAM_FW_PLAYER_TOUCH_POST] <= 0)
	{
		DisableHamForward(Ham_fw_player_touch_post);
		return;
	}

	if(!pev_valid(toucher))
		return;

	static sClassname[32];
	pev(touched, pev_classname, sClassname, charsmax(sClassname));
	if(!equal(sClassname, "player"))
		return;

	pev(toucher, pev_classname, sClassname, charsmax(sClassname));
	if(!equal(sClassname, "player"))
		return;

	if(jb_get_current_day() == iDAYS_ID[DAY_MARIO] || (jb_is_minigame_active(iMINIGAMES_ID[MINIGAME_MARIO]) &&
		jb_is_user_inminigame(touched) == iMINIGAMES_ID[MINIGAME_MARIO] &&
		jb_is_user_inminigame(toucher) == iMINIGAMES_ID[MINIGAME_MARIO] ))
	{
		static ground; ground = pev(touched, pev_groundentity);

		if(is_user_alive(ground) && ground == toucher)
		{
			ExecuteHamB(Ham_Killed, ground, touched, 2);
			return;
		}
	}
}

public fw_player_takedmg_pre(victim, inflictor, attacker, Float:dmg, dmgbits)
{
	if(g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] <= 0)
	{
		DisableHamForward(Ham_fw_player_takedmg_pre);
		return HAM_IGNORED;
	}

	/* Damage by nature / world */
	static iDay; iDay = jb_get_current_day();
	if(iDay == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		if(check_flag(g_user_nightcrawler,victim) && dmg > 0.0 && (dmgbits & DMG_FALL))
		{
			SetHamParamFloat(4, 0.0);
			return HAM_HANDLED;
		}
		return HAM_IGNORED;
	}

	if(iDay == iDAYS_ID[DAY_USPNINJA])
	{
		if(dmgbits & DMG_FALL && dmg > 0.0)
		{
			SetHamParamFloat(4, 0.0);
			return HAM_HANDLED;
		}
		return HAM_IGNORED;
	}

	if(!(1 <= attacker <= g_iMaxplayers) || victim == attacker) return HAM_IGNORED;

	static att_minigame, vic_minigame;
	vic_minigame = jb_is_user_inminigame(victim);
	att_minigame = jb_is_user_inminigame(attacker);

	if(iDay == iDAYS_ID[DAY_MARIO] ||
	((vic_minigame == att_minigame) && (att_minigame == iMINIGAMES_ID[MINIGAME_MARIO]))
		)
	{
		if(dmgbits != (DMG_GENERIC|DMG_CRUSH) || inflictor != attacker) // for future use? since mario day is pretty much boring!
		{
			SetHamParamFloat(4, 0.0);
			return HAM_HANDLED;
		}

		return HAM_IGNORED;
	}

	if(iDay == iDAYS_ID[DAY_DODGEBALL] ||
	((vic_minigame == att_minigame) && (att_minigame == iMINIGAMES_ID[MINIGAME_DODGEBALL]))
		)
	{
		if(dmgbits != DMG_ENERGYBEAM || inflictor == attacker)
		{
			SetHamParamFloat(4, 0.0);
			return HAM_HANDLED;
		}

		return HAM_IGNORED;
	}

	if(iDay == iDAYS_ID[DAY_SNOWBALL] ||
	((vic_minigame == att_minigame) && (att_minigame == iMINIGAMES_ID[MINIGAME_SNOWBALL]))
		)
	{
		if(dmgbits != DMG_FREEZE || inflictor == attacker)
		{
			SetHamParamFloat(4, 0.0);
			return HAM_HANDLED;
		}

		return HAM_IGNORED;
	}

	return HAM_IGNORED;
}

public fw_player_takedmg_post(victim, inflictor, attacker, Float:dmg, dmgbits)
{
	if(!is_user_alive(victim))
		return HAM_IGNORED;

	if(jb_get_current_day() == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		if(g_user_nightcrawler & (1<<(31&victim)) && dmg > 0.0)
		{
			g_user_invisible &= ~(1<<(31&victim));
			if(!task_exists(victim+TASK_INVISIBLE))
				set_task(get_pcvar_float(g_cvar_day_nc_hit_appear_dur), "task_invisible", victim+TASK_INVISIBLE);
		}
	}

	return HAM_IGNORED;
}

public task_invisible(taskid)
{
	new id = taskid - TASK_INVISIBLE;

	if(!is_user_alive(id))
	{
		remove_task(taskid);
		return;
	}

	g_user_invisible |= (1<<(31&id));
	remove_task(taskid);
}

public TraceAttack(victim, attacker, Float:damage, Float:direction[3], tracehandle, damagebits)
{
	if(g_forward_users[U_HAM_FW_PLAYER_TRACEATTACK_PRE] <= 0)
	{
		DisableHamForward(g_hTraceAttack);
		return HAM_IGNORED;
	}

	if( victim != attacker && (1 <= attacker <= g_iMaxplayers) )
	{
		if(jb_get_current_day() == DAY_NONE)
		{
			static vteam, ateam;
			vteam = fm_get_user_team(victim);
			ateam = fm_get_user_team(attacker);

			if(ateam != vteam) return HAM_IGNORED;

			static att_minigame, vic_minigame;
			vic_minigame = jb_is_user_inminigame(victim);
			att_minigame = jb_is_user_inminigame(attacker);

			if(((vic_minigame == iMINIGAMES_ID[MINIGAME_MARIO]) && (att_minigame == iMINIGAMES_ID[MINIGAME_MARIO])) ||
			((vic_minigame == iMINIGAMES_ID[MINIGAME_DODGEBALL]) && (att_minigame == iMINIGAMES_ID[MINIGAME_DODGEBALL])) ||
			((vic_minigame == iMINIGAMES_ID[MINIGAME_SNOWBALL]) && (att_minigame == iMINIGAMES_ID[MINIGAME_SNOWBALL])))
			{
				SetHamParamFloat(3, 0.0);
				return HAM_HANDLED;
			}

			return HAM_IGNORED;
		}

		SetHamParamFloat(3, 0.0);
		return HAM_HANDLED;
	}
	return HAM_IGNORED
}

drop_dodgeball(Float:fOrigin[3])
{
	new iEnt = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"));

	if(!iEnt)
	{
		log_amx("failed to drop the dodgeball!");
		return;
	}

	fOrigin[2] += 50.0;
	set_pev(iEnt, pev_classname, DODGEBALL_ENTITY);
	set_pev(iEnt, pev_origin, fOrigin);
	engfunc(EngFunc_SetModel, iEnt, W_DODGEBALL_MDL);
	set_pev(iEnt, pev_movetype, MOVETYPE_BOUNCE);
	set_pev(iEnt, pev_solid, SOLID_TRIGGER);
	engfunc(EngFunc_SetSize, iEnt, Float:{-6.0, -6.0, -6.0}, Float:{6.0, 6.0, 6.0});
	set_pev(iEnt, pev_friction, 0.6);
	set_pev(iEnt, pev_health, 100.0);
	set_pev(iEnt, pev_takedamage, DAMAGE_NO);

	drop_to_floor(iEnt);
}

public fw_player_killed_post(victim, attacker, shouldgib)
{
	if(g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] <= 0)
	{
		DisableHamForward(Ham_fw_player_killed_post);
		return HAM_IGNORED;
	}

	new dayid = jb_get_current_day();
	if(dayid == iDAYS_ID[DAY_DEATHMATCH] || g_respawn_enabled)
	{
		clcmd_respawn(victim);
	}

	if(dayid == iDAYS_ID[DAY_DODGEBALL] ||
		jb_is_user_inminigame(victim) == iMINIGAMES_ID[MINIGAME_DODGEBALL])
	{
		new Float:vOrigin[3];
		pev(victim, pev_origin, vOrigin);
		drop_dodgeball(vOrigin);
	}

	if(dayid == iDAYS_ID[DAY_ZOMBIES])
	{
		CheckZombieDayWinStatus();
	}
	return HAM_IGNORED;
}

public task_nightcrawler_hudmsg(taskid)
{
	new id = taskid - TASK_NC_HUDMSG, player = id;

	if(!is_user_alive(id))
	{
		// check the user if he's spectating someone
		player = pev(id, pev_iuser2);

		if(!is_user_alive(player))
			return
	}

	new szMsgSync[64];

	if(g_user_nightcrawler & (1<<(31&player)))
	{
		set_hudmessage(200, 0, 0, 0.10, 0.85, 0, 1.0, 1.0, 0.1, 0.3, -1);
		formatex(szMsgSync, charsmax(szMsgSync), "%L: %d %L: %i/%i", LANG_PLAYER, "HEALTH", get_user_health(player),
		LANG_PLAYER, "MANA", nc_usermana[player], nc_usermaxmana[player]);
		ShowSyncHudMsg(id, g_msgsync, szMsgSync);
	}
}

public clcmd_deathmatch(id, level, cid)
{
	if(!(get_user_flags(id) & level))
	{
		console_print(id, "%L", LANG_PLAYER, "COMMAND_NOACCESS");
		return 1;
	}

	if(!g_respawn_enabled) // Enable auto respawn
	{
		g_respawn_enabled = true;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] ++;
		check_fwds();

		console_print(id, "%L", id, "CONSOLE_DEATHMATCH_IS_ENABLED");
		cprint_chat(0, _, "%L", id, "CHAT_DEATHMATCH_IS_ENABLED");
	}
	else
	{
		g_respawn_enabled = false;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] --;
		console_print(id, "%L", id, "CONSOLE_DEATHMATCH_IS_DISABLED");
		cprint_chat(0, _, "%L", id, "CHAT_DEATHMATCH_IS_DISABLED");
	}
	return 1;
}

public clcmd_respawn(id)
{
	if(!g_respawn_enabled || is_user_alive(id) || !(TEAM_PRISONERS <= get_user_team(id) <= TEAM_GUARDS))
		return;

	if(!task_exists(id+TASK_RESPAWN))
	{
		g_user_gametime[id] = get_pcvar_float(g_cvar_respawn_time) + get_gametime();
		set_task(0.1, "task_respawn_player", id+TASK_RESPAWN, _, _, "b");
	}
}

public fw_player_respawn_post(id)
{
	if(!is_user_alive(id))
		return HAM_IGNORED;

	new cur_day = jb_get_current_day();

	if(cur_day <= DAY_NONE)
		return HAM_IGNORED;

	if(cur_day == iDAYS_ID[DAY_KNIVES])
	{
		new players[32], ctnum, tnum;
		get_players(players, tnum, "ae", "TERRORIST");
		get_players(players, ctnum, "ae", "CT");

		if(!ctnum || !tnum)
			return HAM_IGNORED;

		new Float:cvar_cthp = get_pcvar_float(g_cvar_knives_cthp);
		new Float:cthp = cvar_cthp ? cvar_cthp:(float(((tnum/ctnum)*100)));
		if(cthp <= 0.0) cthp = 100.0;

		new Float:cvar_tshp = get_pcvar_float(g_cvar_knives_tshp);
		new Float:tshp = cvar_tshp ? cvar_tshp:(float(((ctnum/tnum)*100)));
		if(tshp <= 0.0) tshp = 100.0;

		strip_weapons(id, false);
		jb_block_user_weapons(id, true, ~player_flag(CSW_KNIFE));
		set_pev(id, pev_health, (get_user_team(id) == TEAM_GUARDS) ? cthp:tshp);
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_DEATHMATCH])
	{
		jb_block_user_weapons(id, false);

		strip_weapons(id, false);
		show_newmenu(id, wpn_menu1, .bAlive=true);
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_SCOUTKNIVEZ])
	{
		strip_weapons(id, false);

		jb_block_user_weapons(id, true, ~(player_flag(CSW_SCOUT)|player_flag(CSW_KNIFE)));

		set_pev(id, pev_gravity, get_pcvar_float(g_cvar_scoutknivez_gravity));
		ham_give_weapon(id, WEAPONS_INFO[WPN_SCOUT][WEAPON_ID], WEAPONS_INFO[WPN_SCOUT][WEAPON_BPAMMO]);
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_MARIO])
	{
		set_pev(id, pev_gravity, get_pcvar_float(g_cvar_mario_gravity));
		jb_block_user_weapons(id, true);
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_USPNINJA])
	{
		jb_block_user_weapons(id, true, ~(player_flag(CSW_USP)|player_flag(CSW_KNIFE)));
		strip_weapons(id, false);
		ham_give_weapon(id, WEAPONS_INFO[WPN_USP][WEAPON_ID], WEAPONS_INFO[WPN_USP][WEAPON_BPAMMO]);
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_DODGEBALL])
	{
		jb_block_user_weapons(id,true, ~(player_flag(CSW_HEGRENADE)));
		strip_weapons(id, true);

		if(get_pcvar_num(g_cvar_dodgeball_free4all))
		{
			give_dodgeball(id);
		}
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_SNOWBALL])
	{
		jb_block_user_weapons(id,true,~(player_flag(CSW_FLASHBANG)|player_flag(CSW_KNIFE)));
		strip_weapons(id,false);
		ham_give_weapon(id, "weapon_flashbang", 999);
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_SNIPER])
	{
		new ctallowed_wpns = player_flag(CSW_AWP)|player_flag(CSW_GLOCK18)|player_flag(CSW_KNIFE);
		new tsallowed_wpns = player_flag(CSW_GLOCK18)|player_flag(CSW_KNIFE);

		switch( fm_get_user_team(id) )
		{
			case TEAM_GUARDS:
			{
				jb_block_user_weapons(id,true,~ctallowed_wpns);
				strip_weapons(id, false);
				ham_give_weapon(id, WEAPONS_INFO[WPN_AWP][WEAPON_ID], WEAPONS_INFO[WPN_AWP][WEAPON_BPAMMO]);
			}
			case TEAM_PRISONERS:
			{
				jb_block_user_weapons(id,true,~tsallowed_wpns);
				strip_weapons(id, false);
				ham_give_weapon(id, WEAPONS_INFO[WPN_GLOCK][WEAPON_ID], WEAPONS_INFO[WPN_GLOCK][WEAPON_BPAMMO]);
			}
		}
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_SPACE])
	{
		new ctallowed_wpns = player_flag(CSW_AWP)|player_flag(CSW_KNIFE);
		new tsallowed_wpns = player_flag(CSW_SCOUT)|player_flag(CSW_KNIFE);

		set_pev(id, pev_gravity, get_pcvar_float(g_cvar_spaceday_gravity));

		switch( fm_get_user_team(id) )
		{
			case TEAM_GUARDS:
			{
				jb_block_user_weapons(id,true,~ctallowed_wpns);
				strip_weapons(id, false);
				ham_give_weapon(id, WEAPONS_INFO[WPN_AWP][WEAPON_ID], WEAPONS_INFO[WPN_AWP][WEAPON_BPAMMO]);
			}
			case TEAM_PRISONERS:
			{
				jb_block_user_weapons(id,true,~tsallowed_wpns);
				strip_weapons(id, false);
				ham_give_weapon(id, WEAPONS_INFO[WPN_SCOUT][WEAPON_ID], WEAPONS_INFO[WPN_SCOUT][WEAPON_BPAMMO]);
			}
		}
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_HNS])
	{
		new Float:hiding_duration = get_pcvar_float(g_cvar_hidenseek_hidedur);
		new Float:seeking_duration = get_pcvar_float(g_cvar_hidenseek_seekdur);
		new Float:total_time = seeking_duration + hiding_duration;
		new Float:curtime = jb_get_day_length(cur_day)
		new Float:hiding_duration_left = (hiding_duration - (total_time-curtime));
		new bool:bHide_time = (hiding_duration_left >= 0) ? true:false;

		new Float:fGravity_guard = get_pcvar_float(g_cvar_hidenseek_gr_grav);
		new Float:fGravity_prisoner = get_pcvar_float(g_cvar_hidenseek_pr_grav);

		switch( fm_get_user_team(id) )
		{
			case TEAM_GUARDS:
			{
				set_user_gravity(id, fGravity_guard);
				set_hudmessage(98, 216, 100, -1.0, 0.69, 1, 6.0, 4.0, _, _, -1);
				if(bHide_time)
				{
					show_hudmessage(id, "You will have %1.f Seconds to seek for the prisoners^nand to eliminate them!^n[Hide & Seek Day]", seeking_duration);
					UTIL_FadeToBlack(id, 0.0, true);
					set_pev(id, pev_flags, pev(id, pev_flags) | FL_FROZEN);
					set_user_godmode(id, true);
				}
				else
					show_hudmessage(id, "Seek Seek Seek^nfor the prisoners and eliminate them!^n[Hide & Seek Day]");
				jb_block_user_weapons(id,false);
				strip_weapons(id, false);
				show_newmenu(id, wpn_menu1, .bAlive=true);
			}
			case TEAM_PRISONERS:
			{
				set_hudmessage(98, 216, 100, -1.0, 0.69, 1, 6.0, 4.0, _, _, -1);
				if(bHide_time)
					show_hudmessage(id, "You have %1.f Seconds to hide^nAnd After the Seeking time is finished^nyou will be armed automatically!^n [Hide & Seek Day]", hiding_duration_left);
				else
					show_hudmessage(id, "When the Seeking time is finished^nyou will be armed automatically!^n [Hide & Seek Day]");

				jb_block_user_weapons(id,true,~player_flag(CSW_KNIFE));
				set_pev(id, pev_gravity, fGravity_prisoner);
				strip_weapons(id, false);
			}
		}
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_ZOMBIES])
	{
		new players[32], pnum, humans, zombies;
		get_players(players, pnum, "a");
		for(new i = 0, player; i < pnum; i++)
		{
			player = players[i];

			if(check_flag(g_user_zombie,player))
			{
				zombies++;
				continue;
			}
			if(check_flag(g_user_human,player))
			{
				humans++;
				continue;
			}
		}

		enum (+=1) {
			DAY_ZOMBIE_RESPAWN_RANDOMLY = 0,
			DAY_ZOMBIE_RESPAWN_AS_ZOMBIE,
			DAY_ZOMBIE_RESPAWN_AS_HUMAN
		}

		new iRespawnAs = get_pcvar_num(g_cvar_zombies_respawn_as);

		if( iRespawnAs == DAY_ZOMBIE_RESPAWN_RANDOMLY )
		{
			iRespawnAs = random_num(DAY_ZOMBIE_RESPAWN_AS_ZOMBIE, DAY_ZOMBIE_RESPAWN_AS_HUMAN);
		}

		switch( iRespawnAs )
		{
			case DAY_ZOMBIE_RESPAWN_AS_ZOMBIE:
			{
				zombies++;
				set_flag(g_user_zombie,id);
				jb_block_user_weapons(id,true,~player_flag(CSW_KNIFE));

				jb_bind_user_enemies_var(id, "g_user_human");
				jb_bind_user_allies_var(id, "g_user_zombie");

				// strip user wpns.
				strip_weapons(id, false);

				// Zombie health.
				new Float:fZMHealth = get_pcvar_float(g_cvar_zombies_zmhp);

				if(fZMHealth <= 100.0)
				{
					// lets add 1000 hp for zombies per human.
					if(fZMHealth == 0.0) fZMHealth = 1000.0;
					fZMHealth = (floatabs(fZMHealth) * (humans / zombies));
				}

				set_pev(id, pev_health, fZMHealth);

				// Zombie Speed.
				set_pev(id, pev_maxspeed, get_pcvar_float(g_cvar_zombies_zmsp));

				// Zombie Gravity
				set_pev(id, pev_gravity, get_pcvar_float(g_cvar_zombies_zmgrav));

				// setting user model...
				cs_set_player_model(id, ZM_DAY_ZOMBIE_MODEL);
				set_pev(id, pev_body, g_iZombie_model_body);

				// infection effect...
				infection_effects(id);
			}
			case DAY_ZOMBIE_RESPAWN_AS_HUMAN:
			{
				humans++;
				set_flag(g_user_human,id);
				show_newmenu(id, wpn_menu1, .bAlive=true);
				jb_bind_user_enemies_var(id, "g_user_zombie");
				jb_bind_user_allies_var(id, "g_user_human");
			}
		}
		return HAM_IGNORED;
	}
	if(cur_day == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		new Float:fNCHealth = get_pcvar_float(g_cvar_ncs_nchp);
		new Float:fNCSpeed = get_pcvar_float(g_cvar_ncs_ncsp);
		new Float:fNCGravity = get_pcvar_float(g_cvar_ncs_ncgrav);

		if(!task_exists(id+TASK_NC_HUDMSG))
		{
			set_task(1.0, "task_nightcrawler_hudmsg", id+TASK_NC_HUDMSG, _, _, "b");
		}

		strip_weapons(id, false);

		switch( fm_get_user_team(id) )
		{
			case TEAM_GUARDS:
			{
				// set user nightcrawler.
				g_user_nightcrawler |= (1<<(31&id));
				g_user_invisible |= (1<<(31&id));
				nc_usermana[id] = nc_usermaxmana[id] = get_pcvar_num(g_cvar_nc_day_maxmana);

				jb_block_user_weapons(id,true,~player_flag(CSW_KNIFE));


				// set gravity, hp, speed, nvg.
				set_pev(id, pev_gravity, fNCGravity);
				set_pev(id, pev_health, fNCHealth);
				set_pev(id, pev_maxspeed, fNCSpeed);
				cs_set_user_nvg(id, .nvgoggles = 1);

				// setting user model...
				cs_set_player_model(id,NC_DAY_NCRAWLER_MODEL);
				set_pev(id, pev_body, g_iNightcrawler_model_body);
			}
			case TEAM_PRISONERS:
			{
				// set user human.
				jb_block_user_weapons(id,false);
				g_user_nightcrawler &= ~(1<<(31&id));
				g_user_invisible &= ~(1<<(31&id));
				show_newmenu(id, wpn_menu1, .bAlive=true);
			}
		}
		return HAM_IGNORED;
	}
	return HAM_IGNORED;
}

friendlyfire(bool:bOn=true)
{
	if(bOn == true)
	{
		g_forward_users[U_HAM_FW_PLAYER_TRACEATTACK_PRE] ++;
		g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] ++;
	}
	else
	{
		g_forward_users[U_HAM_FW_PLAYER_TRACEATTACK_PRE] --;
		g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] --;
	}
}

public fw_message_TextMsg(msg_id, msg_dest, entity)
{
	if(g_forward_users[U_FW_TXTMSG_MSG] <= 0 && FW_REG_MESSAGE_TXTMSG != Invalid_Message_Handler)
	{
		unregister_message(g_msgTextMsg, FW_REG_MESSAGE_TXTMSG);
		FW_REG_MESSAGE_TXTMSG = Invalid_Message_Handler;
		return PLUGIN_CONTINUE;
	}

	new x;
	if((x=get_msg_args()) > 3)
	{
		new szRadio[16];
		get_msg_arg_string(3, szRadio, charsmax(szRadio));

		if(!equal(szRadio, "#Game_radio"))
			return PLUGIN_CONTINUE;

		new szMessage[20];

		if(x > 5)
		{
			if(get_msg_argtype(6) == ARG_STRING)
			{
				get_msg_arg_string(6, szMessage, charsmax(szMessage));
				return equal(szMessage, "#Fire_in_the_hole") ? PLUGIN_HANDLED:PLUGIN_CONTINUE;
			}
		}
		else
		{
			if(get_msg_argtype(5) == ARG_STRING)
			{
				get_msg_arg_string(5, szMessage, charsmax(szMessage));
				return equal(szMessage, "#Fire_in_the_hole") ? PLUGIN_HANDLED:PLUGIN_CONTINUE;
			}
		}
	}

	return PLUGIN_CONTINUE;
}

public jb_minigames_handler( minigame_index, minigame_mode, minigame_players[33], teams[MAX_MINIGAMES_TEAMS], maxteams, players_num, bits_players )
{
	friendlyfire(true);

	get_players(g_iPRISONERS, g_iPRISONERS_NUM, "ahe", "TERRORIST");

	if(minigame_index == iMINIGAMES_ID[MINIGAME_MARIO])
	{
		g_forward_users[U_HAM_FW_PLAYER_TOUCH_POST] ++;
		check_fwds();

		new Float:gravity = get_pcvar_float(g_cvar_mario_gravity);

		for(new i, player; i < g_iPRISONERS_NUM; i++)
		{
			player = g_iPRISONERS[i];

			if(!check_flag(bits_players,player)) continue;

			set_pev(player, pev_fuser4, get_user_gravity(player));
			set_user_gravity(player, gravity);

			cprint_chat(player, _, "^4~MINIGAMES~ ^3[Mario] !yJump on your enemy's head in order to kill!")
		}

		return;
	}

	if(minigame_index == iMINIGAMES_ID[MINIGAME_DODGEBALL])
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] ++;
		g_forward_users[U_FW_SENDAUDIO_MSG] ++;
		g_forward_users[U_FW_TXTMSG_MSG] ++;
		g_forward_users[U_HAM_FW_HEGRENADE_DEPLOY_POST] ++;
		g_forward_users[U_FW_DODGEBALL_TOUCHED] ++;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] ++;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] ++;
		check_fwds();

		for(new i, player; i < g_iPRISONERS_NUM; i++)
		{
			player = g_iPRISONERS[i];

			if(!check_flag(bits_players,player)) continue;

			give_dodgeball(player);
		}
	}

	if(minigame_index == iMINIGAMES_ID[MINIGAME_SNOWBALL])
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] ++;
		g_forward_users[U_FW_SNOWBALL_TOUCHED] ++;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] ++;
		g_forward_users[U_FW_SNOWFLAKE_THINK_PRE] ++;
		g_forward_users[U_FW_SENDAUDIO_MSG] ++;
		g_forward_users[U_FW_TXTMSG_MSG] ++;
		g_forward_users[U_FW_CUR_WEAPON] ++;
		check_fwds();

		for(new i, player; i < g_iPRISONERS_NUM; i++)
		{
			player = g_iPRISONERS[i];

			if(!check_flag(bits_players,player)) continue;

			ham_give_weapon(player, "weapon_flashbang", 999);
		}
	}
}

check_fwds()
{
	if(g_forward_users[U_HAM_FW_PLAYER_TOUCH_POST] > 0)
	{
		EnableHamForward(Ham_fw_player_touch_post);
	}

	if(g_forward_users[U_HAM_FW_PLAYER_TRACEATTACK_PRE] > 0)
	{
		EnableHamForward(g_hTraceAttack);
	}

	if(g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] > 0)
	{
		EnableHamForward(Ham_fw_player_takedmg_pre);
	}

	if(g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] > 0)
	{
		EnableHamForward(Ham_fw_player_killed_post);
	}

	if(g_forward_users[U_HAM_FW_HEGRENADE_DEPLOY_POST] > 0)
	{
		EnableHamForward(Ham_fw_hegrenade_deploy_post);
	}

	if(g_forward_users[U_FW_SENDAUDIO_MSG] > 0)
	{
		if(FW_REG_MESSAGE_SAUDIO == Invalid_Message_Handler)
			FW_REG_MESSAGE_SAUDIO = register_message(g_msgSendAudio, "fw_message_audio");
	}

	if(g_forward_users[U_FW_SNOWFLAKE_THINK_PRE] > 0)
	{
		if(!FW_SNOWFLAKE_THINK_PRE)
			FW_SNOWFLAKE_THINK_PRE = register_think(SNOWFLAKE_ENTITY, "fw_SnowFlake_Think");
	}

	if(g_forward_users[U_FM_FW_EMITSOUND_PRE] > 0)
	{
		if(!FM_FW_EMITSOUND_PRE)
			FM_FW_EMITSOUND_PRE = register_forward(FM_EmitSound, "fw_emitsound_pre");
	}

	if(g_forward_users[U_FW_PLAYER_TOUCHED] > 0)
	{
		if(!FW_PLAYER_TOUCHED)
			FW_PLAYER_TOUCHED = register_touch("player", "*", "fw_player_touched");
	}

	if(g_forward_users[U_FW_DODGEBALL_TOUCHED] > 0)
	{
		if(!FW_DODGEBALL_TOUCHED)
			FW_DODGEBALL_TOUCHED = register_touch(DODGEBALL_ENTITY, "*", "fw_dodgeball_touched");
	}

	if(g_forward_users[U_FW_SNOWBALL_TOUCHED] > 0)
	{
		if(!FW_SNOWBALL_TOUCHED)
			FW_SNOWBALL_TOUCHED = register_touch(SNOWBALL_ENTITY, "*", "fw_snowball_touched");
	}

	if(g_forward_users[U_FM_FW_SETMODEL_PRE] > 0)
	{
		if(!FM_FW_SETMODEL_PRE)
			FM_FW_SETMODEL_PRE = register_forward(FM_SetModel, "fw_SetModel_pre");
	}

	if(g_forward_users[U_FW_TXTMSG_MSG] > 0)
	{
		if(FW_REG_MESSAGE_TXTMSG == Invalid_Message_Handler)
			FW_REG_MESSAGE_TXTMSG = register_message(g_msgTextMsg, "fw_message_TextMsg");
	}

	if(g_forward_users[U_FM_FW_ADDTOFULLPACK_POST] > 0)
	{
		if(!FM_FW_ADDTOFULLPACK_POST)
			FM_FW_ADDTOFULLPACK_POST = register_forward(FM_AddToFullPack, "fw_AddToFullPack_Post", true);
	}
}

public jb_minigame_ended(const Minigame_Index, const MINIGAMES_MODES:Minigame_Mode, const Winner, bits_players)
{
	get_players(g_iPRISONERS, g_iPRISONERS_NUM, "ahe", "TERRORIST");

	if(iMINIGAMES_ID[MINIGAME_MARIO] == Minigame_Index)
	{
		friendlyfire(false);
		g_forward_users[U_HAM_FW_PLAYER_TOUCH_POST] --;

		new Float:fGravity;

		for(new i, player; i < g_iPRISONERS_NUM; i++)
		{
			player = g_iPRISONERS[i];
			if(!check_flag(bits_players,player)) continue;

			pev(player, pev_fuser4, fGravity);
			set_user_gravity(player, fGravity);
		}

		return;
	}

	if(iMINIGAMES_ID[MINIGAME_DODGEBALL] == Minigame_Index)
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] --;
		g_forward_users[U_FW_SENDAUDIO_MSG] --;
		g_forward_users[U_FW_TXTMSG_MSG] --;
		g_forward_users[U_HAM_FW_HEGRENADE_DEPLOY_POST] --;
		g_forward_users[U_FW_DODGEBALL_TOUCHED] --;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] --;
		friendlyfire(false);

		// remove all users dodgeballs...
		g_user_has_dodgeball = 0;

		// remove dodgeballs..
		new iEnt = -1
		while( (iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", DODGEBALL_ENTITY)) > 0 )
		{
			set_pev(iEnt, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, iEnt);
		}

		for(new i, player; i < g_iPRISONERS_NUM; i++)
		{
			player = g_iPRISONERS[i];

			if(!check_flag(bits_players,player)) continue;

			ham_strip_weapon(player, "weapon_hegrenade");
		}

		return;
	}

	if(iMINIGAMES_ID[MINIGAME_SNOWBALL] == Minigame_Index)
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] --;
		g_forward_users[U_FW_SNOWBALL_TOUCHED] --;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] --;
		g_forward_users[U_FW_SNOWFLAKE_THINK_PRE] --;
		g_forward_users[U_FW_SENDAUDIO_MSG] --;
		g_forward_users[U_FW_TXTMSG_MSG] --;
		g_forward_users[U_FW_CUR_WEAPON] --;
		friendlyfire( false );

		// remove snow splashes..
		new iEnt;
		while( (iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", SNOWFLAKE_ENTITY)) > 0 )
		{
			set_pev(iEnt, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, iEnt);
		}

		while( (iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", SNOWBALL_ENTITY)) > 0 )
		{
			set_pev(iEnt, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, iEnt);
		}

		for(new i, player; i < g_iPRISONERS_NUM; i++)
		{
			player = g_iPRISONERS[i];

			if(!check_flag(bits_players,player)) continue;

			ham_strip_weapon(player, "weapon_flashbang");
		}
	}
}

public jb_day_started(iDayid)
{
	if(iDayid == iDAYS_ID[DAY_KNIVES])
	{
		new players[32], pnum, ctnum, tnum;
		get_players(players, ctnum, "ahe", "CT");
		get_players(players, tnum, "ahe", "TERRORIST");

		// Open the cells...
		jb_cells();

		new Float:cvar_cthp = get_pcvar_float(g_cvar_knives_cthp);
		new Float:cthp = cvar_cthp ? cvar_cthp : (float(((tnum/max(ctnum,1))*100)));
		if(!cthp) cthp = 100.0

		new Float:cvar_tshp = get_pcvar_float(g_cvar_knives_cthp), id;
		new Float:tshp = cvar_tshp ? cvar_tshp : (float(((ctnum/max(tnum,1))*100)));
		if(!tshp) tshp = 100.0;

		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			id = players[i]

			jb_block_user_weapons(id, true, ~player_flag(CSW_KNIFE))
			strip_weapons(id, false)
			set_pev(id, pev_health, (get_user_team(id) == TEAM_GUARDS) ? cthp:tshp)
		}
	}
	else if(iDayid == iDAYS_ID[DAY_DEATHMATCH])
	{
		// Open the cells...
		jb_cells();

		create_weapons_menus();

		// Enable auto respawn
		g_respawn_enabled = true;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] ++;
		EnableHamForward(Ham_fw_weaponbox_spawn_post);

		//checking forwards availability
		check_fwds();

		new players[32], pnum, id;
		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			id = players[i]

			jb_block_user_weapons(id,false);
			strip_weapons(id, false);
			show_newmenu(id, wpn_menu1, .bAlive=true);
		}

		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_set_user_enemies(i, JB_ENEMIES_EVERYONE);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_SCOUTKNIVEZ])
	{
		// Open the cells...
		jb_cells();

		new players[32], pnum, id;
		get_players(players, pnum, "ah")

		new Float:gravity = get_pcvar_float(g_cvar_scoutknivez_gravity)

		for(new i = 0; i < pnum; i++)
		{
			id = players[i];

			jb_block_user_weapons(id, true, ~(player_flag(CSW_SCOUT)|player_flag(CSW_KNIFE)));
			strip_weapons(id, false)
			set_pev(id, pev_gravity, gravity)
			ham_give_weapon(id, "weapon_scout", WEAPONS_INFO[WPN_SCOUT][WEAPON_BPAMMO]);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_MARIO])
	{
		// Open the cells...
		jb_cells();

		g_forward_users[U_HAM_FW_PLAYER_TOUCH_POST]++;
		friendlyfire(true);

		//checking forwards availability
		check_fwds();

		new players[32], pnum, id;
		get_players(players, pnum, "ah")

		new Float:gravity = get_pcvar_float(g_cvar_mario_gravity)

		for(new i = 0; i < pnum; i++)
		{
			id = players[i]

			jb_block_user_weapons(id, true)
			strip_weapons(id, true)
			set_pev(id, pev_gravity, gravity)
		}
	}
	else if(iDayid == iDAYS_ID[DAY_USPNINJA])
	{
		//enable some effects..
		set_fog_effect(true)
		set_lights("d")

		EnableHamForward(Ham_fw_player_jump_post);
		EnableHamForward(Ham_fw_usp_deploy_pre);
		EnableHamForward(Ham_fw_usp_secondaryatt_pre);
		g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] ++;

		//checking forwards availability
		check_fwds();

		// Open the cells...
		jb_cells();

		new players[32], pnum, id;
		get_players(players, pnum, "a")

		for(new i = 0; i < pnum; i++)
		{
			id = players[i];
			jb_block_user_weapons(id, true, ~(player_flag(CSW_USP)|player_flag(CSW_KNIFE)))
			strip_weapons(id, false)
			ham_give_weapon(id, WEAPONS_INFO[WPN_USP][WEAPON_ID], WEAPONS_INFO[WPN_USP][WEAPON_BPAMMO])
		}
	}
	else if(iDayid == iDAYS_ID[DAY_DODGEBALL])
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] ++;
		g_forward_users[U_FW_SENDAUDIO_MSG] ++;
		g_forward_users[U_FW_TXTMSG_MSG] ++;
		g_forward_users[U_HAM_FW_HEGRENADE_DEPLOY_POST] ++;
		g_forward_users[U_FW_DODGEBALL_TOUCHED] ++;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] ++;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] ++;

		// Enable friendlyfire & open the cells
		jb_cells();
		friendlyfire(true);

		//checking forwards availability
		check_fwds();

		new players[32], pnum, id, chosen, var_dodgeball_free4all = get_pcvar_num(g_cvar_dodgeball_free4all);
		get_players(players, pnum, "a")

		if(!pnum)
		{
			jb_end_theday()
			return;
		}

		if(!var_dodgeball_free4all)
		{
			chosen = players[random(pnum)];

			new chosenname[32];
			get_user_name(chosen, chosenname, charsmax(chosenname));
			set_hudmessage(98, 216, 100, -1.0, 0.69, 1, 6.0, 4.0, _, _, -1);
			show_hudmessage(0, "%s has the ball^n Dodge him!!!^n[Dodge-Ball Day]", chosenname);
		}

		for(new i = 0; i < pnum; i++)
		{
			id = players[i]
			jb_block_user_weapons(id,true,~player_flag(CSW_HEGRENADE))
			strip_weapons(id, true)

			if(var_dodgeball_free4all || id == chosen)
			{
				give_dodgeball(id)
			}
		}
	}
	else if(iDayid == iDAYS_ID[DAY_SNOWBALL])
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] ++;
		g_forward_users[U_FW_SNOWBALL_TOUCHED] ++;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] ++;
		g_forward_users[U_FW_SNOWFLAKE_THINK_PRE] ++;
		g_forward_users[U_FW_SENDAUDIO_MSG] ++;
		g_forward_users[U_FW_TXTMSG_MSG] ++;
		g_forward_users[U_FW_CUR_WEAPON] ++;
		EnableHamForward(Ham_fw_knife_deploy_post);

		// Enable friendlyfire & open the cells
		jb_cells();
		friendlyfire(true);

		//checking forwards availability
		check_fwds();

		new players[32], pnum, id;
		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			id = players[i];
			strip_weapons(id,false);
			jb_block_user_weapons(id,true,~(player_flag(CSW_KNIFE)|player_flag(CSW_FLASHBANG)));
			ham_give_weapon(id, "weapon_flashbang", 999);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_SNIPER])
	{
		// Enable friendlyfire & open the cells
		jb_cells();

		new players[32], pnum, id;
		get_players(players, pnum, "a");

		new ctallowed_wpns = player_flag(CSW_AWP)|player_flag(CSW_GLOCK18)|player_flag(CSW_KNIFE);
		new tsallowed_wpns = player_flag(CSW_GLOCK18)|player_flag(CSW_KNIFE);

		for(new i = 0; i < pnum; i++)
		{
			id = players[i];

			switch( fm_get_user_team(id) )
			{
				case TEAM_GUARDS:
				{
					jb_block_user_weapons(id,true,~ctallowed_wpns)
					strip_weapons(id, false)
					ham_give_weapon(id, WEAPONS_INFO[WPN_AWP][WEAPON_ID], WEAPONS_INFO[WPN_AWP][WEAPON_BPAMMO])
				}
				case TEAM_PRISONERS:
				{
					jb_block_user_weapons(id,true,~tsallowed_wpns)
					strip_weapons(id,false)
					ham_give_weapon(id, WEAPONS_INFO[WPN_GLOCK][WEAPON_ID], WEAPONS_INFO[WPN_GLOCK][WEAPON_BPAMMO])
				}
			}
		}
	}
	else if(iDayid == iDAYS_ID[DAY_SPACE])
	{
		// open the cells...
		jb_cells()

		new ctallowed_wpns = player_flag(CSW_AWP)|player_flag(CSW_KNIFE)
		new tsallowed_wpns = player_flag(CSW_SCOUT)|player_flag(CSW_KNIFE)

		new players[32], pnum, id;
		get_players(players, pnum, "a")
		new Float:fGravity = get_pcvar_float(g_cvar_spaceday_gravity)

		for(new i = 0; i < pnum; i++)
		{
			id = players[i]
			set_pev(id, pev_gravity, fGravity)

			switch( fm_get_user_team(id) )
			{
				case TEAM_GUARDS:
				{
					jb_block_user_weapons(id,true,~ctallowed_wpns)
					strip_weapons(id,false)
					ham_give_weapon(id, WEAPONS_INFO[WPN_AWP][WEAPON_ID], WEAPONS_INFO[WPN_AWP][WEAPON_BPAMMO])
				}
				case TEAM_PRISONERS:
				{
					jb_block_user_weapons(id,true,~tsallowed_wpns)
					strip_weapons(id,false)
					ham_give_weapon(id, WEAPONS_INFO[WPN_SCOUT][WEAPON_ID], WEAPONS_INFO[WPN_SCOUT][WEAPON_BPAMMO])
				}
			}
		}
	}
	else if(iDayid == iDAYS_ID[DAY_HNS])
	{
		// effects..
		set_lights("d")
		set_fog_effect(true)

		new Float:seeking_duration = get_pcvar_float(g_cvar_hidenseek_seekdur);
		new Float:hiding_duration = get_pcvar_float(g_cvar_hidenseek_hidedur);
		new Float:total_time = seeking_duration + hiding_duration;

		if(!total_time)
		{
			jb_end_theday()
			return;
		}
		if(total_time > jb_get_day_length(iDayid))
		{
			jb_set_day_length(iDayid, total_time);
		}

		// start seeking
		set_task(hiding_duration, "task_hns_start_seeking", TASK_HNS_SEEK);

		// block ghosting
		#if defined REGAMEDLL
		EnableHookChain(ObsIsValidTarget_pre);
		EnableHookChain(ObsSetMode_pre);
		#else
		ObsIsValidTarget_pre = OrpheuRegisterHook(Observer_IsValidTarget, "Observer_IsValidTarget_Pre", OrpheuHookPre);
		ObsSetMode_pre = OrpheuRegisterHook(Observer_SetMode, "Observer_SetMode_Pre", OrpheuHookPre);
		#endif

		// create the wpns menu;
		create_weapons_menus();

		new Float:fGravity_guard = get_pcvar_float(g_cvar_hidenseek_gr_grav);
		new Float:fGravity_prisoner = get_pcvar_float(g_cvar_hidenseek_pr_grav);

		// open the cells...
		jb_cells()

		new players[32], pnum, id;
		get_players(players, pnum, "ah")

		for(new i = 0; i < pnum; i++)
		{
			id = players[i]

			switch( fm_get_user_team(id) )
			{
				case TEAM_GUARDS:
				{
					CreateMagneticSphere(.iOwner = id);

					UTIL_FadeToBlack(id, 0.0, true);
					set_pev(id, pev_flags, pev(id, pev_flags)|FL_FROZEN);
					set_user_godmode(id, true);
					set_pev(id, pev_gravity, fGravity_guard);
					set_hudmessage(98, 216, 100, -1.0, 0.69, 1, 6.0, 4.0, _, _, -1)
					show_hudmessage(id, "You will have %1.f Seconds to seek for the prisoners^nand to eliminate them!^n[Hide & Seek Day]", seeking_duration)
					show_newmenu(id, wpn_menu1, .bAlive=true);
				}
				case TEAM_PRISONERS:
				{
					set_hudmessage(98, 216, 100, -1.0, 0.69, 1, 6.0, 4.0, _, _, -1)
					show_hudmessage(id, "You have %1.f Seconds to hide^nAnd After the Seeking time finished^nyou will be armed automatically!^n [Hide & Seek Day]", hiding_duration)
					jb_block_user_weapons(id,true,~player_flag(CSW_KNIFE))
					set_pev(id, pev_gravity, fGravity_prisoner);
				}
			}

			strip_weapons(id,false)
		}
	}
	else if(iDayid == iDAYS_ID[DAY_ZOMBIES])
	{
		// effects
		set_lights("d");
		set_fog_effect(true, 0, 50, 1);

		// do stuff..
		EnableHamForward(Ham_fw_knife_deploy_post);
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] ++;

		//checking forwards availability
		check_fwds();

		// create the wpns menu;
		create_weapons_menus();

		// open the cells...
		jb_cells(JB_CELLS_OPEN);

		new zmsallowed_wpns = player_flag(CSW_KNIFE);

		new players[32], pnum, id;
		get_players(players, pnum, "a");

		new Float:fZMHealth = get_pcvar_float(g_cvar_zombies_zmhp),
		 Float:fZMSpeed = get_pcvar_float(g_cvar_zombies_zmsp),
		 Float:fZMGravity = get_pcvar_float(g_cvar_zombies_zmgrav),
		 zombies = floatround( (pnum * get_pcvar_float(g_cvar_zombies_ratio)) , floatround_ceil ),
		 humans = pnum - zombies;

		for(new i = 0, iCell, iHumans = pnum; i < zombies; i++)
		{
			iCell = random( iHumans-- );

			id = players[ iCell ];

			// set user zombie.
			set_flag(g_user_zombie,id);

			players[ iCell ] = players[ iHumans ];
			players[ iHumans ] = id;
		}

		for(new i = 0; i < humans; i++)
		{
			// set user human.
			set_flag(g_user_human,players[i]);
		}

		/* Zombie health. */
		if(fZMHealth <= 100.0)
		{
			// lets add 1000 hp for zombies per human.
			if(fZMHealth == 0.0) fZMHealth = 1000.0;
			fZMHealth = (floatabs(fZMHealth) * (humans / zombies));
		}

		for(new i = 0; i < pnum; i++)
		{
			id = players[i];

			if(check_flag(g_user_zombie,id))
			{
				jb_bind_user_enemies_var(id, "g_user_human");
				jb_bind_user_allies_var(id, "g_user_zombie");
				jb_block_user_weapons(id, true, ~zmsallowed_wpns);

				// strip user wpns.
				strip_weapons(id,false);

				// Zombie health, speed, gravity.
				set_pev(id, pev_health, fZMHealth);
				set_pev(id, pev_maxspeed, fZMSpeed);
				set_pev(id, pev_gravity, fZMGravity);

				// zombie claws..
				engclient_cmd(id, "weapon_knife"); // deploy his wpn slot 3 !
				set_pev(id, pev_viewmodel2, ZM_DAY_ZOMBIE_VKNIFE);
				set_pev(id, pev_weaponmodel2, ZM_DAY_ZOMBIE_PKNIFE);

				// setting user model...
				cs_set_player_model(id, ZM_DAY_ZOMBIE_MODEL);
				set_pev(id, pev_body, g_iZombie_model_body);

				// infection effects..
				infection_effects(id);
				continue;
			}
			if(check_flag(g_user_human,id))
			{
				jb_bind_user_enemies_var(id, "g_user_zombie");
				jb_bind_user_allies_var(id, "g_user_human");
				jb_block_user_weapons(id, false);
				// set user human.
				show_newmenu(id, wpn_menu1, .bAlive=true);
			}
		}
	}
	else if(iDayid == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		// effects
		set_lights("d");

		// do stuff..
		g_forward_users[U_FM_FW_ADDTOFULLPACK_POST] ++;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] ++;
		g_forward_users[U_FW_PLAYER_TOUCHED] ++;
		EnableHamForward(Ham_fw_knife_deploy_post);
		EnableHamForward(Ham_fw_player_takedmg_post);
		g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] ++;
		EnableHamForward(Ham_fw_player_prethink_post);

		//checking forwards availability
		check_fwds();

		// create the wpns menu;
		create_weapons_menus();

		// open the cells...
		jb_cells();

		const ncsallowed_wpns = player_flag(CSW_KNIFE);

		new Float:fNCHealth = get_pcvar_float(g_cvar_ncs_nchp);
		new Float:fNCSpeed = get_pcvar_float(g_cvar_ncs_ncsp);
		new Float:fNCGravity = get_pcvar_float(g_cvar_ncs_ncgrav);
		new iMaxmana = get_pcvar_num(g_cvar_nc_day_maxmana)

		new players[32], pnum, id;
		get_players(players, pnum, "a")

		for(new i = 0; i < pnum; i++)
		{
			id = players[i];

			set_task(1.0, "task_nightcrawler_hudmsg", id+TASK_NC_HUDMSG, _, _, "b");
			strip_weapons(id,false);

			switch( fm_get_user_team(id) )
			{
				case TEAM_GUARDS:
				{
					// set user nightcrawler.
					g_user_nightcrawler |= (1<<(31&id));
					g_user_invisible |= (1<<(31&id));
					nc_usermana[id] = nc_usermaxmana[id] = iMaxmana;

					jb_block_user_weapons(id,true,~ncsallowed_wpns);

					// nightcrawler sword..
					engclient_cmd(id, "weapon_knife"); // deploy his wpn slot 3 !
					set_pev(id, pev_viewmodel2, NC_DAY_NCRAWLER_VKNIFE);
					set_pev(id, pev_weaponmodel2, NC_DAY_NCRAWLER_PKNIFE);

					// set gravity, hp, speed.
					set_pev(id, pev_gravity, fNCGravity);
					set_pev(id, pev_health, fNCHealth);
					set_pev(id, pev_maxspeed, fNCSpeed);

					// nofootsteps
					set_user_footsteps(id, true);
					//nightvision :)
					cs_set_user_nvg(id, .nvgoggles = 1);

					// setting user model...
					cs_set_player_model(id,NC_DAY_NCRAWLER_MODEL);
					set_pev(id, pev_body, g_iNightcrawler_model_body);
				}
				case TEAM_PRISONERS:
				{
					// set user human.
					set_user_footsteps(id, false);
					jb_block_user_weapons(id,false);
					g_user_nightcrawler &= ~(1<<(31&id));
					g_user_invisible &= ~(1<<(31&id));
					show_newmenu(id, wpn_menu1, .bAlive=true);
				}
			}
		}
	}
	else
	{
		return;
	}

	EnableHamForward(Ham_fw_player_respawn_post);
}

CreateMagneticSphere(const iOwner)
{
	new ent = create_entity("info_target");

	if(ent > 0)
	{
		new Float:fOrigin[3];
		pev(iOwner, pev_origin, fOrigin);

		set_pev(ent, pev_owner, iOwner);
		set_pev(ent, pev_movetype, MOVETYPE_FLY);
		set_pev(ent, pev_solid, SOLID_BBOX);
		//set_pev(ent, pev_aiment, iOwner);
		set_pev(ent, pev_spawnflags, SF_SPRITE_STARTON);
		set_pev(ent, pev_body, g_iSphere_model_body);

		set_pev(ent, pev_classname, "magnetic_lightning");
		set_pev(ent, pev_model, SPHERE_MDL);
		engfunc(EngFunc_SetModel, ent, SPHERE_MDL);
		engfunc(EngFunc_SetSize, ent, Float:{-50.0,-50.0,-36.0}, Float:{50.0,50.0,38.0});
		engfunc(EngFunc_SetOrigin, ent, fOrigin);
		set_rendering(ent, .render=kRenderTransAlpha, .amount=150);
		//dllfunc(DLLFunc_Spawn, ent);

		set_pev(ent, pev_avelocity, Float:{0.0,100.0,0.0});

		set_pev(ent, pev_nextthink, get_gametime()+0.1);
	}
}

CheckZombieDayWinStatus()
{
	new players[32], pnum, Humans, Zombies;
	get_players(players, pnum, "ah");

	for(new i, player; i < pnum; i++)
	{
		player = players[i];

		if(check_flag(g_user_zombie,player))
		{
			Zombies ++;
		}
		else if(check_flag(g_user_human,player))
		{
			Humans ++;
		}
	}

	// Zombies win...
	if(Humans <= 0)
	{
		jb_logmessage("Zombies Day Zombies Win!");
		client_print(0, print_center, "Zombies Win!");

		jb_end_theday();
	}
	else if(Zombies <= 0) // Humans win....
	{
		jb_logmessage("Zombies Day Humans Win!");
		client_print(0, print_center, "Humans Win!");

		jb_end_theday();
	}
}

public fw_mlightning_think(ent)
{
	static id; id = pev(ent, pev_owner);

	if(!is_user_alive(id))
	{
		set_pev(ent, pev_flags, FL_KILLME);
		set_pev(ent, pev_nextthink, get_gametime()+0.1);
		return;

	}

	static Float:fOrigin[3], Float:fEnd[3], idtarget, iTeam, Float:lasttime[33] = { 0.0, 0.0, ... };
	pev(id, pev_origin, fOrigin);
	engfunc(EngFunc_SetOrigin, ent, fOrigin);
	set_pev(ent, pev_velocity, Float:{0.0,0.0,0.0});

	if(get_gametime() > lasttime[id])
	{
		idtarget = 0; iTeam = get_user_team(id);
		while ( ((idtarget = engfunc(EngFunc_FindEntityInSphere, idtarget, fOrigin, 250.0)) > 0) && idtarget <= g_iMaxplayers)
		{
			if(idtarget == id || !is_user_alive(idtarget) || get_user_team(idtarget) == iTeam) continue;
			pev(idtarget, pev_origin, fEnd);

			lasttime[id] = get_gametime() + 0.25;
			ExecuteHamB(Ham_TakeDamage, idtarget, ent, id, 2.0, (DMG_BURN|DMG_SHOCK|DMG_ENERGYBEAM));

			message_begin(MSG_BROADCAST, SVC_TEMPENTITY, _, 0);
			write_byte(TE_BEAMPOINTS);
			engfunc(EngFunc_WriteCoord, fOrigin[0]);
			engfunc(EngFunc_WriteCoord, fOrigin[1]);
			engfunc(EngFunc_WriteCoord, fOrigin[2]);
			engfunc(EngFunc_WriteCoord, fEnd[0]);
			engfunc(EngFunc_WriteCoord, fEnd[1]);
			engfunc(EngFunc_WriteCoord, fEnd[2]);
			write_short(g_laserbeam) // sprite index
			write_byte(0) // start frame
			write_byte(10) // frame rate
			write_byte(1) // life
			write_byte(40) // width
			write_byte(30); // noise...
			write_byte(200); // r
			write_byte(200); // g
			write_byte(000); // b
			write_byte(255); // bright
			write_byte(30); // scrollspeed
			message_end();
		}
	}

	set_pev(ent, pev_nextthink, get_gametime() + 0.1);
}

public jb_round_end()
{
	new ent = -1;
	while( (ent = find_ent_by_class(ent, "magnetic_lightning")) )
	{
		set_pev(ent, pev_flags, FL_KILLME);
		dllfunc(DLLFunc_Think, ent);
	}
}

public jb_day_ended(iDayid)
{
	if(iDayid == iDAYS_ID[DAY_KNIVES])
	{
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_block_user_weapons(i, false);
		}

		new players[32], pnum;
		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			set_pev(players[i], pev_health, 100.0);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_DEATHMATCH])
	{
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] --;
		DisableHamForward(Ham_fw_weaponbox_spawn_post);
		destroy_weapons_menus();
		g_respawn_enabled = false;

		new players[32], pnum;
		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			strip_weapons(players[i], false);
		}

		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_set_user_enemies(i, JB_ENEMIES_DEFAULT);
		}

	}
	else if(iDayid == iDAYS_ID[DAY_SCOUTKNIVEZ])
	{
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_block_user_weapons(i, false);
		}

		new players[32], pnum;
		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			strip_weapons(players[i], false);
			set_user_gravity(players[i]);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_MARIO])
	{
		g_forward_users[U_HAM_FW_PLAYER_TOUCH_POST]--;
		friendlyfire(false);

		new players[32], pnum;
		get_players(players, pnum, "ah");

		for(new i, player; i < pnum; i++)
		{
			player = players[i];
			jb_block_user_weapons(player, false);
			ham_give_weapon(player, "weapon_knife");
			set_user_gravity(player);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_USPNINJA])
	{
		// disable the effects
		set_lights("#OFF");
		set_fog_effect(false);

		DisableHamForward(Ham_fw_player_jump_post);
		DisableHamForward(Ham_fw_usp_deploy_pre);
		DisableHamForward(Ham_fw_usp_secondaryatt_pre);
		g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] --;

		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_block_user_weapons(i, false);
		}

		new players[32], pnum;
		get_players(players, pnum, "ah");

		for(new i = 0; i < pnum; i++)
		{
			strip_weapons(players[i], false);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_DODGEBALL])
	{
		g_forward_users[U_FM_FW_SETMODEL_PRE] --;
		g_forward_users[U_FW_DODGEBALL_TOUCHED] --;
		g_forward_users[U_FW_SENDAUDIO_MSG] --;
		g_forward_users[U_FW_TXTMSG_MSG] --;
		g_forward_users[U_HAM_FW_HEGRENADE_DEPLOY_POST] --;
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] --;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] --;
		friendlyfire(false);

		// remove dodgeballs..
		new iEnt;
		while( (iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", DODGEBALL_ENTITY)) > 0 )
		{
			set_pev(iEnt, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, iEnt);
		}

		for(iEnt = 1; iEnt <= g_iMaxplayers; iEnt++)
			jb_block_user_weapons(iEnt, false);

		// remove all users dodgeballs...
		g_user_has_dodgeball = 0;

		new players[32], pnum, player;
		get_players(players, pnum, "ah");
		for(iEnt = 0; iEnt < pnum; iEnt++)
		{
			player = players[iEnt];
			strip_weapons(player, false);
		}
	}
	if(iDayid == iDAYS_ID[DAY_SNOWBALL])
	{
		g_forward_users[U_FW_SNOWFLAKE_THINK_PRE] --;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] --;
		g_forward_users[U_FM_FW_SETMODEL_PRE] --;
		g_forward_users[U_FW_SNOWBALL_TOUCHED] --;
		g_forward_users[U_FW_SENDAUDIO_MSG] --;
		g_forward_users[U_FW_TXTMSG_MSG] --;
		g_forward_users[U_FW_CUR_WEAPON] --;
		friendlyfire(false);
		DisableHamForward(Ham_fw_knife_deploy_post);

		// remove snow splashes..
		new iEnt;
		while( (iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", SNOWFLAKE_ENTITY)) > 0 )
		{
			set_pev(iEnt, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, iEnt);
		}

		// remove snowballs
		while( (iEnt = engfunc(EngFunc_FindEntityByString, iEnt, "classname", SNOWBALL_ENTITY)) > 0 )
		{
			set_pev(iEnt, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, iEnt);
		}

		for(iEnt = 1; iEnt <= g_iMaxplayers; iEnt++)
		{
			jb_block_user_weapons(iEnt, false);
		}

		new players[32], pnum, player;
		get_players(players, pnum, "ah");

		for(iEnt = 0; iEnt < pnum; iEnt++)
		{
			player = players[iEnt];
			strip_weapons(player);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_SNIPER] || iDayid == iDAYS_ID[DAY_SPACE])
	{
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_block_user_weapons(i, false);
		}
		
		new players[32], pnum;
		get_players(players, pnum, "ah");
		
		for(new i = 0; i < pnum; i++)
		{
			strip_weapons(players[i]);
			set_user_gravity(players[i]);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_HNS])
	{
		new bool:xtask_exists = task_exists(TASK_HNS_SEEK) ? true:false;
		remove_task(TASK_HNS_SEEK);
		
		// disable the effects
		set_lights("#OFF");
		set_fog_effect(false);

		new ent = -1;
		while( (ent = find_ent_by_class(ent, "magnetic_lightning")) )
		{
			set_pev(ent, pev_flags, FL_KILLME);
			dllfunc(DLLFunc_Think, ent);
		}
		
		new players[32], pnum, id;
		get_players(players, pnum, "ahe", "TERRORIST");
		
		if(!xtask_exists && pnum > 1) {
		// hudmsg to inform the players that the seeking time is over..
			set_hudmessage(121, 206, 121, -1.0, 0.35, 1, 6.0, 5.0, _, _, -1);
			show_hudmessage(0, "!:. Seeking time is Over .:!");
			jb_logmessage("HNS Day Seeking time is over!");
		}
		else if(xtask_exists) {
			new CTplayers[32], ctnum;
			get_players(CTplayers, ctnum, "he", "CT");
			
			for(new i, id, pFlags; i < ctnum;i++)
			{
				id = CTplayers[i];
				pFlags = pev(id, pev_flags);
				if(pFlags & FL_FROZEN) set_pev(id, pev_flags, (pFlags & ~(FL_FROZEN)));
				set_user_godmode(id, false);
				UTIL_ScreenFade(id, _, 1.0, _, 0, FFADE_IN);
			}
		}
		
		// destroy orpheu hook
		#if defined REGAMEDLL
		DisableHookChain(ObsIsValidTarget_pre);
		DisableHookChain(ObsSetMode_pre);
		#else
		OrpheuUnregisterHook(ObsIsValidTarget_pre);
		OrpheuUnregisterHook(ObsSetMode_pre);
		#endif
		
		// destroy the wpns menu;
		destroy_weapons_menus();
		
		new Float:NGravity = (get_cvar_float("sv_gravity")/800.0);
		
		for(new i = 0; i < pnum; i++)
		{
			id = players[i]
			
			jb_block_user_weapons(id, false);
			set_pev(id, pev_gravity, NGravity);
			set_pev(id, pev_health, 100.0);
			if(xtask_exists || pnum == 1) continue;
			ham_give_weapon(id, "weapon_ak47", WEAPONS_INFO[WPN_AK47][WEAPON_BPAMMO]);
			ham_give_weapon(id, "weapon_deagle", WEAPONS_INFO[WPN_DEAGLE][WEAPON_BPAMMO]);
			ham_give_weapon(id, "weapon_hegrenade", 1);
			ham_give_weapon(id, "weapon_flashbang", 2);
			ham_give_weapon(id, "weapon_smokegrenade", 1);
		}
	}
	else if(iDayid == iDAYS_ID[DAY_ZOMBIES])
	{
		// disable the effects
		set_lights("#OFF");
		set_fog_effect(false);
		
		DisableHamForward(Ham_fw_knife_deploy_post);
		g_forward_users[U_HAM_FW_PLAYER_KILLED_POST] --;
		
		// destroy the wpns menu;
		destroy_weapons_menus();
		
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			jb_block_user_weapons(i, false);
			jb_set_user_enemies(i, JB_ENEMIES_DEFAULT);
			jb_set_user_allies(i, JB_ALLIES_DEFAULT);
		}
		
		new players[32], pnum, id;
		get_players(players, pnum, "ah");
		
		new Float:NGravity = (get_cvar_float("sv_gravity") / 800.0);
		
		for(new i = 0, iKnife, Float:fMaxHP; i < pnum; i++)
		{
			id = players[i];
			
			strip_weapons(id,false);
			
			if(check_flag(g_user_zombie,id))
			{
					iKnife = find_ent_by_owner(-1, "weapon_knife", id);
					if(pev_valid(iKnife)) ExecuteHamB(Ham_Item_Deploy, iKnife);
					pev(id, pev_max_health, fMaxHP);
					if(fMaxHP < 1.0) fMaxHP = 100.0;
					set_user_health(id, floatround(fMaxHP));
					set_pev(id, pev_gravity, NGravity);
					set_pev(id, pev_maxspeed, 250.0);
					jb_set_user_class_model(id);
					
					infection_effects(id);
			}
		}

		// reset day variables
		g_user_zombie = 0;
		g_user_human = 0;
	}
	else if(iDayid == iDAYS_ID[DAY_NIGHTCRAWLER])
	{
		// disable the effects
		set_lights("#OFF");
		set_fog_effect(false);
		
		// do stuff..
		g_forward_users[U_FM_FW_ADDTOFULLPACK_POST] --;
		g_forward_users[U_FM_FW_EMITSOUND_PRE] --;
		g_forward_users[U_FW_PLAYER_TOUCHED] --;
		DisableHamForward(Ham_fw_knife_deploy_post);
		DisableHamForward(Ham_fw_player_takedmg_post);
		g_forward_users[U_HAM_FW_PLAYER_TAKEDAMAGE_PRE] --;
		DisableHamForward(Ham_fw_player_prethink_post);
		
		// set all humans
		g_user_nightcrawler = 0;
		g_user_invisible = 0;
		
		for(new i = 1; i <= g_iMaxplayers; i++)
		{
			remove_task(i+TASK_NC_HUDMSG);
			remove_task(i+TASK_MANARELOAD);
		}
		
		// create the wpns menu;
		destroy_weapons_menus();
		
		new players[32], pnum, id;
		get_players(players, pnum, "ah");
		
		for(new i = 0, iKnife_Entity; i < pnum; i++)
		{
			id = players[i];
			
			strip_weapons(id, false);
			
			switch( fm_get_user_team(id) )
			{
				case TEAM_GUARDS:
				{
					iKnife_Entity = find_ent_by_owner(-1, "weapon_knife", id);
					if(iKnife_Entity > 0) ExecuteHamB(Ham_Item_Deploy, iKnife_Entity);
					
					// reset gravity, hp, speed.
					set_pev(id, pev_gravity, 1.0);
					set_pev(id, pev_health, 100.0);
					set_pev(id, pev_maxspeed, 250.0);
					
					// footsteps
					set_user_footsteps(id, false);
					
					// unrestrict weapons
					jb_block_user_weapons(id,false);
					
					// setting user model...;
					jb_set_user_class_model(id);
				}
			}
		}
	}
	else
	{
		return;
	}
	
	DisableHamForward(Ham_fw_player_respawn_post);
}

public FwdSpawnWeaponbox(iEntity)
{
	set_pev(iEntity, pev_flags, FL_KILLME);
	dllfunc(DLLFunc_Think, iEntity);
}

public task_hns_start_seeking(taskid)
{
	if(jb_get_current_day() != iDAYS_ID[DAY_HNS])
	{
		remove_task(taskid);
		return;
	}
	
	set_hudmessage(121, 206, 121, -1.0, 0.35, 1, 6.0, 5.0, _, _, -1);
	show_hudmessage(0, "!:. Seeking time .:!");
	jb_logmessage("HNS Day Seeking time has begin!");
	
	new ent = -1;
	while( (ent = find_ent_by_class(ent, "magnetic_lightning")) )
	{
		set_pev(ent, pev_flags, FL_KILLME);
		set_pev(ent, pev_nextthink, get_gametime() + 0.1);
	}
	
	new players[32], pnum, id;
	get_players(players, pnum, "he", "CT");
	
	for(new i = 0, pFlags; i < pnum; i++)
	{
		id = players[i];
		pFlags = pev(id, pev_flags);
		if(pFlags & FL_FROZEN) set_pev(id, pev_flags, (pFlags & ~(FL_FROZEN)));
		set_user_godmode(id, false);
		UTIL_ScreenFade(id, _, 1.0, _, 0, FFADE_OUT);
	}
	
	// start seeking
	set_task(get_pcvar_float(g_cvar_hidenseek_seekdur), "null", TASK_HNS_SEEK);
}

public null() {
	jb_logmessage("HNS Day hiders have won!");
}

public task_respawn_player(taskid)
{
	new id = taskid - TASK_RESPAWN;
	
	new Float:cdtime = g_user_gametime[id] - get_gametime();
	
	if(cdtime >= 0.0)
	{
		set_hudmessage(208, 208, 208, -1.0, 0.83, 1, 6.0, 0.1, 0.5, 0.5, -1);
		show_hudmessage(id, "You will be respawned in %d!", floatround(cdtime));
		
		if(cdtime)
		{
			return;
		}
	}
	
	ExecuteHamB(Ham_CS_RoundRespawn, id);
	remove_task(taskid);

}

create_weapons_menus()
{
	new sID[4];
	
	if(wpn_menu1 == -1)
	{
		wpn_menu1 = menu_create("Choose an option...", "weapons_handle");
		
		menu_additem(wpn_menu1, "\rNew \yweapons");
		menu_additem(wpn_menu1, "\rPrevious \yweapons");
	}
	if(wpn_menu2 == -1)
	{
		wpn_menu2 = menu_create("Choose your primary..", "wpn_handle1");
		
		for(new i = 0; i < sizeof WEAPONS_INFO; i++)
		{
			if(WEAPONS_INFO[i][WEAPON_TYPE] == WPN_PRIMARY)
			{
				num_to_str(i, sID, charsmax(sID));
				menu_additem(wpn_menu2, WEAPONS_INFO[i][WEAPON_NAME], sID);
			}
		}
	}
	if(wpn_menu3 == -1)
	{
		wpn_menu3 = menu_create("Choose your secondary..", "wpn_handle2");
		
		for(new i = 0; i < sizeof WEAPONS_INFO; i++)
		{
			if(WEAPONS_INFO[i][WEAPON_TYPE] == WPN_SECONDARY)
			{
				num_to_str(i, sID, charsmax(sID));
				menu_additem(wpn_menu3, WEAPONS_INFO[i][WEAPON_NAME], sID);
			}
		}
	}
}

destroy_weapons_menus()
{
	if(wpn_menu1 > -1)
	{
		menu_destroy(wpn_menu1);
		wpn_menu1 = -1;
	}
	
	if(wpn_menu2 > -1)
	{
		menu_destroy(wpn_menu2);
		wpn_menu2 = -1;
	}
	
	if(wpn_menu3 > -1)
	{
		menu_destroy(wpn_menu3);
		wpn_menu3 = -1;
	}
}

show_newmenu(id, menuid, iPage=0, bool:bAlive=true)
{
	if((!is_user_alive(id)) == bAlive)
	{
		return;
	}
	
	// check if the menu id is positive, so we can know its existed!
	if(menuid > -1) // if its existed display the menu...
	{
		menu_display(id, menuid, iPage);
	}
}

public weapons_handle(id, menu, item)
{
	if(!is_user_alive(id))
		return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT || item < 0)
	{
		return PLUGIN_HANDLED;
	}
	
	switch(item)
	{
		case 0: show_newmenu(id, wpn_menu2, .bAlive=true);
		case 1:
		{
			if( user_weapons[id][WPN_PRIMARY] == -1 || user_weapons[id][WPN_SECONDARY] == -1 )
			{
				show_newmenu(id, wpn_menu1, .bAlive=true);
				return PLUGIN_HANDLED;
			}
			
			ham_give_weapon(id, WEAPONS_INFO[user_weapons[id][WPN_PRIMARY]][WEAPON_ID], 
			WEAPONS_INFO[user_weapons[id][WPN_PRIMARY]][WEAPON_BPAMMO]);
			ham_give_weapon(id, WEAPONS_INFO[user_weapons[id][WPN_SECONDARY]][WEAPON_ID], 
			WEAPONS_INFO[user_weapons[id][WPN_SECONDARY]][WEAPON_BPAMMO]);
		}
	}
	return PLUGIN_HANDLED;
}

public wpn_handle1(id, menu, item)
{
	if(!is_user_alive(id))
		return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT || item < 0)
	{
		return PLUGIN_HANDLED;
	}
	
	new paccess, sName[32], iCallback, sData[4];
	menu_item_getinfo(menu, item, paccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	
	item = str_to_num(sData);
	
	ham_give_weapon(id, WEAPONS_INFO[item][WEAPON_ID], WEAPONS_INFO[item][WEAPON_BPAMMO])
	user_weapons[id][WPN_PRIMARY] = item;
	
	show_newmenu(id, wpn_menu3, .bAlive=true);
	return PLUGIN_HANDLED;
}

public wpn_handle2(id, menu, item)
{
	if(!is_user_alive(id))
		return PLUGIN_HANDLED;
	
	if(item == MENU_EXIT)
	{
		return PLUGIN_HANDLED;
	}
	
	new paccess, sName[32], iCallback, sData[4];
	menu_item_getinfo(menu, item, paccess, sData, charsmax(sData), sName, charsmax(sName), iCallback);
	
	item = str_to_num(sData);
	
	ham_give_weapon(id, WEAPONS_INFO[item][WEAPON_ID], WEAPONS_INFO[item][WEAPON_BPAMMO]);
	user_weapons[id][WPN_SECONDARY] = item;
	return PLUGIN_HANDLED;
}

public fw_AddToFullPack_Post(es_handle, e, ent, host, hostflags, player, pset) 
{
	if(g_forward_users[U_FM_FW_ADDTOFULLPACK_POST] <= 0 && FM_FW_ADDTOFULLPACK_POST > 0)
	{
		unregister_forward(FM_AddToFullPack, FM_FW_ADDTOFULLPACK_POST, true);
		FM_FW_ADDTOFULLPACK_POST = 0;
		return;
	}

	if(!is_user_alive(host) || !pev_valid(ent))
		return;
	
	if(check_flag(g_user_nightcrawler,host) && ((1 <= ent <= g_iMaxplayers) && check_flag(g_user_nightcrawler,ent)))
	{
		set_es(es_handle, ES_RenderMode, kRenderTransAlpha);
		set_es(es_handle, ES_RenderAmt, 150);
		return;
	}

	if( pev(ent, pev_movetype) == MOVETYPE_FOLLOW )
	{
		ent = pev(ent, pev_aiment);
	}
	
	if( ((1 <= ent <= g_iMaxplayers) && check_flag(g_user_nightcrawler,ent)) )
	{
		set_es(es_handle, ES_RenderMode, kRenderTransAlpha);
		set_es(es_handle, ES_RenderAmt, check_flag(g_user_invisible,ent) ? 000:150);
	}
}

const UNIT_SECOND = (1<<12);

infection_effects(id)
{
	// Player died/disconnected
	if (!is_user_alive(id))
		return;
	
	message_begin(MSG_ONE_UNRELIABLE, g_msgScreenFade, _, id);
	write_short(UNIT_SECOND); // duration
	write_short(0); // hold time
	write_short(FFADE_IN); // fade type
	write_byte(200); // r
	write_byte(0); // g
	write_byte(0); // b
	write_byte(255); // alpha
	message_end();
	
	message_begin(MSG_ONE_UNRELIABLE, g_msgScreenShake, _, id);
	write_short(UNIT_SECOND*4); // amplitude
	write_short(UNIT_SECOND*2); // duration
	write_short(UNIT_SECOND*10); // frequency
	message_end();
	
	message_begin(MSG_ONE_UNRELIABLE, g_msgDamage, _, id);
	write_byte(0); // damage save
	write_byte(0); // damage take
	write_long(DMG_NERVEGAS); // damage type - DMG_RADIATION
	write_coord(0); // x
	write_coord(0); // y
	write_coord(0); // z
	message_end();
	
	// Get player's origin
	new origin[3];
	get_user_origin(id, origin);
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, origin);
	write_byte(TE_IMPLOSION); // TE id
	write_coord(origin[0]); // x
	write_coord(origin[1]); // y
	write_coord(origin[2]); // z
	write_byte(128); // radius
	write_byte(20); // count
	write_byte(3); // duration
	message_end();
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, origin);
	write_byte(TE_PARTICLEBURST); // TE id
	write_coord(origin[0]); // x
	write_coord(origin[1]); // y
	write_coord(origin[2]); // z
	write_short(50); // radius
	write_byte(70); // color
	write_byte(3); // duration (will be randomized a bit)
	message_end();
	
	message_begin(MSG_PVS, SVC_TEMPENTITY, origin);
	write_byte(TE_DLIGHT); // TE id
	write_coord(origin[0]); // x
	write_coord(origin[1]); // y
	write_coord(origin[2]); // z
	write_byte(20); // radius
	write_byte(0); // r
	write_byte(200); // g
	write_byte(0); // b
	write_byte(2); // life
	write_byte(0); // decay rate
	message_end();
}


public teleport_user_byaim(iPlayer)
{
	static MAX_DISTANCE; MAX_DISTANCE = random_num(5000, 9999);
	
	static Float: vOrigin[ 3 ], Float: vViewOfs[ 3 ], Float: vAngles[ 3 ], Float: vVector[ 3 ]; 
	entity_get_vector(iPlayer, EV_VEC_origin, vOrigin);
	entity_get_vector(iPlayer, EV_VEC_view_ofs, vViewOfs );
	entity_get_vector(iPlayer, EV_VEC_v_angle, vAngles);
	
	vOrigin[ 0 ] = vOrigin[ 0 ] + vViewOfs[ 0 ];
	vOrigin[ 1 ] = vOrigin[ 1 ] + vViewOfs[ 1 ];
	vOrigin[ 2 ] = vOrigin[ 2 ] + vViewOfs[ 2 ];
	
	angle_vector( vAngles, ANGLEVECTOR_FORWARD, vVector );
	
	vVector[ 0 ] = vVector[ 0 ] * MAX_DISTANCE + vOrigin[ 0 ];
	vVector[ 1 ] = vVector[ 1 ] * MAX_DISTANCE + vOrigin[ 1 ];
	vVector[ 2 ] = vVector[ 2 ] * MAX_DISTANCE + vOrigin[ 2 ];
	
	static pTr; pTr = create_tr2();
	engfunc(EngFunc_TraceLine, vOrigin, vVector, IGNORE_MONSTERS, iPlayer, pTr);
	
	static Float: flFraction; 
	get_tr2(pTr, TR_flFraction, flFraction);
	
	if(flFraction < 1.0)
	{
		static iEntityHit; 
		get_tr2(pTr, TR_pHit, iEntityHit);
		
		if(iEntityHit == 0)
		{
			static Float: vEndPos[ 3 ]; 
			get_tr2( pTr, TR_vecEndPos, vEndPos ); 
			
			if(point_contents(vEndPos) != CONTENTS_SKY)
			{
				static Float: vPlane[ 3 ]; 
				get_tr2( pTr, TR_vecPlaneNormal, vPlane ); 
				
				vEndPos[ 0 ] = vEndPos[ 0 ] + vPlane[ 0 ] * 40.0; 
				vEndPos[ 1 ] = vEndPos[ 1 ] + vPlane[ 1 ] * 40.0; 
				vEndPos[ 2 ] = vEndPos[ 2 ] + vPlane[ 2 ] * 40.0; 
				
				entity_set_origin( iPlayer, vEndPos ); 
				engfunc(EngFunc_EmitSound,iPlayer,CHAN_AUTO,NC_DAY_TELEPORT_SND,1.0,ATTN_NORM,0,PITCH_NORM);
				
				if(is_player_stuck(iPlayer))
				{
					set_task(0.1, "fix_teleport", iPlayer);
				}
			}
			else
			{
				client_print(iPlayer, print_center, "%L", iPlayer, "NC_CANNOT_TELEPORT_THERE");
			}
		}
	}
	
	free_tr2(pTr);
}

public fix_teleport(player)
{
	if(get_user_noclip(player))
		return;
	
	static Float:origin[3], Float:mins[3], Float:vec[3], bool:not_stuck;
	pev(player, pev_origin, origin);
	
	not_stuck = false;
	
	pev(player, pev_mins, mins);
	vec[2] = origin[2];
	
	for(new i = 0; i < sizeof size; ++i)
	{
		vec[0] = origin[0] - mins[0] * size[i][0];
		vec[1] = origin[1] - mins[1] * size[i][1];
		vec[2] = origin[2] - mins[2] * size[i][2];
		
		if (is_player_stuck(player))
		{
			engfunc(EngFunc_SetOrigin, player, vec);
			set_pev(player, pev_velocity, {0.0,0.0,0.0});
			
			if(!is_player_stuck(player))
			{
				not_stuck = true;
				break;
			}
		}
	}
	
	if(is_player_stuck(player) && !not_stuck)
	{
		user_kill(player);
		client_print(player, print_center, "You have been killed due a hard stuck!");
	}
}

set_fog_effect(bool:Fog=true, r=200, g=200, b=200, iDistance[2] = { 10, 41 }, fDistance[2] = { 95, 59 })
{
	if(Fog)
	{
		message_begin(MSG_ALL, g_msgFog);
		write_byte(r);			// red
		write_byte(g);			// green
		write_byte(b);			// blue
		write_byte(iDistance[0]);	// Start distance
		write_byte(iDistance[1]);	// Start distance
		write_byte(fDistance[0]);	// End distance
		write_byte(fDistance[1]);	// End distance
		message_end();	
	}
	else
	{
		message_begin(MSG_ALL, g_msgFog);
		write_byte(0);		// red
		write_byte(0);		// green
		write_byte(0);		// blue
		write_byte(0);		// Start distance
		write_byte(0);		// Start distance
		write_byte(0);		// End distance
		write_byte(0);		// End distance
		message_end();
	}
}

// gives a player a weapon efficiently
stock ham_give_weapon(id, const weapon[], bpammo=0)
{
	new wpnid = get_weaponid(weapon);
	if(!wpnid) return 0;
	new wEnt = engfunc(EngFunc_CreateNamedEntity,engfunc(EngFunc_AllocString,weapon));
	if(!pev_valid(wEnt)) return 0;
	set_pev(wEnt,pev_spawnflags,SF_NORESPAWN);
	dllfunc(DLLFunc_Spawn,wEnt);
	
	if(!ExecuteHamB(Ham_AddPlayerItem, id, wEnt))
	{
		if(pev_valid(wEnt)) set_pev(wEnt,pev_flags,pev(wEnt,pev_flags) | FL_KILLME);
		return 0;
	}
	
	ExecuteHamB(Ham_Item_AttachToPlayer,wEnt,id);
	if(bpammo > 0) cs_set_user_bpammo(id, wpnid, bpammo);
	return wEnt;
}

stock strip_weapons(id, bool:bStripKnife=false)
{
	new weapon[32], sWpnname[24], wnum, i;
	get_user_weapons(id, weapon, wnum);
	
	for(i = 0; i < wnum; i++)
	{
		if(weapon[i] == CSW_KNIFE && !bStripKnife) continue;
		get_weaponname(weapon[i], sWpnname, charsmax(sWpnname));
		ham_strip_weapon(id, sWpnname);
	}
}

// takes a weapon from a player efficiently
stock ham_strip_weapon(id, weapon[])
{
	if(!equal(weapon,"weapon_",7)) return 0;
	new wId = get_weaponid(weapon);
	if(!wId) return 0;
	new wEnt = -1
	while((wEnt = engfunc(EngFunc_FindEntityByString, wEnt, "classname", weapon)) > 0 && pev(wEnt, pev_owner) != id) {}
	if(!wEnt) return 0;
	if(get_user_weapon(id) == wId) ExecuteHamB(Ham_Weapon_RetireWeapon,wEnt);
	if(!ExecuteHamB(Ham_RemovePlayerItem,id,wEnt)) return 0;
	ExecuteHamB(Ham_Item_Kill, wEnt);
	set_pev(id, pev_weapons, pev(id,pev_weapons) & ~(1<<wId));
	return 1;
}

// Check if a player is stuck (credits to VEN) 
stock is_player_stuck(id)
{
	static Float:originF[3];
	pev(id, pev_origin, originF);
	
	engfunc(EngFunc_TraceHull, originF, originF, 0, (pev(id, pev_flags) & FL_DUCKING) ? HULL_HEAD : HULL_HUMAN, id, 0);
	
	if(get_tr2(0, TR_StartSolid) || get_tr2(0, TR_AllSolid) || !get_tr2(0, TR_InOpen))
		return true;
	
	return false; 
}

Float:entity_takedamage(ent)
{
	static Float:flDamage;
	pev(ent, pev_takedamage, flDamage);
	return flDamage;
}
