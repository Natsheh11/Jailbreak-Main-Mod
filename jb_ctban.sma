/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <nvault>
#include <cstrike>
#include <hamsandwich>
#include <jailbreak_core>
#include <sqlx>
#include <inc_get_team_fix>

#define PLUGIN "[JB] GUARD BAN"
#define AUTHOR "Natsheh"

#define TASK_UNBANCT 876542

#define ADMIN_FLAG ADMIN_BAN
#define NO_ACCESS (1<<26)

#define MAX_AUTH_ID 32
#define MAX_NICKNAME 32
#define MAX_GUARD_BAN_REASON_CHARS 128
#define USER_BAN_GUARD_DATA_BUFFER 0

#if AMXX_VERSION_NUM > 182
#define client_disconnect client_disconnected
#endif

enum any:DATA_GUARD_BAN
{
	bool:USER_GUARD_BANNED,
	USER_GUARD_BAN_LENGTH,
	USER_GUARD_BAN_NAME[MAX_NICKNAME],
	USER_GUARD_BAN_INITIATOR_NAME[MAX_NICKNAME],
	USER_GUARD_BAN_INITIATED_BY[MAX_AUTH_ID],
	USER_GUARD_BAN_REASON[MAX_GUARD_BAN_REASON_CHARS]
}

new g_itemid, g_votebanguards_menu = INVALID_HANDLE, g_votebanguard_votefor, g_votebanguard_voteagainst;
new g_UserGuardBanData[MAX_PLAYERS+1][DATA_GUARD_BAN];
new g_vault = INVALID_HANDLE;
new g_iCvarSaveThrough, Handle:g_iTupleHandler = Empty_Handle, g_iCvarTablePrefix, g_iCvarTable;
new g_szDATABASE[64], Float:g_fVoteBanCoolDown[MAX_PLAYERS+1], g_RespectPoints[MAX_PLAYERS+1], g_bPlayerRespects[MAX_PLAYERS+1][MAX_PLAYERS+1], g_pcvar_voteban_cooldown, g_pcvar_player_starting_rp, Trie:g_trie_guardbancheck = Invalid_Trie, g_szGuardVoteBanVictim[MAX_AUTH_ID];

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_trie_guardbancheck = TrieCreate();

	g_itemid = register_jailbreak_mmitem("MM_ITEM_CTBAN_MENU", 0, TEAM_ANY);

	g_pcvar_voteban_cooldown = register_cvar("jb_guard_voteban_cooldown", "3600");

	register_clcmd("say", "hook_say");
	register_clcmd("say_team", "hook_say");
	register_clcmd("jb_vote_banct", "concmd_vote_banct");
	register_clcmd("say /gvb", "concmd_vote_banct");
	register_clcmd("say /guardvoteban", "concmd_vote_banct");
	register_concmd("jb_toggle_guard_ban", "clcmd_toggle_ban_guard", ADMIN_FLAG, "Ban a client from CT!");
	RegisterHam(Ham_Spawn, "player", "fw_player_respawn_post", 1);
	
	g_iCvarTablePrefix = register_cvar("jb_ctbans_table_prefix", "jb_");
	g_iCvarTable = register_cvar("jb_ctbans_table", "CTbans");
	g_iCvarSaveThrough = register_cvar("jb_ctbans_save_through", "steamid");
	g_pcvar_player_starting_rp = register_cvar("jb_ctbans_start_respect_points", "-5");
	
	g_iTupleHandler = any:get_xvar_num(get_xvar_id("JB_DB_TUPLE_HANDLER"));
	
	if(g_iTupleHandler == Empty_Handle)
	{
		g_vault = nvault_open("jailbreak_ctban");
		
		if(g_vault == INVALID_HANDLE)
		{
			set_fail_state("Error opening nVault!");
		}
	}
}

public plugin_cfg()
{
	if(g_iTupleHandler != Empty_Handle)
	{
		new szCvars[2][20], iError, szError[64];
		get_pcvar_string(get_cvar_pointer("jb_mysql_database"), g_szDATABASE, charsmax(g_szDATABASE));
		
		get_pcvar_string(g_iCvarTablePrefix, szCvars[0], charsmax(szCvars[]));
		get_pcvar_string(g_iCvarTable, szCvars[1], charsmax(szCvars[]));
		// create ctban table
		new Handle:x = SQL_Connect(g_iTupleHandler, iError, szError, charsmax(szError));
		if(x != Empty_Handle) {
			SQL_QueryAndIgnore(x, "CREATE TABLE IF NOT EXISTS `%s`.`%s%s` \
		(id INT NOT NULL AUTO_INCREMENT PRIMARY KEY, \
		authid varchar(32) NOT NULL UNIQUE, \
		length INT(20) NOT NULL DEFAULT '0', \
		player_name varchar(32) NOT NULL, \
		admin_name varchar(32) NOT NULL, \
		admin_authid varchar(32) NOT NULL, \
		reason varchar(128) NOT NULL DEFAULT 'no reason');", g_szDATABASE, szCvars[0], szCvars[1]);
			SQL_FreeHandle(x);
		}
		else
		{
			log_error(AMX_ERR_GENERAL, "Couldn't connect to the database ( error[%d] : %s )", iError, szError);
		}
	}
}

public hook_say(id, level, cid)
{
	static szArgs[64];
	read_args(szArgs, charsmax(szArgs));
	remove_quotes(szArgs);

	if(equali(szArgs, "resp", 4) || equali(szArgs, "cont", 4) || equali(szArgs, "disresp", 6))
	{
		new szCommand[16], szTarget[48], szValue[16], iNeutral;
		argbreak(szArgs, szCommand, charsmax(szCommand), szArgs, charsmax(szArgs));
		argbreak(szArgs, szTarget, charsmax(szTarget), szValue, charsmax(szValue));

		switch( szCommand[0] )
		{
			case 'r', 'R': iNeutral = 1;
			case 'c', 'C', 'd', 'D': iNeutral = -1;
		}

		new target = cmd_target(id, szTarget, CMDTARGET_ALLOW_SELF);

		if(!target || id == target && !is_user_admin(id))
		{
			cprint_chat(id, _, "Target '%s' was not found!", szTarget);
			return 1;
		}

		new AdminName[MAX_NICKNAME], PlayerName[MAX_NICKNAME];
		get_user_name(id, AdminName, charsmax(AdminName));
		get_user_name(target, PlayerName, charsmax(PlayerName));

		if(szValue[0] == '?')
		{
			cprint_chat(id, _, "!t%s have !g%d !trespect points!", PlayerName, g_RespectPoints[target]);
			return 0;
		}

		if(g_bPlayerRespects[id][target])
		{
			cprint_chat(id, _, "You already shared your opinion on %s wait for the nextmap!", PlayerName);
			return 1;
		}

		if(is_user_admin(id))
		{
			if(szValue[0] != EOS && is_str_num(szValue))
			{
				g_RespectPoints[target] += str_to_num(szValue) * iNeutral;
				save_player_respectpoints(target);

				switch( iNeutral )
				{
					case 1: cprint_chat(0, _, "!gADMIN RESPECT !y%s has gave %s some respect points!", AdminName, PlayerName);
					case -1: cprint_chat(0, _, "!tADMIN CONTEMPT !y%s has took away from %s some respect points!", AdminName, PlayerName);
				}

				return 0;
			}

			switch( iNeutral )
			{
				case 1: cprint_chat(0, _, "!gADMIN RESPECT !y%s has gave %s a respect point!", AdminName, PlayerName);
				case -1: cprint_chat(0, _, "!tADMIN CONTEMPT !y%s has took away from %s a respect point!", AdminName, PlayerName);
			}

			g_RespectPoints[target] += iNeutral * 1;
			save_player_respectpoints(target);
			return 0;
		}

		switch( iNeutral )
		{
			case 1: cprint_chat(0, _, "!g%s !yhas gave %s a respect point!", AdminName, PlayerName);
			case -1: cprint_chat(0, _, "!g%s !yhas took away from %s a respect point!", AdminName, PlayerName);
		}

		g_RespectPoints[target] += iNeutral * 1;
		g_bPlayerRespects[id][target] = true;
		save_player_respectpoints(target);
		return 0;
	}
	else if(equali(szArgs, "myresp", 6))
	{
		cprint_chat(id, _, "You've !g%d !trespect points!", g_RespectPoints[id]);
		return 0;
	}

	return 0;
}

public jb_team_join(id)
{
	if(g_UserGuardBanData[id][USER_GUARD_BANNED])
	{
		return JB_BLOCK_JOIN_GUARDS;
	}
	
	return PLUGIN_CONTINUE;
}

public plugin_end()
{
	if(g_vault != INVALID_HANDLE) nvault_close(g_vault);
	if(g_votebanguards_menu != INVALID_HANDLE) menu_destroy(g_votebanguards_menu);
	if(g_trie_guardbancheck != Invalid_Trie) TrieDestroy(g_trie_guardbancheck);
}

public fw_player_respawn_post(id)
{
	if(g_UserGuardBanData[id][USER_GUARD_BANNED] && get_user_team(id) == TEAM_GUARDS)
	{
		jointeam_prisoner(id);
	}
}

jointeam_prisoner(id)
{
	new sAuthid[MAX_AUTH_ID];
	get_user_authid(id, sAuthid, charsmax(sAuthid));
	
	engclient_cmd(id, "jointeam", "1");
	cs_set_user_team(id, CS_TEAM_T, CS_T_TERROR);
	if(is_user_alive(id)) user_kill(id);

	if(g_vault != INVALID_HANDLE)
	{
		new sValue[64], timestmp;
		if(nvault_lookup(g_vault, sAuthid, sValue, charsmax(sValue), timestmp))
		{
			new iValue = str_to_num(sValue);
			if(iValue)
			{
				time_formating((iValue - get_systime()), sValue, charsmax(sValue));
				cprint_chat(id, _, "%L", id, "CHAT_SHOW_BAN_LENGTH", sValue);
			}
			else
			{
				cprint_chat(id, _, "%L", id, "CHAT_SHOW_BAN_PERM", sValue);
			}
		}
	}
}

public client_putinserver(id)
{
	if(is_user_bot(id) || is_user_hltv(id)) return;
	
	static sAuthid[MAX_AUTH_ID], sValue[16];
	get_pcvar_string(g_iCvarSaveThrough, sValue, charsmax(sValue));

	switch( sValue[0] )
	{
		case 's', 'a', 'S', 'A': get_user_authid(id, sAuthid, charsmax(sAuthid));
		case 'N', 'n': get_user_name(id, sAuthid, charsmax(sAuthid));
		case 'I', 'i': get_user_ip(id, sAuthid, charsmax(sAuthid));
	}

	CheckPlayerHasGuardBan(sAuthid);
	load_player_respectpoints(id);
}

public client_disconnect(id)
{
	if(is_user_bot(id) || is_user_hltv(id)) return;
	
	if(task_exists(id+TASK_UNBANCT))
		remove_task(id+TASK_UNBANCT);
}

public mysql_ctban_handler_table(failstate, Handle:query, error[], errnum, data[MAX_AUTH_ID], size, Float:queuetime)
{
	if(failstate == TQUERY_SUCCESS)
	{
		new id = find_player("c", data);

		if(SQL_NumResults(query) > 0)
		{
			static iLen, szReason[MAX_GUARD_BAN_REASON_CHARS], szAdminAuthid[MAX_AUTH_ID], szName[MAX_NICKNAME], szAdminName[MAX_NICKNAME];
			iLen = SQL_ReadResult(query, SQL_FieldNameToNum(query, "length"));
			SQL_ReadResult(query, SQL_FieldNameToNum(query, "reason"), szReason, charsmax(szReason));
			SQL_ReadResult(query, SQL_FieldNameToNum(query, "player_name"), szName, charsmax(szName));
			SQL_ReadResult(query, SQL_FieldNameToNum(query, "admin_name"), szAdminName, charsmax(szAdminName));
			SQL_ReadResult(query, SQL_FieldNameToNum(query, "admin_authid"), szAdminAuthid, charsmax(szAdminAuthid));
			
			if(iLen > 0)
			{
				new iTimestamp = iLen;
				iLen -= get_systime();

				if(iLen > 0)
				{
					new szString[64];
					time_formating(iLen, szString, charsmax(szString));

					PlayerHasGuardBan(true, data, szName, szAdminName, szAdminAuthid, szReason, iTimestamp);

					cprint_chat(id, _, "!tYou're banned from the guards team, !yBanned by !g%s!t!", szAdminName);
					cprint_chat(id, _, "!tLength: !g%s", szString);
					cprint_chat(id, _, "!tReason: !g%s!", szReason);
				}
				else
				{
					PlayerHasGuardBan(false, data);
					task_unBanCT(data, id+TASK_UNBANCT);
				}
			}
			else
			{
				PlayerHasGuardBan(true, data, szName, szAdminName, szAdminAuthid, szReason, iLen);

				cprint_chat(id, _, "!tYou're banned from the guards team, !yBanned by !g%s!t!", szAdminName);
				cprint_chat(id, _, "!tLength: !gpermanent!t!");
				cprint_chat(id, _, "!tReason: !g%s!", szReason);
			}
		}
		else
		{
			if( id )
			{
				g_UserGuardBanData[id][USER_GUARD_BANNED] = false;
			}

			PlayerHasGuardBan(false, data);
		}
	}
}

SQL_Escape_String(dest[], len)
{
	replace_all(dest, len, "\\"   ,   "\\\\" );
	replace_all(dest, len, "\0"   ,   "\\0"  );
	replace_all(dest, len, "\n"   ,   "\\n"  );
	replace_all(dest, len, "\r"   ,   "\\r"  );
	replace_all(dest, len, "\x1a" ,   "\Z"   );
	replace_all(dest, len, "'"    ,    "\'"  );
	replace_all(dest, len, "^""   ,   "\^""  );
}

save_player_respectpoints(id)
{
	if(g_vault != INVALID_HANDLE)
	{
		const KeySize = MAX_AUTH_ID + 16;
		new szKey[KeySize], sAuthid[MAX_AUTH_ID], sValue[16];
		get_pcvar_string(g_iCvarSaveThrough, sValue, charsmax(sValue));

		switch( sValue[0] )
		{
			case 'N', 'n': get_user_name(id, sAuthid, charsmax(sAuthid));
			case 'I', 'i': get_user_ip(id, sAuthid, charsmax(sAuthid));
			default: get_user_authid(id, sAuthid, charsmax(sAuthid));
		}

		formatex(szKey, charsmax(szKey), "%s_RESPECTPOINTS", sAuthid);
		num_to_str(g_RespectPoints[id], sValue, charsmax(sValue));
		nvault_set(g_vault, szKey, sValue);
	}
}

load_player_respectpoints(id)
{
	g_RespectPoints[id] = get_pcvar_num(g_pcvar_player_starting_rp);

	new sAuthid[48], sValue[16], iTimestamp;
	get_pcvar_string(g_iCvarSaveThrough, sValue, charsmax(sValue));

	switch( sValue[0] )
	{
		case 'N', 'n': get_user_name(id, sAuthid, 31);
		case 'I', 'i': get_user_ip(id, sAuthid, 31);
		default: get_user_authid(id, sAuthid, 31);
	}

	new iLen = strlen(sAuthid);
	add(sAuthid[iLen], charsmax(sAuthid)-iLen, "_RESPECTPOINTS");

	if(g_vault != INVALID_HANDLE && nvault_lookup(g_vault, sAuthid, sValue, charsmax(sValue), iTimestamp))
	{
		g_RespectPoints[id] = str_to_num(sValue);
	}
}

PlayerHasGuardBan(const bool:bBANNED, const sAuthid[32], const sName[]="", const sAdminname[]="", const szAdminAuthid[]="", const szReason[]="", iLength=0)
{
	if(TrieKeyExists(g_trie_guardbancheck, sAuthid))
	{
		new szFuncCallBack[32];
		TrieGetString(g_trie_guardbancheck, sAuthid, szFuncCallBack, charsmax(szFuncCallBack));

		callfunc_begin(szFuncCallBack);
		callfunc_push_int(bBANNED);
		callfunc_push_str(sAuthid, .copyback = false);
		callfunc_push_str(sName, .copyback = false);
		callfunc_push_str(sAdminname, .copyback = false);
		callfunc_push_str(szAdminAuthid, .copyback = false);
		callfunc_push_str(szReason, .copyback = false);
		callfunc_push_int(iLength);
		callfunc_end();

		TrieDeleteKey(g_trie_guardbancheck, sAuthid);
	}
	else
	{
		new id = find_player("c", sAuthid);

		if( id )
		{
			if( bBANNED )
			{
				g_UserGuardBanData[id][USER_GUARD_BANNED] = true;
				g_UserGuardBanData[id][USER_GUARD_BAN_LENGTH] = iLength;
				copy(g_UserGuardBanData[id][USER_GUARD_BAN_NAME], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_NAME]), sName);
				copy(g_UserGuardBanData[id][USER_GUARD_BAN_INITIATOR_NAME], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_INITIATOR_NAME]), sAdminname);
				copy(g_UserGuardBanData[id][USER_GUARD_BAN_INITIATED_BY], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_INITIATED_BY]), szAdminAuthid);
				copy(g_UserGuardBanData[id][USER_GUARD_BAN_REASON], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_REASON]), szReason);

				if( iLength > 0 )
				{
					iLength -= get_systime();
					set_task(floatmax(float(iLength), 1.0), "task_unBanCT", id+TASK_UNBANCT, sAuthid, sizeof sAuthid);
				}
			}
			else
			{
				g_UserGuardBanData[id][USER_GUARD_BANNED] = false;
			}
		}
	}
}

CheckPlayerHasGuardBan(const sAuthid[MAX_AUTH_ID], const callback[] = "")
{
	if(callback[0] != EOS)
	{
		TrieSetString(g_trie_guardbancheck, sAuthid, callback);
	}

	if(g_iTupleHandler != Empty_Handle)
	{
		new szCvars[2][20], szQuery[128], aData[MAX_AUTH_ID];
		copy(aData, charsmax(aData), sAuthid);
		get_pcvar_string(g_iCvarTablePrefix, szCvars[0], charsmax(szCvars[]));
		get_pcvar_string(g_iCvarTable, szCvars[1], charsmax(szCvars[]));
		formatex(szQuery, charsmax(szQuery), "SELECT `authid`,`admin_name`,`admin_authid`,`length`,`reason` FROM `%s`.`%s%s` WHERE `authid`='%s';", g_szDATABASE, szCvars[0], szCvars[1], sAuthid);
		SQL_ThreadQuery(g_iTupleHandler, "mysql_ctban_handler_table", szQuery, aData, sizeof aData);
		return false;
	}
	
	new sValue[196], iTimestamp;
	if(g_vault != INVALID_HANDLE && nvault_lookup(g_vault, sAuthid, sValue, charsmax(sValue), iTimestamp))
	{
		new szAdminAuthid[32], szAdminName[32], szName[32], szReason[128], szLength[16];
		parse(sValue, szName, charsmax(szName), szAdminName, charsmax(szAdminName), szAdminAuthid, charsmax(szAdminAuthid), szReason, charsmax(szReason), szLength, charsmax(szLength));
		remove_quotes(szName);
		remove_quotes(szAdminName);
		remove_quotes(szAdminAuthid);
		remove_quotes(szReason);
		remove_quotes(szLength);
		new iValue = str_to_num(szLength);

		if(!iValue)
		{
			PlayerHasGuardBan(true, sAuthid, szName, szAdminName, szAdminAuthid, szReason, iValue);
			return true;
		}
		
		new length = (iValue - get_systime());
		
		if( length <= 0 )
		{
			PlayerHasGuardBan(false, sAuthid);
			nvault_remove(g_vault, sAuthid);
		}
		else
		{
			PlayerHasGuardBan(true, sAuthid, szName, szAdminName, szAdminAuthid, szReason, iValue);
			return true;
		}
	}

	PlayerHasGuardBan(false, sAuthid);
	return false;
}

public task_unBanCT(const sAuthid[], taskid)
{
	new id = find_player("c", sAuthid), sName[32];
	
	RemovePlayerGuardBan(sAuthid);

	if( id )
	{
		cprint_chat(id, _, "%L", id, "CHAT_INFORM_NOLONGER_CT_BANNED");
		get_user_name(id, sName, charsmax(sName));

		g_UserGuardBanData[id][USER_GUARD_BANNED] = false;
	}
	else
	{
		copy(sName, charsmax(sName), sAuthid);
	}
	
	new players[32], pnum;
	get_players(players, pnum, "ch");
	
	for(new i, player; i < pnum; i++)
	{
		player = players[i];
		if(id != player) cprint_chat(player, _, "%L", id, "CHAT_PLAYER_NOLONGER_CT_BANNED", sName)
	}
}

public null() { }

public concmd_vote_banct(id, level, cid)
{
	if(!cmd_access(id, level, cid, 0))
		return 1;

	if(g_votebanguards_menu != INVALID_HANDLE)
	{
		console_print(id, "Currently there is a vote going on!");
		cprint_chat(id, _, "Currently there is a vote going on!");
		return 1;
	}

	new players[32], pnum;
	get_players(players, pnum, "che", "CT");

	if(!pnum)
	{
		console_print(id, "Currently there're no guards to voteban from the guards team!");
		cprint_chat(id, _, "Currently there're no guards to voteban from the guards team!");
		return 1;
	}

	new target, szName[32];
	if(pnum == 1)
	{
		target = players[ 0 ];

		get_user_name(target, szName, charsmax(szName));

		if(g_RespectPoints[target] > 0)
		{
			console_print(id, "You cannot voteban %s because he/she have alot of respect points!", szName);
			cprint_chat(id, _, "You cannot voteban %s because he/she have alot of respect points!", szName);
			return 1;
		}

		if(g_UserGuardBanData[target][USER_GUARD_BANNED])
		{
			console_print(id, "%s is already been banned from the guards team!", szName);
			cprint_chat(id, _, "%s is already been banned from the guards team!", szName);
			return 1;
		}

		if(g_fVoteBanCoolDown[target] > get_gametime())
		{
			console_print(id, "%s is on a cooldown!", szName);
			cprint_chat(id, _, "%s is on a cooldown!", szName);
			return 1;
		}

		new szIDName[32];
		get_user_name(id, szIDName, charsmax(szIDName));
		guardvoteban_menu(target);
		cprint_chat(0, _, "!g%s !yhas initiated a vote against !g%s !yto be banned from the guards team!", szIDName, szName);
	}
	else
	{
		new szTitle[64], iItems;
		formatex(szTitle, charsmax(szTitle), "Voteban from the guards team against %s!", szName);
		new menu = menu_create(szTitle, "voteban_pickp_mhandler");

		for(new i; i < pnum; i++)
		{
			target = players[i];

			if(g_UserGuardBanData[target][USER_GUARD_BANNED])
			{
				continue;
			}

			get_user_name(target, szName, charsmax(szName));
			menu_additem(menu, szName, .paccess= g_RespectPoints[target] > 0 ? NO_ACCESS:0);
			iItems++
		}

		if(!iItems)
		{
			menu_destroy(menu);
			return 1;
		}

		menu_display(id, menu);
	}
	return 1;
}

guardvoteban_menu(target)
{
	g_fVoteBanCoolDown[target] = get_gametime() + get_pcvar_float(g_pcvar_voteban_cooldown);
	g_votebanguard_votefor = g_votebanguard_voteagainst = 0;
	get_user_authid(target, g_szGuardVoteBanVictim, charsmax(g_szGuardVoteBanVictim));

	new szName[32], szTitle[64];
	get_user_name(target, szName, charsmax(szName));
	formatex(szTitle, charsmax(szTitle), "Voteban from the guards team against %s!", szName);
	new menu = g_votebanguards_menu = menu_create(szTitle, "voteban_mhandler");

	menu_additem(menu, "\yVote for");
	menu_additem(menu, "\rVote against");

	new players[32], pnum;
	get_players(players, pnum, "ch");
	for(new i, player; i < pnum; i++)
	{
		player = players[i];

		menu_cancel(player);
		menu_display(player, menu);
	}

	set_task(15.0, "task_guardvoteban_results", get_user_userid(target));
}

public task_guardvoteban_results(userid)
{
	new players[32], pnum;
	get_players(players, pnum, "ch");

	if(g_votebanguard_votefor >= floatround(pnum * 0.5) && g_votebanguard_voteagainst < g_votebanguard_votefor)
	{
		cprint_chat(0, _, "The guard voteban have !gsucceeded!y, players voted for: !g%d, !yplayers vote against: !g%d!t.", g_votebanguard_votefor, g_votebanguard_voteagainst);

		if(find_player("k", userid))
		{
			server_cmd("jb_toggle_guard_ban ^"#%d^" ^"3600^" ^"voting^"", userid);
		}
		else
		{
			server_cmd("jb_toggle_guard_ban ^"%s^" ^"3600^" ^"voting^"", g_szGuardVoteBanVictim);
		}
	}
	else if(!g_votebanguard_votefor || g_votebanguard_voteagainst >= g_votebanguard_votefor || true)
	{
		cprint_chat(0, _, "The guard voteban have !tfailed!y, players voted for: !g%d, !yplayers vote against: !g%d!t.", g_votebanguard_votefor, g_votebanguard_voteagainst);
	}

	if(g_votebanguards_menu != INVALID_HANDLE)
	{
		for(new i, id, iNull, iNewMenu; i < pnum; i++)
		{
			id = players[ i ];
			if(player_menu_info(id, iNull, iNewMenu, iNull) && g_votebanguards_menu == iNewMenu)
			{
				menu_cancel(id);
				show_menu(id, 0, " ^n ");
			}
		}

		menu_destroy(g_votebanguards_menu);
		g_votebanguards_menu = INVALID_HANDLE;
	}
}

public voteban_pickp_mhandler(id, menu, item)
{

	switch( item )
	{
		case MENU_EXIT, MENU_TIMEOUT:
		{
			menu_destroy(menu);
			return PLUGIN_HANDLED;
		}
		default:
		{
			new iAccess, szName[32], iCallback;
			menu_item_getinfo(menu, item, iAccess, "", 0, szName, charsmax(szName), iCallback);
			menu_destroy(menu);

			new player = get_user_index(szName);
			if(!player)
			{
				client_print(id, print_center, "Player does no longer exist!");
				return PLUGIN_HANDLED;
			}

			if(g_fVoteBanCoolDown[player] > get_gametime())
			{
				client_print(id, print_center, "Player is on a voteban cooldown!");
				return PLUGIN_HANDLED;
			}

			new szIDName[32];
			get_user_name(id, szIDName, charsmax(szIDName));
			cprint_chat(0, _, "!g%s !yhas initiated a vote against !g%s !yto be banned from the guards team!", szIDName, szName);
			guardvoteban_menu(player);
		}
	}

	return PLUGIN_HANDLED;
}

public voteban_mhandler(id, menu, item)
{
	switch( item )
	{
		case 0:
		{
			new szName[MAX_NICKNAME];
			get_user_name(id, szName, charsmax(szName));
			g_votebanguard_votefor ++;
			cprint_chat(0, _, "!g%s !yhas voted for.", szName);
		}
		case 1:
		{
			new szName[MAX_NICKNAME];
			get_user_name(id, szName, charsmax(szName));
			g_votebanguard_voteagainst ++;
			cprint_chat(0, _, "!g%s !yhas voted against.", szName);
		}
	}

	return PLUGIN_HANDLED;
}

public clcmd_toggle_ban_guard_absent(const bool:bBANNED, const sAuthid[MAX_AUTH_ID])
{
	if(!bBANNED)
	{
		new szText[128], sLength[32], timestmp, iLength = g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_LENGTH];

		new id = find_player("c", g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATED_BY]);

		if( !id )
		{
			return;
		}

		if(iLength < 0)
		{
			console_print(id, "Please add a positive length time (inSeconds) Or 0 - for permanent!");
			return;
		}

		if(iLength > 0)
		{
			time_formating( iLength, sLength, charsmax(sLength) );
			formatex(szText, charsmax(szText), "%L", LANG_SERVER, "CT_BAN_TEMP", sLength);
			timestmp = iLength + get_systime();
		}
		else
		{
			formatex(szText, charsmax(szText), "%L", LANG_SERVER, "CT_BAN_PERMANENT");
		}

		new sName[MAX_NICKNAME], sAdminname[MAX_NICKNAME];
		copy(sAdminname, charsmax(sAdminname), g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATOR_NAME]);
		copy(sName, charsmax(sName), g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_NAME]);

		BanPlayerFromGuardsTeam(
			.sAuthid=sAuthid,
			.sName=sName,
			.sAdminname=sAdminname,
			.szAdminAuthid=g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATED_BY],
			.szReason=g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_REASON],
			.iLength=timestmp );

		cprint_chat(0, _, "%L", LANG_SERVER, "CHAT_ADMIN_CT_BAN_PLAYER", sAdminname, sName, szText);
		strtoupper(sLength);
		log_amx("ADMIN %s HAS %s %s FROM THE GUARDS LENGTH: %s!",  sAdminname, "BANNED", sName, (iLength > 0) ? sLength : "PERMANENT");
	}
	else
	{
		RemovePlayerGuardBan(sAuthid);
		cprint_chat(0, _, "%L", LANG_SERVER, "CHAT_ADMIN_CT_UNBAN_PLAYER", g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATOR_NAME], g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_NAME]);
		log_amx("ADMIN %s HAS %s %s FROM THE GUARDS!",  g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATOR_NAME], "UNBANNED", g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_NAME]);
	}
}

public clcmd_toggle_ban_guard(id, level, cid)
{
	if(!cmd_access(id, level, cid, 2))
		return 1;
	
	new sTarget[MAX_AUTH_ID];
	read_argv(1, sTarget, charsmax(sTarget));
	remove_quotes(sTarget);
	
	new player = cmd_target(id, sTarget, CMDTARGET_NO_BOTS);

	new sAdminname[MAX_NICKNAME], szAdminAuthid[MAX_AUTH_ID];
	get_user_name(id, sAdminname, charsmax(sAdminname));
	get_user_authid(id, szAdminAuthid, charsmax(szAdminAuthid));

	if(!player)
	{
		new sLength[16];
		read_argv(2, sLength, charsmax(sLength));
		remove_quotes(sLength);

		new iLength = str_to_num(sLength);

		new szReason[MAX_GUARD_BAN_REASON_CHARS];
		read_argv(3, szReason, charsmax(szReason));
		remove_quotes(szReason);

		if(szReason[ 0 ] == EOS)
		{
			copy(szReason, charsmax(szReason), "None");
		}

		g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_LENGTH] = iLength;
		copy(g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_NAME], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_NAME]), sTarget);
		copy(g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATOR_NAME], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_INITIATOR_NAME]), sAdminname);
		copy(g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_INITIATED_BY], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_INITIATED_BY]), szAdminAuthid);
		copy(g_UserGuardBanData[USER_BAN_GUARD_DATA_BUFFER][USER_GUARD_BAN_REASON], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_REASON]), szReason);
		CheckPlayerHasGuardBan(sTarget, "clcmd_toggle_ban_guard_absent");
		return 1;
	}

	player = cmd_target(id, sTarget, CMDTARGET_OBEY_IMMUNITY);
	
	if( !player )
	{
		return 1;
	}

	new sAuthid[MAX_AUTH_ID], bool:is_CTBanned, sName[MAX_NICKNAME];
	get_user_name(player, sName, charsmax(sName));
	is_CTBanned = g_UserGuardBanData[player][USER_GUARD_BANNED];
	get_pcvar_string(g_iCvarSaveThrough, sTarget, charsmax(sTarget));
	
	switch( sTarget[0] )
	{
		case 's', 'a', 'S', 'A': get_user_authid(player, sAuthid, charsmax(sAuthid));
		case 'N', 'n': get_user_name(player, sAuthid, charsmax(sAuthid));
		case 'I', 'i': get_user_ip(player, sAuthid, charsmax(sAuthid));
	}
	
	if(!is_CTBanned)
	{
		new sLength[64], szText[128];
		read_argv(2, sLength, charsmax(sLength));

		new iLength = str_to_num(sLength);

		if(iLength < 0 || !is_str_num(sLength))
		{
			console_print(id, "Please add a positive length time (inSeconds) Or 0 - for permanent!");
			return 1;
		}
		
		new szReason[MAX_GUARD_BAN_REASON_CHARS], GetSystime = get_systime();
		read_argv(3, szReason, charsmax(szReason));
		remove_quotes(szReason);

		if(szReason[ 0 ] == EOS)
		{
			copy(szReason, charsmax(szReason), "None");
		}

		g_UserGuardBanData[player][USER_GUARD_BANNED] = true;
		g_UserGuardBanData[player][USER_GUARD_BAN_LENGTH] = iLength;
		copy(g_UserGuardBanData[player][USER_GUARD_BAN_NAME], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_NAME]), sName);
		copy(g_UserGuardBanData[player][USER_GUARD_BAN_INITIATOR_NAME], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_INITIATOR_NAME]), sAdminname);
		copy(g_UserGuardBanData[player][USER_GUARD_BAN_INITIATED_BY], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_INITIATED_BY]), szAdminAuthid);
		copy(g_UserGuardBanData[player][USER_GUARD_BAN_REASON], charsmax(g_UserGuardBanData[][USER_GUARD_BAN_REASON]), szReason);

		if(iLength > 0)
		{
			set_task(float(iLength), "task_unBanCT", player+TASK_UNBANCT, sAuthid, sizeof sAuthid);
		}

		if(get_user_team(player) == TEAM_GUARDS)
		{
			jointeam_prisoner(player);
		}

		if(iLength > 0)
		{
			time_formating( iLength, sLength, charsmax(sLength) );
			formatex(szText, charsmax(szText), "%L", LANG_SERVER, "CT_BAN_TEMP", sLength);
			iLength += GetSystime;
			g_UserGuardBanData[player][USER_GUARD_BAN_LENGTH] += GetSystime;
		}
		else
		{
			formatex(szText, charsmax(szText), "%L", LANG_SERVER, "CT_BAN_PERMANENT");
		}
		
		BanPlayerFromGuardsTeam(sAuthid, sName, sAdminname, szAdminAuthid, szReason, iLength);

		cprint_chat(0, _, "%L", LANG_SERVER, "CHAT_ADMIN_CT_BAN_PLAYER", sAdminname, sName, szText);
		strtoupper(sLength);
		log_amx("ADMIN <%s><%s> HAS %s <%s><%s> FROM THE GUARDS LENGTH: %s!", szAdminAuthid, sAdminname, "BANNED", sAuthid, sName, (iLength > 0) ? sLength : "PERMANENT");
	}
	else
	{
		g_UserGuardBanData[player][USER_GUARD_BANNED] = false;
		RemovePlayerGuardBan(sAuthid);

		cprint_chat(0, _, "%L", LANG_SERVER, "CHAT_ADMIN_CT_UNBAN_PLAYER", sAdminname, sName);
		log_amx("ADMIN <%s><%s> HAS %s <%s><%s> FROM THE GUARDS!", szAdminAuthid, sAdminname, "UNBANNED", sAuthid, sName);
	}

	return 1;
}

RemovePlayerGuardBan(const sAuthid[])
{
	if(g_iTupleHandler != Empty_Handle)
	{
		new szQuery[128], szCvars[2][32];
		get_pcvar_string(g_iCvarTablePrefix, szCvars[0], charsmax(szCvars[]));
		get_pcvar_string(g_iCvarTable, szCvars[1], charsmax(szCvars[]));
		formatex(szQuery, charsmax(szQuery), "DELETE FROM `%s`.`%s%s` WHERE `authid`='%s';", g_szDATABASE, szCvars[0], szCvars[1], sAuthid);
		SQL_ThreadQuery(g_iTupleHandler, "null", szQuery);
	}
	else if(g_vault != INVALID_HANDLE) {
		nvault_remove(g_vault, sAuthid);
	}
}

BanPlayerFromGuardsTeam(const sAuthid[MAX_AUTH_ID], sName[MAX_NICKNAME], sAdminname[MAX_NICKNAME], szAdminAuthid[MAX_AUTH_ID], szReason[MAX_GUARD_BAN_REASON_CHARS], const iLength)
{
	if(g_iTupleHandler != Empty_Handle)
	{
		new szQuery[256], szCvars[2][32];
		get_pcvar_string(g_iCvarTablePrefix, szCvars[0], charsmax(szCvars[]));
		get_pcvar_string(g_iCvarTable, szCvars[1], charsmax(szCvars[]));
		SQL_Escape_String(sName, charsmax(sName));
		SQL_Escape_String(sAdminname, charsmax(sAdminname));
		SQL_Escape_String(szReason, charsmax(szReason));
		formatex(szQuery, charsmax(szQuery), "INSERT INTO `%s`.`%s%s` \
			(`authid`,`player_name`,`admin_name`,`admin_authid`,`length`,`reason`) \
			VALUES('%s','%s','%s','%s','%d','%s');",
			g_szDATABASE, szCvars[0], szCvars[1],
			sAuthid, sName, sAdminname, szAdminAuthid, iLength, szReason);
		SQL_ThreadQuery(g_iTupleHandler, "null", szQuery);
	}
	else if(g_vault != INVALID_HANDLE)
	{
		new szBuffer[256];
		formatex(szBuffer, charsmax(szBuffer), "^"%s^" ^"%s^" ^"%s^" ^"%s^" ^"%d^"", sName, sAdminname, szAdminAuthid, szReason, iLength);
		nvault_set(g_vault, sAuthid, szBuffer);
	}
}

public jb_mm_itemselected(id, itemid)
{
	if(itemid == g_itemid)
	{
		DisplayGuardsBanMenu(id);
	}
}

public task_refresh_guardsbanmenu(taskid)
{
	DisplayGuardsBanMenu( taskid );
}

DisplayGuardsBanMenu(id, iTarget=0)
{
	new szText[196];
	formatex(szText, charsmax(szText), "%L", LANG_PLAYER, "CTBAN_MENU_TITLE");
	new menu = menu_create(szText, "CTBan_menu_handler", true);
	
	if( !iTarget || !is_user_connected(iTarget) )
	{
		new players[MAX_PLAYERS], pnum, iAccess;
		get_players(players, pnum, "ch");

		for(new i, player, sText[64], sPName[MAX_NICKNAME]; i < pnum; i++)
		{
			player = players[i];
			get_user_name(player, sPName, charsmax(sPName));
			if(get_user_flags(player) & ADMIN_IMMUNITY)
			{
				formatex(sText, charsmax(sText), "\r* \d%s", sPName);
				iAccess = ADMIN_FLAG;
			}
			else if( g_UserGuardBanData[player][USER_GUARD_BANNED] )
			{
				formatex(sText, charsmax(sText), "\r%s", sPName);
				iAccess = 0;
			}
			else
			{
				formatex(sText, charsmax(sText), "\w%s", sPName);
				iAccess = ADMIN_FLAG;
			}

			sPName[0] = '#';
			num_to_str(get_user_userid(player), sPName[1], charsmax(sPName)-1);
			menu_additem(menu, sText, sPName, iAccess);
		}
	}
	else if(g_UserGuardBanData[iTarget][USER_GUARD_BANNED])
	{
		menu_additem(menu, "\yPrevious page", "BACK");

		if(get_user_flags(id) & ADMIN_FLAG)
		{
			formatex(szText, charsmax(szText), "REMOVE_BAN_#%d", get_user_userid(iTarget))
			menu_additem(menu, "\rRemove \wban\r! ^n^n", szText);
		}

		new szAuthid[MAX_AUTH_ID], sLength[64];
		if(!time_formating( (g_UserGuardBanData[iTarget][USER_GUARD_BAN_LENGTH] - get_systime()), sLength, charsmax(sLength) ))
		{
			copy(sLength, charsmax(sLength), "Permanent");
		}

		get_user_authid(iTarget, szAuthid, charsmax(szAuthid));
		formatex(szText, charsmax(szText), "Player: %s ^n ID: %s ^n Banned by: %s ^n Reason: %s ^n Length: %s",
			g_UserGuardBanData[iTarget][USER_GUARD_BAN_NAME], szAuthid,
			g_UserGuardBanData[iTarget][USER_GUARD_BAN_INITIATOR_NAME],
			g_UserGuardBanData[iTarget][USER_GUARD_BAN_REASON], sLength);
		menu_addtext(menu, szText);

		menu_setprop(menu, MPROP_EXIT, MEXIT_NEVER);
	}
	
	if(!menu_display(id, menu))
	{
		menu_destroy(menu);
	}
}

public CTBan_menu_handler(id, menu, item)
{
	if(item == MENU_EXIT || item == MENU_TIMEOUT)
	{
		menu_destroy(menu)
		return PLUGIN_HANDLED;
	}
	
	new paccess, sData[32], Callback, player;
	menu_item_getinfo(menu, item, paccess, sData, charsmax(sData), "", 0, Callback);
	
	// destroying the menu after we got what we need!
	menu_destroy(menu);

	if(equal(sData, "BACK"))
	{
		DisplayGuardsBanMenu(id);
		return PLUGIN_HANDLED;
	}

	if(equal(sData, "REMOVE_BAN_#", 12))
	{
		player = find_player("k", str_to_num(sData[12]));

		if(!is_user_connected(player))
		{
			client_print(id, print_center, "%L", id, "COMMAND_TARGET_NOT_FOUND");
			DisplayGuardsBanMenu(id);
			return PLUGIN_HANDLED;
		}

		if(g_UserGuardBanData[player][USER_GUARD_BANNED])
		{
			amxclient_cmd(id, "jb_toggle_guard_ban", sData[11]);
		}

		DisplayGuardsBanMenu(id);
		return PLUGIN_HANDLED;
	}

	player = find_player("k", str_to_num(sData[1]));

	if(!is_user_connected(player))
	{
		client_print(id, print_center, "%L", id, "COMMAND_TARGET_NOT_FOUND");
		DisplayGuardsBanMenu(id);
		return PLUGIN_HANDLED;
	}

	if(get_user_flags(player) & ADMIN_IMMUNITY)
	{
		client_print(id, print_center, "%L", id, "PLAYER_HAS_IMMUNITY");
		DisplayGuardsBanMenu(id);
		return PLUGIN_HANDLED;
	}

	if(g_UserGuardBanData[player][USER_GUARD_BANNED])
	{
		DisplayGuardsBanMenu(id, player);
		return PLUGIN_HANDLED;
	}

	if(get_user_flags(id) & ADMIN_FLAG)
	{
		amxclient_cmd(id, "jb_toggle_guard_ban", sData, "0");
	}

	DisplayGuardsBanMenu(id);
	return PLUGIN_HANDLED;
}

time_formating( iTime, szString[], len )
{
	if(iTime <= 0)
	{
		return 0;
	}

	new hours, minutes, seconds = iTime;
	seconds -= (hours = (seconds / 3600)) * 3600;
	seconds -= (minutes = (seconds / 60)) * 60;
	
	if(hours > 0 && minutes > 0 && seconds > 0)
	{
		format_time(szString, len, "%H Hours, %M minutes and %S seconds", iTime);
	}
	else if(hours > 0 && minutes > 0 && !seconds)
	{
		format_time(szString, len, "%H Hours and %M minutes", iTime);
	}
	else if(!hours && minutes > 0 && seconds > 0)
	{
		format_time(szString, len, "%M Minutes and %S seconds", iTime);
	}
	else if(hours > 0 && !minutes && seconds > 0)
	{
		format_time(szString, len, "%H Hours and %S seconds", iTime);
	}
	else if(hours > 0 && !minutes && !seconds)
	{
		format_time(szString, len, "%H Hours", iTime);
	}
	else if(!hours && minutes > 0 && !seconds)
	{
		format_time(szString, len, "%M minutes", iTime);
	}
	else if(!hours && !minutes && seconds > 0)
	{
		format_time(szString, len, "%S Seconds", iTime);
	}

	return 1;
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
