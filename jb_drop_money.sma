/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <hamsandwich>
#include <jailbreak_core>
#include <fakemeta>
#include <engine>

#define PLUGIN "[JB] Drop money"
#define AUTHOR "Natsheh"

new MONEY_MODEL[64] = "models/jailbreak/w_valuables.mdl",
	g_iMoneyModelBody;

new const MONEY_CLASSNAME[] = "money";

new const Float:MONEY_MINS[] = { -1.0, -1.0, -1.0 };
new const Float:MONEY_MAXS[] = { 1.0, 1.0, 1.0 };

new g_pcvar_one, g_pcvar_two, g_pcvar_twoB, g_pcvar_three, g_pcvar_four, g_pcvar_five, g_pcvar_six;

public plugin_precache()
{
	new szText[16] = "0";
	jb_ini_get_keyvalue("MONEY_DROP", "MONEY_MDL_BODY", szText, charsmax(szText));
	g_iMoneyModelBody = str_to_num(szText);
	jb_ini_get_keyvalue("MONEY_DROP", "MONEY_MDL", MONEY_MODEL, charsmax(MONEY_MODEL));
	PRECACHE_WORLD_ITEM(MONEY_MODEL);
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_pcvar_one = register_cvar("jb_moneydrop_amount", "4");
	g_pcvar_two = register_cvar("jb_moneydrop_guard_loose_ondrop", "0");
	g_pcvar_twoB = register_cvar("jb_moneydrop_prisoner_loose_ondrop", "0");
	g_pcvar_three = register_cvar("jb_moneydrop_guard_cash", "500");
	g_pcvar_four = register_cvar("jb_moneydrop_prisoner_cash", "150");
	g_pcvar_five = register_cvar("jb_moneydrop_dropinevents", "0");   // 1 - drop in lr & day events / 2 - lr only / 3 - day only;
	g_pcvar_six = register_cvar("jb_moneydrop_glow_money", "0");
	
	RegisterHam(Ham_Killed, "player", "fw_player_killed_post", true);
	
	register_touch(MONEY_CLASSNAME, "player", "fw_Touch_post");
}

public fw_Touch_post(ent, id)
{
	if(!pev_valid(ent) || !is_user_alive(id) || (pev(ent, pev_flags) & FL_KILLME))
		return;
	
	money_taken(id, ent);
}

public fw_player_killed_post(iVictim, iKiller, shouldgib)
{
	new iDay = jb_get_current_day(),
	iDuel = jb_get_current_duel();
	
	switch( get_pcvar_num(g_pcvar_five) )
	{
		case 0: if(iDay > DAY_NONE || iDuel > DUEL_NONE) return;
		case 2: if(iDay > DAY_NONE) return; 
		case 3: if(iDuel > DUEL_NONE) return;
	}
	
	new iValue, iLoose;
	switch( get_user_team(iVictim) )
	{
		case TEAM_PRISONERS: { iValue = get_pcvar_num(g_pcvar_four); iLoose = get_pcvar_num(g_pcvar_two); }
		case TEAM_GUARDS: { iValue = get_pcvar_num(g_pcvar_three); iLoose = get_pcvar_num(g_pcvar_twoB); }
	}
	
	if(iValue != 0)
	{
		new Float:fOrigin[3];
		pev(iVictim, pev_origin, fOrigin)
		drop_money(iVictim, fOrigin, get_pcvar_num(g_pcvar_one), iValue);
	}

	if(iLoose != 0)
	{
		jb_give_user_cash(iVictim, -iLoose);
	}
}

public jb_round_start_pre()
{
	new i = 0;
	while ( (i = find_ent_by_class(i, MONEY_CLASSNAME)) > 0 )
	{
		set_pev(i, pev_flags, FL_KILLME);
		dllfunc(DLLFunc_Think, i);
	}
}

money_taken(taker, ent)
{
	jb_give_user_cash(taker, pev(ent, pev_iuser4));

	// remove the entity safely.
	set_pev(ent, pev_flags, FL_KILLME);
	dllfunc(DLLFunc_Think, ent);
}

drop_money(const owner, const Float:fOrigin[3], const iAmount=1, const iValue)
{
	if(!iValue || !iAmount || pev(owner, pev_deadflag) == DEAD_NO) return;

	new Float:fVelo[3], Float:fAngles[3], Float:fColor[3], Float:fHue = get_pcvar_float(g_pcvar_six), ent;

	for(new i, bool:bGlow = bool:(fHue > 0.0 && HSVtoRGB(fHue, 100.0, 100.0, fColor) != 0) ? true : false; i < iAmount; i++)
	{
		ent = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"));

		if(!ent) continue;

		pev(ent, pev_angles, fAngles);
		fAngles[1] += random_float(1.0, 360.0);
		set_pev(ent, pev_origin, fOrigin);
		set_pev(ent, pev_angles, fAngles);
		set_pev(ent, pev_owner, owner);
		set_pev(ent, pev_body, g_iMoneyModelBody);
		set_pev(ent, pev_classname, MONEY_CLASSNAME);
		engfunc(EngFunc_SetModel, ent, MONEY_MODEL);
		set_pev(ent, pev_movetype, MOVETYPE_TOSS);
		set_pev(ent, pev_solid, SOLID_TRIGGER);
		engfunc(EngFunc_SetSize, ent, MONEY_MINS, MONEY_MAXS);

		set_pev(ent, pev_iuser4, iValue);

		fVelo[0] += random_float(-150.0, 150.0);
		fVelo[1] += random_float(-150.0, 150.0);
		fVelo[2] += random_float(100.0, 150.0);
		set_pev(ent, pev_velocity, fVelo);
		engfunc(EngFunc_DropToFloor, ent);

		if(bGlow == true)
		{
			set_pev(ent, pev_renderfx, kRenderFxGlowShell);
			set_pev(ent, pev_rendercolor, fColor);
			set_pev(ent, pev_renderamt, 20.0);
		}
	}
}

jb_give_user_cash(const id, iAmount)
{
	iAmount += jb_get_user_cash(id);
	jb_set_user_cash(id, iAmount);
	return iAmount;
}

stock Float: floatmod(Float: num, Float: denom)
{
    return num - denom * floatround(num / denom, floatround_floor);
}

stock Float: operator%(Float: oper1, Float: oper2)
{
    return floatmod(oper1, oper2);
}

HSVtoRGB(Float:H, Float:S, Float:V, Float:fColor_RGB[3]) {

	if(H>360.0 || H<0.0 || S>100.0 || S<0.0 || V>100.0 || V<0.0) {
		log_amx("The givem HSV values are not in valid range");
		return 0;
	}

	new Float:s = S / 100.0,
	 Float:v = V / 100.0,
	 Float:C = s * v,
	 Float:X = ( C * ( 1.0 - floatabs( floatmod(( H / 60.0 ), 2.0) - 1.0 ) ) ),
	 Float:m = v - C,
	 Float:r, Float:g, Float:b;

	switch( floatround(H) )
	{
		case 0..60   : { r = C; g = X; b = 0.0; }
		case 61..120 : { r = X; g = C; b = 0.0; }
		case 121..180: { r = 0.0; g = C; b = X; }
		case 181..240: { r = 0.0; g = X; b = C; }
		case 241..300: { r = X; g = 0.0; b = C; }
		default: { r = C; g = 0.0; b = X; }
	}

	enum (+=1) {
		R = 0, G , B
	}

	fColor_RGB[ R ] = (r+m)*255.0;
	fColor_RGB[ G ] = (g+m)*255.0;
	fColor_RGB[ B ] = (b+m)*255.0;
	return 1;
}
