/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <engine>
#include <fun>
#include <jb_minigames_core>
#include <jailbreak_core>
#include <nvault>
#include <hamsandwich>
#include <xs>
#include <cs_player_models_api>

#define PLUGIN "[JB] Soccer/Death-Ball"
#define AUTHOR "Natsheh"

#define get_player_team(%1) g_pteam[%1]
#define set_player_team(%1,%2) g_pteam[%1] = %2

#define TASK_SOCCERBALL 34643
#define TASK_DEATHBALL 24643

#define EV_INT_BALL_PREV_OWNER EV_INT_iuser1
#define EV_INT_CARRIER EV_INT_iuser2
#define EV_INT_BALL_PHYISC_MODE EV_INT_iuser3
#define EV_INT_BALL_TYPE EV_INT_iuser4

#define BALL_KICK_DELAY 0.35

#if AMXX_VERSION_NUM > 182
#define client_disconnect client_disconnected
#endif

enum any:BALL_PHYSICS (+=1)
{
	PHYSIC_BALL_REALITY = 0,
	PHYSIC_BALL_FOLLOW
}

new MINIGAME_ID, g_vault, g_pteam[33] = {-1,-1,...},
MAP_NAME[32], g_iScore[2],
g_cvar_kick_force, g_pBallOwner[MAX_PLAYERS+1], Float:g_delay_shoot[33], g_ball_physic_status[33] = { PHYSIC_BALL_FOLLOW, PHYSIC_BALL_FOLLOW, ... };

new const g_ball_classname[] = "soccer_ball";

enum (+=1)
{
	NO_TEAM = -1,
	BLUE_TEAM,
	RED_TEAM
}

enum (+=1)
{
	MAXS = 0,
	MINS,
	SIZES
}

enum _:SOCCER_DATA
{
	Float:fOrigin_FieldLimits[6],
	Float:fOrigin_GoalSize[12],
	Float:fOrigin_BallSpawn[3],
	bool:BlueGoalSet,
	bool:RedGoalSet,
	bool:BallSpawnSet,
	bool:FieldSet
}

new Float:RGoalSize[SIZES][3];
new Float:BGoalSize[SIZES][3];
new Float:FieldSize[SIZES][3];

new any:g_iData[SOCCER_DATA], g_iTrailSprite, HamHook:TakeDamagePre, HamHook:TraceAttackPre;

#define TASK_FIELD_DISPLAYMENT 2333331

#define fOrigin_FieldLimits][%1][%2] fOrigin_FieldLimits][((%1)*3)+(%2)]
#define fOrigin_GoalSize][%1][%2] fOrigin_GoalSize][((%1)*6)+(%2)]

#if !defined EOS
#define EOS 0
#endif

native jb_get_commander();
native register_jailbreak_cmitem(const itemname[]);
forward jb_cmenu_item_postselect(id, item);

new g_szBall_mdl[64] = "models/jailbreak/ball.mdl";

new g_szBLUE_TEAM[32] = "prisoner_allies", g_szRED_TEAM[32] = "prisoner_enemies", g_iBLUE_TEAM_MDL_BODY, g_iRED_TEAM_MDL_BODY,
g_szGOAL_SOUND[64], g_szOUT_SOUND[64], g_szBALL_BOUNCE_SOUND[64], g_szBALL_KICK_SOUND[64], g_X_ITEM;

public plugin_precache()
{
	jb_ini_get_keyvalue("SOCCER", "BALL_MDL", g_szBall_mdl, charsmax(g_szBall_mdl));
	PRECACHE_WORLD_ITEM(g_szBall_mdl);
	
	g_iTrailSprite = PRECACHE_SPRITE_I("sprites/laserbeam.spr");
	
	jb_ini_get_keyvalue("SOCCER", "GOAL_SOUND", g_szGOAL_SOUND, charsmax(g_szGOAL_SOUND));
	jb_ini_get_keyvalue("SOCCER", "OUT_SOUND", g_szOUT_SOUND, charsmax(g_szOUT_SOUND));
	jb_ini_get_keyvalue("SOCCER", "BALL_BOUNCE_SOUND", g_szBALL_BOUNCE_SOUND, charsmax(g_szBALL_BOUNCE_SOUND));
	jb_ini_get_keyvalue("SOCCER", "BALL_KICK_SOUND", g_szBALL_KICK_SOUND, charsmax(g_szBALL_KICK_SOUND));
	
	if(g_szBALL_KICK_SOUND[0] != EOS)
		PRECACHE_SOUND(g_szBALL_KICK_SOUND);

	if(g_szGOAL_SOUND[0] != EOS)
		(contain(g_szGOAL_SOUND, ".mp3") > -1) ? PRECACHE_FILE(g_szGOAL_SOUND):PRECACHE_SOUND(g_szGOAL_SOUND);
	
	if(g_szOUT_SOUND[0] != EOS)
		(contain(g_szOUT_SOUND, ".mp3") > -1) ? PRECACHE_FILE(g_szOUT_SOUND):PRECACHE_SOUND(g_szOUT_SOUND);
	
	if(g_szBALL_BOUNCE_SOUND[0] != EOS)
		PRECACHE_SOUND(g_szBALL_BOUNCE_SOUND);
	
	jb_ini_get_keyvalue("SOCCER", "BLUE_TEAM_P_MDL", g_szBLUE_TEAM, charsmax(g_szBLUE_TEAM));
	jb_ini_get_keyvalue("SOCCER", "RED_TEAM_P_MDL", g_szRED_TEAM, charsmax(g_szRED_TEAM));
	
	new szString[64];
	if(g_szBLUE_TEAM[0] != EOS)
	{
		szString[0] = '0'; szString[1] = EOS;
		jb_ini_get_keyvalue("SOCCER", "BLUE_TEAM_P_MDL_BODY", szString, charsmax(szString));
		g_iBLUE_TEAM_MDL_BODY = str_to_num(szString);
		formatex(szString, charsmax(szString), "models/player/%s/%s.mdl", g_szBLUE_TEAM, g_szBLUE_TEAM);
		PRECACHE_PLAYER_MODEL(szString);
		formatex(szString, charsmax(szString), "models/player/%s/%sT.mdl", g_szBLUE_TEAM, g_szBLUE_TEAM);
		if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);
	}
	
	if(g_szRED_TEAM[0] != EOS)
	{
		szString[0] = '0'; szString[1] = EOS;
		jb_ini_get_keyvalue("SOCCER", "RED_TEAM_P_MDL_BODY", szString, charsmax(szString));
		g_iRED_TEAM_MDL_BODY = str_to_num(szString);
		formatex(szString, charsmax(szString), "models/player/%s/%s.mdl", g_szRED_TEAM, g_szRED_TEAM);
		PRECACHE_PLAYER_MODEL(szString);
		formatex(szString, charsmax(szString), "models/player/%s/%sT.mdl", g_szRED_TEAM, g_szRED_TEAM);
		if(file_exists(szString)) PRECACHE_PLAYER_MODEL(szString);
	}
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR);
	
	MINIGAME_ID = register_jb_minigame("Soccer | Death Ball", "jb_soccer_begin");
	g_X_ITEM = register_jailbreak_cmitem("SOCCER_SETTINGS");
	
	g_cvar_kick_force = register_cvar("jb_soccer_kick_force", "600");
	
	register_clcmd("say /soccer", "soccer_setting_menu", ADMIN_KICK);
	register_clcmd("say /ball", "clcmd_spawn_ball", ADMIN_KICK);
	register_clcmd("say /dball", "clcmd_spawn_dball", ADMIN_KICK);

	register_think(g_ball_classname, "ball_think");
	register_touch(g_ball_classname, "*", "ball_touched");
	
	RegisterHam(Ham_Spawn, "player", "fw_player_spawn_post", .Post = true);
	RegisterHam(Ham_Killed, "player", "fw_player_killed_post", .Post = true);
	RegisterHam(Ham_TraceAttack, "info_target", "fw_info_target_traceattack_post", .Post = true);
	
	DisableHamForward(TraceAttackPre = RegisterHam(Ham_TraceAttack, "player", "fw_traceattack_player_pre"));
	DisableHamForward(TakeDamagePre = RegisterHam(Ham_TakeDamage, "player", "fw_takedamage_player_pre"));
	
	g_vault = nvault_open("jb_soccer");
	if(g_vault == INVALID_HANDLE)
	{
		log_error(AMX_ERR_NATIVE, "Failed to create jb_soccer nvault!");
		return;
	}
	
	new szString[256], iTimestamp;
	get_mapname(MAP_NAME, charsmax(MAP_NAME))
	
	if(nvault_lookup(g_vault, MAP_NAME, szString, charsmax(szString), iTimestamp))
	{
		// BallOrigin, MaxSLimits, MinSLimits RGoalOriginM, BGoalOriginM
		new szBallOrigin[30], szRGoalOrigin[SIZES][30], szBGoalOrigin[SIZES][30], szLimits[SIZES][30], x;
		x = parse(szString, szBallOrigin, charsmax(szBallOrigin), 
		szLimits[MAXS], charsmax(szLimits[]), szLimits[MINS], charsmax(szLimits[]),
		szRGoalOrigin[MAXS], charsmax(szRGoalOrigin[]), szRGoalOrigin[MINS], charsmax(szRGoalOrigin[]),
		szBGoalOrigin[MAXS], charsmax(szBGoalOrigin[]),szBGoalOrigin[MINS], charsmax(szBGoalOrigin[]))
		
		remove_quotes(szBallOrigin);
		remove_quotes(szRGoalOrigin[MAXS]);
		remove_quotes(szRGoalOrigin[MINS]);
		remove_quotes(szBGoalOrigin[MAXS]);
		remove_quotes(szBGoalOrigin[MINS]);
		remove_quotes(szLimits[MAXS]);
		remove_quotes(szLimits[MINS]);
		
		new szfValue[10], Float:fTemp[3];
		server_print("*******************************/");
		server_print("* [ SOCCER SETTINGS ] *************/");
		
		if( x >= 1 && szBallOrigin[0] != EOS )
		{
			for(new i; i < 3; i++)
			{
				strtok(szBallOrigin, szfValue, charsmax(szfValue), szBallOrigin, charsmax(szBallOrigin), ' ');
				g_iData[fOrigin_BallSpawn][i] = floatstr(szfValue);
			}
			
			g_iData[BallSpawnSet] = true;
		}
		
		if( x >= 2 && szLimits[MAXS][0] != EOS )
		{
			for(new i; i < 3; i++)
			{
				strtok(szLimits[MAXS], szfValue, charsmax(szfValue), szLimits[MAXS], charsmax(szLimits[]), ' ');
				FieldSize[MAXS][i] = g_iData[fOrigin_FieldLimits][MAXS][i] = floatstr(szfValue);
			}
		}
		
		if( x >= 3 && szLimits[MINS][0] != EOS )
		{
			for(new i; i < 3; i++)
			{
				strtok(szLimits[MINS], szfValue, charsmax(szfValue), szLimits[MINS], charsmax(szLimits[]), ' ');
				g_iData[fOrigin_FieldLimits][MINS][i] = floatstr(szfValue);
			}
			
			g_iData[FieldSet] = true;
			
			FieldSize[MAXS][0] = fTemp[0] = any:g_iData[fOrigin_FieldLimits][MAXS][0];
			FieldSize[MINS][0] = fTemp[1] = any:g_iData[fOrigin_FieldLimits][MINS][0];
			if(fTemp[0] < fTemp[1])
			{
				FieldSize[MINS][0] = fTemp[0];
				FieldSize[MAXS][0] = fTemp[1];
			}
						
			FieldSize[MAXS][1] = fTemp[0] = any:g_iData[fOrigin_FieldLimits][MAXS][1];
			FieldSize[MINS][1] = fTemp[1] = any:g_iData[fOrigin_FieldLimits][MINS][1];
			if(fTemp[0] < fTemp[1])
			{
				FieldSize[MINS][1] = fTemp[0];
				FieldSize[MAXS][1] = fTemp[1];
			}
						
			FieldSize[MAXS][2] = fTemp[0] = any:g_iData[fOrigin_FieldLimits][MAXS][2];
			FieldSize[MINS][2] = fTemp[1] = any:g_iData[fOrigin_FieldLimits][MINS][2];
			if(fTemp[0] < fTemp[1])
			{
				FieldSize[MINS][2] = fTemp[0];
				FieldSize[MAXS][2] = fTemp[1];
			}
				
			server_print("* The Soccer Field has been set!")
		}
		
		if( x >= 4 && szRGoalOrigin[MAXS][0] != EOS )
		{
			for(new i; i < 3; i++)
			{
				strtok(szRGoalOrigin[MAXS], szfValue, charsmax(szfValue), szRGoalOrigin[MAXS], charsmax(szRGoalOrigin[]), ' ');
				g_iData[fOrigin_GoalSize][RED_TEAM][i] = floatstr(szfValue);
			}
		}
		
		if( x >= 5 && szRGoalOrigin[MINS][0] != EOS  )
		{
			for(new i = 3; i < 6; i++)
			{
				strtok(szRGoalOrigin[MINS], szfValue, charsmax(szfValue), szRGoalOrigin[MINS], charsmax(szRGoalOrigin[]), ' ');
				g_iData[fOrigin_GoalSize][RED_TEAM][i] = floatstr(szfValue);
			}
			
			g_iData[RedGoalSet] = true;
			
			RGoalSize[MAXS][0] = fTemp[0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][0];
			RGoalSize[MINS][0] = fTemp[1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][3];
			
			if(fTemp[0] < fTemp[1])
			{
				RGoalSize[MINS][0] = fTemp[0];
				RGoalSize[MAXS][0] = fTemp[1];
			}
			
			RGoalSize[MAXS][1] = fTemp[0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][1];
			RGoalSize[MINS][1] = fTemp[1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][4];
			
			if(fTemp[0] < fTemp[1])
			{
				RGoalSize[MINS][1] = fTemp[0];
				RGoalSize[MAXS][1] = fTemp[1];
			}
					
			
			RGoalSize[MAXS][2] = fTemp[0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][2];
			RGoalSize[MINS][2] = fTemp[1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][5];
			
			if(fTemp[0] < fTemp[1])
			{
				RGoalSize[MINS][2] = fTemp[0];
				RGoalSize[MAXS][2] = fTemp[1];
			}
			
			server_print("* The Red Goal has been set!")
		}
		
		if( x >= 6 && szBGoalOrigin[MAXS][0] != EOS )
		{
			for(new i = 0; i < 3; i++)
			{
				strtok(szBGoalOrigin[MAXS], szfValue, charsmax(szfValue), szBGoalOrigin[MAXS], charsmax(szBGoalOrigin[]), ' ');
				g_iData[fOrigin_GoalSize][BLUE_TEAM][i] = floatstr(szfValue);
			}
		}
		
		if( x >= 7 && szBGoalOrigin[MINS][0] != EOS )
		{
			for(new i = 3; i < 6; i++)
			{
				strtok(szBGoalOrigin[MINS], szfValue, charsmax(szfValue), szBGoalOrigin[MINS], charsmax(szBGoalOrigin[]), ' ');
				g_iData[fOrigin_GoalSize][BLUE_TEAM][i] = floatstr(szfValue);
			}
			
			g_iData[BlueGoalSet] = true;
			
			BGoalSize[MAXS][0] = fTemp[0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][0];
			BGoalSize[MINS][0] = fTemp[1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][3];
			
			if(fTemp[0] < fTemp[1])
			{
				BGoalSize[MINS][0] = fTemp[0];
				BGoalSize[MAXS][0] = fTemp[1];
			}
			
			BGoalSize[MAXS][1] = fTemp[0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][1];
			BGoalSize[MINS][1] = fTemp[1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][4];
			
			if(fTemp[0] < fTemp[1])
			{
				BGoalSize[MINS][1] = fTemp[0];
				BGoalSize[MAXS][1] = fTemp[1];
			}		
			
			BGoalSize[MAXS][2] = fTemp[0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][2];
			BGoalSize[MINS][2] = fTemp[1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][5];
			
			if(fTemp[0] < fTemp[1])
			{
				BGoalSize[MINS][2] = fTemp[0];
				BGoalSize[MAXS][2] = fTemp[1];
			}
			
			server_print("* The Blue Goal has been set!");
		}

		server_print("*******************************/");
	}
	
	set_task(1.0, "soccerfield_think", TASK_FIELD_DISPLAYMENT, _, _, "b");
}

public fw_info_target_traceattack_post(ent, attacker, Float:fDamage, Float:fDirection[3], trace, iDamageBits)
{
	static iType; iType = entity_get_int(ent, EV_INT_BALL_TYPE);

	if(iType != TASK_SOCCERBALL && iType != TASK_DEATHBALL)
	{
		return;
	}

	static Float:endpoint[3], Float:velocity[3];
	pev(ent, pev_velocity, velocity);
	get_tr2(trace, TR_vecEndPos, endpoint);
	draw_spark(endpoint);
	entity_set_int(ent, EV_INT_BALL_PREV_OWNER, attacker);

	xs_vec_mul_scalar(fDirection, fDamage, fDirection);
	xs_vec_mul_scalar(fDirection, 10.0, fDirection);
	xs_vec_add(velocity, fDirection, velocity);
	set_pev(ent, pev_velocity, velocity);
}

draw_spark(Float:fOrigin[3])
{
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, fOrigin, 0);
	write_byte(TE_SPARKS);
	engfunc(EngFunc_WriteCoord, fOrigin[0]);
	engfunc(EngFunc_WriteCoord, fOrigin[1]);
	engfunc(EngFunc_WriteCoord, fOrigin[2]);
	message_end();
}

public client_disconnect(id)
{
	g_ball_physic_status[id] = PHYSIC_BALL_FOLLOW;
	set_player_team(id, NO_TEAM);

	if(g_pBallOwner[id] > 0)
	{
		ball_dispatch(g_pBallOwner[id], id);
	}
}

public clcmd_spawn_ball(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1)) return PLUGIN_HANDLED;
	
	new szPhysicStatus[4];
	num_to_str(g_ball_physic_status[id], szPhysicStatus, charsmax(szPhysicStatus));
	spawn_ball(szPhysicStatus, TASK_SOCCERBALL);
	return PLUGIN_HANDLED;
}

public clcmd_spawn_dball(id, level, cid)
{
	if(!cmd_access(id, level, cid, 1)) return PLUGIN_HANDLED;
	
	new szPhysicStatus[4];
	num_to_str(g_ball_physic_status[id], szPhysicStatus, charsmax(szPhysicStatus));
	spawn_ball(szPhysicStatus, TASK_DEATHBALL);
	return PLUGIN_HANDLED;
}

public jb_cmenu_item_postselect(id, item)
{
	if(g_X_ITEM == item)
	{
		cm_soccer_item(id);
		return JB_HANDLED;
	}

	return JB_IGNORED;
}

cm_soccer_item(id)
{
	new iMenu = menu_create("\ySoccer \rmenu", "mhandler_2");
	
	if(iMenu == INVALID_HANDLE)
	{
		return PLUGIN_HANDLED;
	}

	menu_additem(iMenu, "\yCreate \wa soccer ball");
	menu_additem(iMenu, "\yCreate a \rdeath \wball^n");
	menu_additem(iMenu, "\rRemove \wall soccer balls^n^n");
	
	static szBallPhysicMovements[BALL_PHYSICS][] = {
		"Reality", "Following"
	}

	new szText[96];
	formatex(szText, charsmax(szText), "\rBall Movement Physics : %s !", szBallPhysicMovements[ g_ball_physic_status[id] ]);
	menu_additem(iMenu, szText)
	
	new szString[64];
	formatex(szString, charsmax(szString), "\rReset soccer match results!^n\yAllies: \w%d ^n \rEnemies: \w%d", g_iScore[BLUE_TEAM], g_iScore[RED_TEAM])
	menu_additem(iMenu, szString);
	
	if(!menu_display(id, iMenu))
	{
		menu_destroy(iMenu);
	}

	return PLUGIN_CONTINUE;
}

public mhandler_2(id, menu, item)
{
	menu_destroy(menu);
	
	if(item < 0 || jb_get_commander() != id)
	{
		return PLUGIN_HANDLED;
	}
	
	new szCommander[32];
	get_user_name(id, szCommander, charsmax(szCommander));
	
	switch( item )
	{
		case 0:
		{
			new szPhysicStatus[4];
			num_to_str(g_ball_physic_status[id], szPhysicStatus, charsmax(szPhysicStatus));
			spawn_ball(szPhysicStatus, TASK_SOCCERBALL);
			cprint_chat(0, _, "!tCommander !g%s !yhas spawned a soccer ball!", szCommander)
		}
		case 1:
		{
			new szPhysicStatus[4];
			num_to_str(g_ball_physic_status[id], szPhysicStatus, charsmax(szPhysicStatus));
			spawn_ball(szPhysicStatus, TASK_DEATHBALL);
			cprint_chat(0, _, "!tCommander !g%s !yhas spawned a death ball!", szCommander)
		}
		case 2:
		{
			cprint_chat(0, _, "!tCommander !g%s !yhas removed all the soccer balls!", szCommander)
			
			RemoveSoccerBalls();
		}
		case 3:
		{
			if( ++g_ball_physic_status[id] >= BALL_PHYSICS )
			{
				g_ball_physic_status[id] = PHYSIC_BALL_REALITY;
			}
		}
		case 4:
		{
			g_iScore[BLUE_TEAM] = 0;
			g_iScore[RED_TEAM] = 0;
			cprint_chat(0, _, "!tCommander !g%s !yhas reset soccer match results!", szCommander)
		}
	}
	
	cm_soccer_item(id);
	return PLUGIN_HANDLED;
}

public fw_player_spawn_post(id)
{
	if(g_pBallOwner[id] > 0)
	{
		ball_dispatch(g_pBallOwner[id], id);
	}
}

public fw_player_killed_post(vic)
{
	set_player_team(vic,NO_TEAM);

	if(g_pBallOwner[vic] > 0)
	{
		ball_dispatch(g_pBallOwner[vic], vic);
	}
}

public create_ball()
{
	new ball = create_entity("info_target");
	
	if(!ball)
	{
		cprint_chat(jb_get_commander(), _, "!gFailed to create the ball!")
		return -1;
	}
	
	entity_set_string(ball, EV_SZ_classname, g_ball_classname);
	entity_set_int(ball, EV_INT_solid, SOLID_BBOX);
	entity_set_int(ball, EV_INT_movetype, MOVETYPE_BOUNCE);
	entity_set_int(ball, EV_INT_BALL_TYPE, TASK_SOCCERBALL);
	//entity_set_float(ball, EV_FL_takedamage, DAMAGE_NO);
	entity_set_edict(ball, EV_ENT_owner, 0);
	
	entity_set_model(ball, g_szBall_mdl);
	entity_set_size(ball, Float:{ -15.0, -15.0, -11.170 }, Float:{ 15.0, 15.0, 11.170 });
	
	return ball;
}

public ball_touched(ent, player)
{
	static Float:fVector[3], Float:gtime;
	gtime = get_gametime();
	
	if( !player || !(1 <= player <= MAX_PLAYERS) )
	{
		static Float:fVelocity[3];
		entity_get_vector(ent, EV_VEC_velocity, fVelocity);

		if(!xs_vec_equal(fVelocity, Float:{0.0, 0.0, 0.0}) && entity_get_float(ent, EV_FL_fuser4) < gtime) {
			entity_set_float(ent, EV_FL_fuser4, gtime + 0.1);
			
			static iTr2, Float:fEnd[3];
			iTr2 = create_tr2();

			pev(ent, pev_origin, fVector);
			pev(ent, pev_velocity, fEnd);
			xs_vec_add(fVector, fEnd, fEnd);
			engfunc(EngFunc_TraceLine, fVector, fEnd, 0, ent, iTr2);
			get_tr2(iTr2, TR_vecPlaneNormal, fVector);
			free_tr2(iTr2);

			if(fVector[0] == 0.0) fVector[0] = 1.0;
			if(fVector[1] == 0.0) fVector[1] = 1.0;
			if(fVector[2] == 0.0) fVector[2] = 1.0;

			// world, other entities!!!
			fVelocity[0] = fVelocity[0] * (fVector[0] * 0.90);
			fVelocity[1] = fVelocity[1] * (fVector[1] * 0.90);
			fVelocity[2] = fVelocity[2] * (fVector[2] * 0.90);
			entity_set_vector(ent, EV_VEC_velocity, fVelocity);
			
			if(g_szBALL_BOUNCE_SOUND[0] != EOS)
			{
				emit_sound(ent, CHAN_AUTO, g_szBALL_BOUNCE_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
			}
		}

		return;
	}
	
	static iEntType, iPrevOwner;
	iEntType = entity_get_int(ent, EV_INT_BALL_TYPE);
	iPrevOwner = entity_get_int(ent, EV_INT_BALL_PREV_OWNER);

	if(iEntType == TASK_DEATHBALL)
	{
		if(!(get_user_godmode(player)) && get_user_team(player) != TEAM_GUARDS)
		{
			ExecuteHamB(Ham_Killed, player, is_user_connected(iPrevOwner) ? iPrevOwner : player, GIB_NORMAL);
			return;
		}
	}
	
	static Float:vTemp[3];
	entity_set_int(ent, EV_INT_BALL_PREV_OWNER, player);
	
	if(g_delay_shoot[player] < gtime && get_user_button(player) & IN_USE)
	{
		entity_set_edict(ent, EV_ENT_owner, player);

		if(g_szBALL_KICK_SOUND[0] != EOS)
		{
			emit_sound(ent, CHAN_AUTO, g_szBALL_KICK_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
		}

		entity_get_vector(player, EV_VEC_v_angle, vTemp);
		angle_vector(vTemp, ANGLEVECTOR_FORWARD, fVector);
		fVector[2] *= -1.0;
		pev(ent, pev_velocity, vTemp);
		xs_vec_mul_scalar(fVector, get_pcvar_float(g_cvar_kick_force), fVector);
		xs_vec_add(fVector, vTemp, fVector);
		
		entity_set_vector(ent, EV_VEC_velocity, fVector);
		g_delay_shoot[player] = gtime + BALL_KICK_DELAY;
		
		if(g_pBallOwner[player] == ent)
		{
			g_pBallOwner[player] = 0;
		}

		switch( entity_get_int(ent, EV_INT_BALL_PHYISC_MODE) )
		{
			case PHYSIC_BALL_FOLLOW:
			{
				ball_dispatch(ent, entity_get_int(ent, EV_INT_CARRIER));
			}
		}

		entity_set_int(ent, EV_INT_CARRIER, 0);
		entity_set_edict(ent, EV_ENT_owner, 0);
		return;
	}
	
	switch( entity_get_int(ent, EV_INT_BALL_PHYISC_MODE) )
	{
		case PHYSIC_BALL_FOLLOW:
		{
			if(!entity_get_int(ent, EV_INT_CARRIER) && (g_delay_shoot[player] < gtime))
			{
				g_pBallOwner[player] = ent;
				entity_set_vector(ent, EV_VEC_avelocity, Float:{0.0,0.0,0.0});
				entity_set_int(ent, EV_INT_CARRIER, player);
				entity_set_edict(ent, EV_ENT_owner, player);
				entity_set_int(ent, EV_INT_solid, SOLID_TRIGGER);
				engfunc(EngFunc_SetSize, ent, Float:{ -15.0, -15.0, -11.170 }, Float:{ 15.0, 15.0, 11.170 });

				set_hudmessage(255, 0, 0, -1.0, 0.90, 0, 0.01, 1.0, 0.01, 0.01, -1);
				show_hudmessage(player, ">> You have the ball <<");
			}
		}
		case PHYSIC_BALL_REALITY:
		{
			if(entity_get_int(player, EV_INT_flags) & FL_ONGROUND && g_delay_shoot[player] < gtime)
			{
				static iButton, Float:fHolder[3], Float:fSpeed;
				iButton = get_user_button(player);
				entity_get_vector(player, EV_VEC_velocity, fVector);
				fSpeed = floatsqroot(floatpower(fVector[0],2.0) + floatpower(fVector[1],2.0));
				entity_get_vector(player, EV_VEC_v_angle, vTemp);
				vTemp[0] *= -1.0;

				if(iButton & IN_FORWARD)
				{
					angle_vector(vTemp, ANGLEVECTOR_FORWARD, fHolder);
					xs_vec_mul_scalar(fHolder, fSpeed, fHolder)
					xs_vec_add(fHolder, fVector, fVector);
				}
				if(iButton & IN_BACK)
				{
					angle_vector(vTemp, ANGLEVECTOR_FORWARD, fHolder);
					xs_vec_mul_scalar(fHolder, -fSpeed, fHolder)
					xs_vec_add(fHolder, fVector, fVector);
				}

				if(iButton & IN_MOVELEFT)
				{
					angle_vector(vTemp, ANGLEVECTOR_RIGHT, fHolder);
					xs_vec_mul_scalar(fHolder, -fSpeed, fHolder)
					xs_vec_add(fHolder, fVector, fVector);
				}
				if(iButton & IN_MOVERIGHT)
				{
					angle_vector(vTemp, ANGLEVECTOR_RIGHT, fHolder);
					xs_vec_mul_scalar(fHolder, fSpeed, fHolder)
					xs_vec_add(fHolder, fVector, fVector);
				}

				static Float:fLen;
				fLen = xs_vec_len(fVector);

				if(fLen != 0.0)
				{
					xs_vec_div_scalar(fVector, fLen, fVector);
					xs_vec_mul_scalar(fVector, 80.0, vTemp);
					xs_vec_mul_scalar(fVector, fSpeed, fVector);
					xs_vec_add(fVector, vTemp, fVector);
					entity_set_vector(ent, EV_VEC_velocity, fVector);
				}

				set_hudmessage(255, 0, 0, -1.0, 0.90, 0, 0.01, 0.011, 0.01, 0.01, 4);
				show_hudmessage(player, ">> You have the ball <<");
			}
			else
			{
				// interacting with a player
				if(entity_get_float(ent, EV_FL_fuser4) < gtime) {
					entity_set_float(ent, EV_FL_fuser4, gtime + 0.1);

					///entity_get_vector(ent, EV_VEC_velocity, fVector);
					//fVector[0] *= 0.90;
					//fVector[1] *= 0.90;
					//entity_set_vector(ent, EV_VEC_velocity, fVector);
				}
			}
		}
	}
}

public soccerfield_think(taskid)
{
	static iColor[3], Float:fMaxs[3], Float:fMins[3]; 
	
	if(g_iData[BlueGoalSet])
	{
		fMaxs[0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][0];
		fMaxs[1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][1];
		fMaxs[2] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][2];
		
		fMins[0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][3];
		fMins[1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][4];
		fMins[2] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][5];
		
		iColor={0,0,255};
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMaxs[2], fMins[0], fMaxs[1], fMaxs[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMaxs[2], fMaxs[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMaxs[2], fMaxs[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMins[2], fMaxs[0], fMins[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMins[2], fMins[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMins[2], fMins[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMins[0], fMaxs[1], fMaxs[2], fMins[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMaxs[1], fMins[2], fMaxs[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMins[2], fMaxs[0], fMins[1], fMins[2], iColor)
		fm_draw_line(0, fMaxs[0], fMins[1], fMins[2], fMaxs[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMaxs[0], fMins[1], fMaxs[2], fMins[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMaxs[2], fMins[0], fMaxs[1], fMaxs[2], iColor)
	}
	
	if(g_iData[RedGoalSet])
	{
		fMaxs[0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][0];
		fMaxs[1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][1];
		fMaxs[2] = any:g_iData[fOrigin_GoalSize][RED_TEAM][2];
		
		fMins[0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][3];
		fMins[1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][4];
		fMins[2] = any:g_iData[fOrigin_GoalSize][RED_TEAM][5];
		
		iColor={255,0,0};
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMaxs[2], fMins[0], fMaxs[1], fMaxs[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMaxs[2], fMaxs[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMaxs[2], fMaxs[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMins[2], fMaxs[0], fMins[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMins[2], fMins[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMins[2], fMins[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMins[0], fMaxs[1], fMaxs[2], fMins[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMaxs[1], fMins[2], fMaxs[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMins[2], fMaxs[0], fMins[1], fMins[2], iColor)
		fm_draw_line(0, fMaxs[0], fMins[1], fMins[2], fMaxs[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMaxs[0], fMins[1], fMaxs[2], fMins[0], fMins[1], fMaxs[2], iColor)
		fm_draw_line(0, fMins[0], fMins[1], fMaxs[2], fMins[0], fMaxs[1], fMaxs[2], iColor)
	}
	
	if(g_iData[FieldSet])
	{
		fMaxs[0] = any:g_iData[fOrigin_FieldLimits][MAXS][0];
		fMaxs[1] = any:g_iData[fOrigin_FieldLimits][MAXS][1];
		fMaxs[2] = any:g_iData[fOrigin_FieldLimits][MAXS][2];
		
		fMins[0] = any:g_iData[fOrigin_FieldLimits][MINS][0];
		fMins[1] = any:g_iData[fOrigin_FieldLimits][MINS][1];
		fMins[2] = any:g_iData[fOrigin_FieldLimits][MINS][2];
		
		iColor={255,255,255};
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMins[2], fMins[0], fMaxs[1], fMins[2], iColor)
		fm_draw_line(0, fMaxs[0], fMaxs[1], fMins[2], fMaxs[0], fMins[1], fMins[2], iColor)
		fm_draw_line(0, fMaxs[0], fMins[1], fMins[2], fMins[0], fMins[1], fMins[2], iColor)
		fm_draw_line(0, fMins[0], fMaxs[1], fMins[2], fMins[0], fMins[1], fMins[2], iColor)
	}
}

ball_dispatch(ent, carrier)
{
	g_pBallOwner[carrier] = 0;
	entity_set_int(ent, EV_INT_CARRIER, 0);
	entity_set_edict(ent, EV_ENT_owner, 0);

	entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
	entity_set_size(ent, Float:{ -15.0, -15.0, -11.170 }, Float:{ 15.0, 15.0, 11.170 });
}

public ball_think(ent)
{
	static Float:fOrigin[3], Float:fVector[3];
	entity_get_vector(ent, EV_VEC_origin, fOrigin);

	if ((pev(ent, pev_flags) & FL_FLOAT))
	{
		static iWaterLevel;
		iWaterLevel = pev(ent, pev_waterlevel);

		if(iWaterLevel > 1)
		{
			pev(ent, pev_velocity, fVector);
			fVector[0] = fVector[0] * 0.99;
			fVector[1] = fVector[1] * 0.99;
			fVector[2] += iWaterLevel * 10.0;
			set_pev(ent, pev_velocity, fVector);
		}
	}
	
	static iId;
	iId = entity_get_int(ent, EV_INT_CARRIER);

	if(is_user_connected(iId))
	{
		entity_get_vector(iId, EV_VEC_origin, fOrigin);
		entity_get_vector(iId, EV_VEC_v_angle, fVector);
		fVector[0] = fVector[2] = 0.0 // no pitch and roll.
		angle_vector(fVector, ANGLEVECTOR_FORWARD, fVector);
		xs_vec_mul_scalar(fVector, 40.0, fVector);
		fVector[2] = (fOrigin[2] - ((entity_get_int(iId, EV_INT_flags) & FL_DUCKING) ? 6.80 : 24.80));
		fVector[1] += fOrigin[1];
		fVector[0] += fOrigin[0];
		trace_line(iId, fOrigin, fVector, fOrigin);
		entity_set_origin(ent, fOrigin);
		
		static Float:gtime;
		gtime = get_gametime();
		
		if(g_delay_shoot[iId] < gtime && get_user_button(iId) & IN_USE)
		{
			if(g_szBALL_KICK_SOUND[0] != EOS)
			{
				emit_sound(ent, CHAN_AUTO, g_szBALL_KICK_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
			}

			entity_get_vector(iId, EV_VEC_v_angle, fVector);
			fVector[0] *= -1.0;
			angle_vector(fVector, ANGLEVECTOR_FORWARD, fVector);
			xs_vec_mul_scalar(fVector, get_pcvar_float(g_cvar_kick_force), fVector);
			
			entity_set_vector(ent, EV_VEC_velocity, fVector);
			g_delay_shoot[iId] = gtime + BALL_KICK_DELAY;
			
			ball_dispatch(ent, iId);
		}
	}
	else
	{
		entity_get_vector(ent, EV_VEC_velocity, fVector);

		if(xs_vec_len(fVector) >= 1.0)
		{
			entity_set_vector(ent, EV_VEC_avelocity, fVector);
		}
	}
	
	static iEntType, iPrevOwner;
	iEntType = entity_get_int(ent, EV_INT_BALL_TYPE);
	iPrevOwner = entity_get_int(ent, EV_INT_BALL_PREV_OWNER);

	if( iEntType == TASK_SOCCERBALL )
	{
		static Float:fMaxsX, Float:fMaxsY, Float:fMaxsZ, Float:fMinsX, Float:fMinsY, Float:fMinsZ;

		if( g_iData[BlueGoalSet] )
		{
			fMaxsX = BGoalSize[MAXS][0];
			fMaxsY = BGoalSize[MAXS][1];
			fMaxsZ = BGoalSize[MAXS][2];
			
			fMinsX = BGoalSize[MINS][0];
			fMinsY = BGoalSize[MINS][1];
			fMinsZ = BGoalSize[MINS][2];
			
			if(	fMinsX <= fOrigin[0] <= fMaxsX &&
				fMinsY <= fOrigin[1] <= fMaxsY &&
				fMinsZ <= fOrigin[2] <= fMaxsZ )
			{
				if(iPrevOwner != 0)
				{
					g_pBallOwner[iPrevOwner] = 0;

					static szName[32];
					if(g_szGOAL_SOUND[0] != EOS)
					{
						switch( contain(g_szGOAL_SOUND, ".mp3") )
						{
							case -1: emit_sound(iPrevOwner, CHAN_AUTO, g_szGOAL_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
							default: client_cmd(0, "mp3 play ^"%s^"", g_szGOAL_SOUND);
						}
					}

					get_user_name(iPrevOwner, szName, charsmax(szName));
					cprint_chat(0, _, "!g(Soccer)!y==!g> !tEnemies !ghas scored a goal on the !tAllies!y!");
					cprint_chat(0, _, "!g(Soccer)!y==!g> The goal was made by !t%s!y!", szName);
				}

				g_iScore[RED_TEAM] ++;
				entity_set_int(ent, EV_INT_flags, FL_KILLME);

				new szPhysicStatus[4];
				num_to_str(entity_get_int(ent, EV_INT_BALL_PHYISC_MODE), szPhysicStatus, charsmax(szPhysicStatus));
				set_task(3.0, "spawn_ball", TASK_SOCCERBALL + ent, szPhysicStatus, sizeof(szPhysicStatus));
				return;
			}
		}
		if( g_iData[RedGoalSet] )
		{
			fMaxsX = RGoalSize[MAXS][0];
			fMaxsY = RGoalSize[MAXS][1];
			fMaxsZ = RGoalSize[MAXS][2];
			
			fMinsX = RGoalSize[MINS][0];
			fMinsY = RGoalSize[MINS][1];
			fMinsZ = RGoalSize[MINS][2];
			
			if(	fMinsX <= fOrigin[0] <= fMaxsX &&
				fMinsY <= fOrigin[1] <= fMaxsY &&
				fMinsZ <= fOrigin[2] <= fMaxsZ )
			{
				if(iPrevOwner != 0)
				{
					g_pBallOwner[iPrevOwner] = 0;

					static szName[32];
					if(g_szGOAL_SOUND[0] != EOS)
					{
						switch( contain(g_szGOAL_SOUND, ".mp3") )
						{
							case -1: emit_sound(iPrevOwner, CHAN_AUTO, g_szGOAL_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
							default: client_cmd(0, "mp3 play ^"%s^"", g_szGOAL_SOUND);
						}
					}

					get_user_name(iPrevOwner, szName, charsmax(szName));
					cprint_chat(0, _, "!g(Soccer)!y==!g> !tAllies !ghas scored a goal on the !tEnemies!y!");
					cprint_chat(0, _, "!g(Soccer)!y==!g> The goal was made by !t%s!y!", szName);
				}

				g_iScore[BLUE_TEAM] ++;
				entity_set_int(ent, EV_INT_flags, FL_KILLME);

				new szPhysicStatus[4];
				num_to_str(entity_get_int(ent, EV_INT_BALL_PHYISC_MODE), szPhysicStatus, charsmax(szPhysicStatus));
				set_task(3.0, "spawn_ball", TASK_SOCCERBALL + ent, szPhysicStatus, sizeof(szPhysicStatus));
				return;
			}
		}
		if( g_iData[FieldSet] )
		{
			fMaxsX = FieldSize[MAXS][0];
			fMaxsY = FieldSize[MAXS][1];
			fMaxsZ = FieldSize[MAXS][2];
			
			fMinsX = FieldSize[MINS][0];
			fMinsY = FieldSize[MINS][1];
			fMinsZ = FieldSize[MINS][2];
			
			if(	!( fMinsX <= fOrigin[0] <= fMaxsX &&
				   fMinsY <= fOrigin[1] <= fMaxsY ) )
			{
				fm_draw_line(0, fOrigin[0], fOrigin[1], fOrigin[2], fOrigin[0], fOrigin[1], fMinsZ, {255,255,0})
				
				if(iPrevOwner != 0)
				{
					g_pBallOwner[iPrevOwner] = 0;

					if(g_szOUT_SOUND[0] != EOS)
					{
						switch( contain(g_szOUT_SOUND, ".mp3") )
						{
							case -1: emit_sound(iPrevOwner, CHAN_AUTO, g_szOUT_SOUND, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
							default: client_cmd(0, "mp3 play ^"%s^"", g_szOUT_SOUND);
						}
					}

					switch( get_player_team(iPrevOwner) )
					{
						case NO_TEAM:
						{
							new szName[32];
							get_user_name(iPrevOwner, szName, charsmax(szName))
							cprint_chat(0, _, "!g(Soccer)!y==!g> The Ball is !tOUT !ginterruption !ymade by !g%s!y!", szName);
						}
						case BLUE_TEAM:
						{
							cprint_chat(0, _, "!g(Soccer)!y==!g> The Ball is !tOUT !gEnemies Team !tFault!y!");
						}
						case RED_TEAM:
						{
							cprint_chat(0, _, "!g(Soccer)!y==!g> The Ball is !tOUT !gAllies Team !tFault!y!");
						}
					}
				}
				
				entity_set_int(ent, EV_INT_flags, FL_KILLME);

				new szPhysicStatus[4];
				num_to_str(entity_get_int(ent, EV_INT_BALL_PHYISC_MODE), szPhysicStatus, charsmax(szPhysicStatus));
				set_task(3.0, "spawn_ball", TASK_SOCCERBALL, szPhysicStatus, sizeof(szPhysicStatus));
			}
		}
	}
	
	entity_set_float(ent, EV_FL_nextthink, (get_gametime() + 0.01));
}

public spawn_ball(const szBallPHYSICS[], const iType)
{
	if(is_user_connected(iType))
	{
		if(!is_user_admin(iType)) return PLUGIN_HANDLED;
	}
	
	new ent = create_ball();
	
	if(ent == -1) return 0;
	
	new Float:fOrigin[3];
	xs_vec_copy(g_iData[fOrigin_BallSpawn], fOrigin);
	fOrigin[2] += 12.0;
	entity_set_origin(ent, fOrigin);

	set_pev(ent, pev_flags, FL_FLOAT);
	
	switch( any:str_to_num(szBallPHYSICS) )
	{
		case PHYSIC_BALL_FOLLOW:
		{
			entity_set_int(ent, EV_INT_BALL_PHYISC_MODE, PHYSIC_BALL_FOLLOW);
		}
		case PHYSIC_BALL_REALITY:
		{
			entity_set_int(ent, EV_INT_BALL_PHYISC_MODE, PHYSIC_BALL_REALITY);
			entity_set_int(ent, EV_INT_solid, SOLID_TRIGGER);
			engfunc(EngFunc_SetSize, ent, Float:{ -15.0, -15.0, -11.170 }, Float:{ 15.0, 15.0, 11.170 });
		}
	}
	
	if(iType == TASK_DEATHBALL)
	{
		entity_set_int(ent, EV_INT_solid, SOLID_BBOX);
		entity_set_int(ent, EV_INT_BALL_TYPE, TASK_DEATHBALL);
		set_rendering(ent, kRenderFxGlowShell, 200, 0, 0, kRenderNormal, 80);
		new Commander = jb_get_commander();
		if(Commander > 0) {
			entity_get_vector(Commander, EV_VEC_origin, fOrigin);
			fOrigin[2] += 50.0;
			entity_set_origin(ent, fOrigin);
		}
	}

	entity_set_vector(ent, EV_VEC_velocity, Float:{0.0,0.0,0.0});
	entity_set_vector(ent, EV_VEC_avelocity, Float:{0.0,0.0,0.0});
	entity_set_float(ent, EV_FL_nextthink, (get_gametime() + 0.1))
	
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, fOrigin, 0);
	write_byte(TE_BEAMCYLINDER);
	engfunc(EngFunc_WriteCoord, fOrigin[0]);
	engfunc(EngFunc_WriteCoord, fOrigin[1]);
	engfunc(EngFunc_WriteCoord, (fOrigin[2] + 20));
	engfunc(EngFunc_WriteCoord, (fOrigin[0] + 50));
	engfunc(EngFunc_WriteCoord, (fOrigin[1] + 50));
	engfunc(EngFunc_WriteCoord, (fOrigin[2] + 50));
	write_short(g_iTrailSprite) ;
	write_byte(0) ;
	write_byte(10) ;
	write_byte(15) ; // life
	write_byte(30) ; // width
	write_byte(5) ; // noise
	write_byte(0); // r
	write_byte(200); // g
	write_byte(0); // b
	write_byte(200); // alpha
	write_byte(5); // speed scroll
	message_end();
	
	return ent;
}

public jb_minigame_ended(const Minigame_Index, const MINIGAMES_MODES:Minigame_Mode, const Winner, players_bits)
{
	if(Minigame_Index == MINIGAME_ID)
	{
		DisableHamForward(TraceAttackPre);
		DisableHamForward(TakeDamagePre);
		
		switch( Minigame_Mode )
		{
			case MODE_TEAM_VS_TEAM:
			{
				cprint_chat(0, _, "!g(Soccer)!y==!g> !yThe match has ended, BLUE !g%d !yto !g%d !yRED.", g_iScore[BLUE_TEAM], g_iScore[RED_TEAM]);
				g_iScore[BLUE_TEAM] = g_iScore[RED_TEAM] = 0;
			}
		}
		
		for(new i; i < sizeof g_pteam; i++)
		{
			set_player_team(i,NO_TEAM)
		}
		
		RemoveSoccerBalls();
	}
}

RemoveSoccerBalls()
{
	new ent;
	while( (ent = find_ent_by_class(ent, g_ball_classname)) > 0 )
	{
		g_pBallOwner[ entity_get_int(ent, EV_INT_BALL_PREV_OWNER) ] = 0;
		entity_set_int(ent, EV_INT_flags, FL_KILLME);
		call_think(ent);
	}
}

public jb_round_start()
{
	RemoveSoccerBalls();
}

public jb_day_started()
{
	RemoveSoccerBalls();
}

public jb_soccer_begin( minigame_index, minigame_mode, minigame_players[33], teams[MAX_MINIGAMES_TEAMS], maxteams, players_num, bits_players )
{
	EnableHamForward(TraceAttackPre);
	EnableHamForward(TakeDamagePre);
	
	new g_iTeam[32], iNum;
	
	switch( minigame_mode )
	{
		case MODE_TEAM_VS_TEAM:
		{
			new szPhysicStatus[4];
			num_to_str(g_ball_physic_status[jb_get_commander()], szPhysicStatus, charsmax(szPhysicStatus));
			spawn_ball(szPhysicStatus, TASK_SOCCERBALL);
			cprint_chat(0, _, "!g~MINIGAMES~ !tSoccer Match !yBLUE Vs RED !g!")
			
			static bool:custom_skin_blue;
			custom_skin_blue = !strlen(g_szBLUE_TEAM) ? false:true;
			static bool:custom_skin_red;
			custom_skin_red = !strlen(g_szRED_TEAM) ? false:true;
			
			jb_minigame_get_team_players("Soccer/Death Ball", 1, g_iTeam, iNum);
			
			for(new i = 0, p; i < iNum; i++)
			{
				p = g_iTeam[i];
				set_player_team(p,BLUE_TEAM);
				
				if(custom_skin_blue)
				{
					cs_set_player_model(p, g_szBLUE_TEAM);
					set_pev(p, pev_body, g_iBLUE_TEAM_MDL_BODY);
				}
			}
			
			jb_minigame_get_team_players("Soccer/Death Ball", 2, g_iTeam, iNum);
			
			for(new i = 0, p; i < iNum; i++)
			{
				p = g_iTeam[i];
				set_player_team(p,RED_TEAM);
				
				if(custom_skin_red)
				{
					cs_set_player_model(p, g_szRED_TEAM);
					set_pev(p, pev_body, g_iRED_TEAM_MDL_BODY);
				}
			}
		}
		case MODE_FREE_FOR_ALL:
		{
			new szPhysicStatus[4];
			num_to_str(g_ball_physic_status[jb_get_commander()], szPhysicStatus, charsmax(szPhysicStatus));
			spawn_ball(szPhysicStatus, TASK_DEATHBALL);
			cprint_chat(0, _, "!g~MINIGAMES~ !tDeathBall !yhas been !greleased!t!");
			
			get_players(g_iTeam, iNum, "ahe", "TERRORIST");
			
			for(new i = 0, p; i < iNum; i++)
			{
				if(!check_flag(bits_players,p)) continue;
				set_player_team(p,RED_TEAM)
			}
		}
	}
}

public soccer_setting_menu(id, level)
{	
	new szText[256], menu = menu_create("Soccer Settings", "mhandler_xC");
	
	formatex(szText, charsmax(szText), "Add Spawn Ball^nCoord: %.2f %.2f %.2f^n",
	g_iData[fOrigin_BallSpawn][0], g_iData[fOrigin_BallSpawn][1], g_iData[fOrigin_BallSpawn][2]);
	menu_additem(menu, szText, "", level);
	
	formatex(szText, charsmax(szText), "Set Field Right Corner (%.2f %.2f)", 
	g_iData[fOrigin_FieldLimits][MAXS][0], g_iData[fOrigin_FieldLimits][MAXS][1]);
	menu_additem(menu, szText, "", level);
	formatex(szText, charsmax(szText), "Set Field Opposite Left Corner (%.2f %.2f)^n", 
	g_iData[fOrigin_FieldLimits][MINS][0], g_iData[fOrigin_FieldLimits][MINS][1]);
	menu_additem(menu, szText, "", level);
	
	
	menu_additem(menu, "Set Blue-Goal upper right Corner", "", level);
	formatex(szText, charsmax(szText), "Set Blue-Goal bottom left Corner^n\
	upper right Corner: %.2f %.2f %.2f^n\
	bottom left Corner: %.2f %.2f %.2f^n", g_iData[fOrigin_GoalSize][BLUE_TEAM][0],
	g_iData[fOrigin_GoalSize][BLUE_TEAM][1], g_iData[fOrigin_GoalSize][BLUE_TEAM][2],
	g_iData[fOrigin_GoalSize][BLUE_TEAM][3], g_iData[fOrigin_GoalSize][BLUE_TEAM][4],
	g_iData[fOrigin_GoalSize][BLUE_TEAM][5]);
	menu_additem(menu, szText, "", level);
	
	
	menu_additem(menu, "Set Red-Goal upper right Corner", "", level);
	formatex(szText, charsmax(szText), "Set Red-Goal bottom left Corner^n\
	upper right Corner: %.2f %.2f %.2f^n\
	bottom left Corner: %.2f %.2f %.2f^n", g_iData[fOrigin_GoalSize][RED_TEAM][0],
	g_iData[fOrigin_GoalSize][RED_TEAM][1], g_iData[fOrigin_GoalSize][RED_TEAM][2],
	g_iData[fOrigin_GoalSize][RED_TEAM][3], g_iData[fOrigin_GoalSize][RED_TEAM][4],
	g_iData[fOrigin_GoalSize][RED_TEAM][5]);
	menu_additem(menu, szText, "", level);
	
	if(!menu_display(id, menu)) menu_destroy(menu);
	return 1;
}

public mhandler_xC(id, menu, item)
{
	switch( item )
	{
		case MENU_EXIT, MENU_TIMEOUT:
		{
			menu_destroy(menu);
			return PLUGIN_HANDLED;
		}
		case MENU_BACK, MENU_MORE:
		{
			return PLUGIN_HANDLED;
		}
		default:
		{
			menu_destroy(menu);
			
			new Float:fStart[3], Float:fEnd[3], Float:vTemp[3];
			entity_get_vector(id, EV_VEC_origin, fStart);
			entity_get_vector(id, EV_VEC_view_ofs, vTemp);
			xs_vec_add(fStart, vTemp, fStart);
			
			entity_get_vector(id, EV_VEC_v_angle, vTemp);
			angle_vector(vTemp, ANGLEVECTOR_FORWARD, fEnd);
			xs_vec_mul_scalar(fEnd, 4000.0, fEnd);
			xs_vec_add(fEnd, fStart, fEnd);
			
			trace_line(id, fStart, fEnd, fEnd);
			
			switch( item )
			{
				case 0:
				{
					g_iData[fOrigin_BallSpawn][0] = fEnd[0];
					g_iData[fOrigin_BallSpawn][1] = fEnd[1];
					g_iData[fOrigin_BallSpawn][2] = fEnd[2] + 1.0;
					cprint_chat(id, _, "!gSoccer ~ !yBall Spawn has been Successfuly set!");
				}
				case 1:
				{
					g_iData[fOrigin_FieldLimits][MAXS][0] = fEnd[0];
					g_iData[fOrigin_FieldLimits][MAXS][1] = fEnd[1];
					g_iData[fOrigin_FieldLimits][MAXS][2] = fEnd[2];
					
					cprint_chat(id, _, "!gSoccer ~ !yField Right Corner has been Successfuly set!");
					
					if(g_iData[FieldSet])
					{
						g_iData[FieldSet] = false;
						xs_vec_set(FieldSize[MINS], 0.0, 0.0, 0.0);
						g_iData[fOrigin_FieldLimits][MINS][0] = 0.0;
						g_iData[fOrigin_FieldLimits][MINS][1] = 0.0;
						g_iData[fOrigin_FieldLimits][MINS][2] = 0.0;
						settings_updated();
					}
				}
				case 2:
				{
					g_iData[fOrigin_FieldLimits][MINS][0] = fEnd[0];
					g_iData[fOrigin_FieldLimits][MINS][1] = fEnd[1];
					g_iData[fOrigin_FieldLimits][MINS][2] = fEnd[2];
					cprint_chat(id, _, "!gSoccer ~ !yField Opposite Left Corner has been Successfuly set!");
					
					if(g_iData[FieldSet])
					{
						g_iData[FieldSet] = false;
						xs_vec_set(FieldSize[MAXS], 0.0, 0.0, 0.0);
						g_iData[fOrigin_FieldLimits][MAXS][0] = 0.0;
						g_iData[fOrigin_FieldLimits][MAXS][1] = 0.0;
						g_iData[fOrigin_FieldLimits][MAXS][2] = 0.0;
						settings_updated();
					}
				}
				case 3:
				{
					g_iData[fOrigin_GoalSize][BLUE_TEAM][0] = fEnd[0];
					g_iData[fOrigin_GoalSize][BLUE_TEAM][1] = fEnd[1];
					g_iData[fOrigin_GoalSize][BLUE_TEAM][2] = fEnd[2];
					cprint_chat(id, _, "!gSoccer ~ !yBlue-Goal upper right Corner has been Successfuly set!");
					
					if(g_iData[BlueGoalSet])
					{
						g_iData[BlueGoalSet] = false;
						xs_vec_set(BGoalSize[MINS], 0.0, 0.0, 0.0);
						g_iData[fOrigin_GoalSize][BLUE_TEAM][3] = 0.0;
						g_iData[fOrigin_GoalSize][BLUE_TEAM][4] = 0.0;
						g_iData[fOrigin_GoalSize][BLUE_TEAM][5] = 0.0;
						settings_updated();
					}
				}
				case 4:
				{
					g_iData[fOrigin_GoalSize][BLUE_TEAM][3] = fEnd[0];
					g_iData[fOrigin_GoalSize][BLUE_TEAM][4] = fEnd[1];
					g_iData[fOrigin_GoalSize][BLUE_TEAM][5] = fEnd[2];
					cprint_chat(id, _, "!gSoccer ~ !yBlue-Goal bottom left Corner has been Successfuly set!");
					
					if(g_iData[BlueGoalSet])
					{
						g_iData[BlueGoalSet] = false;
						xs_vec_set(BGoalSize[MAXS], 0.0, 0.0, 0.0);
						g_iData[fOrigin_GoalSize][BLUE_TEAM][0] = 0.0;
						g_iData[fOrigin_GoalSize][BLUE_TEAM][1] = 0.0;
						g_iData[fOrigin_GoalSize][BLUE_TEAM][2] = 0.0;
						settings_updated();
					}
				}
				case 5:
				{
					g_iData[fOrigin_GoalSize][RED_TEAM][0] = fEnd[0];
					g_iData[fOrigin_GoalSize][RED_TEAM][1] = fEnd[1];
					g_iData[fOrigin_GoalSize][RED_TEAM][2] = fEnd[2];
					cprint_chat(id, _, "!gSoccer ~ !yRed-Goal upper right Corner has been Successfuly set!");
					
					if(g_iData[RedGoalSet])
					{
						g_iData[RedGoalSet] = false;
						xs_vec_set(RGoalSize[MINS], 0.0, 0.0, 0.0);
						g_iData[fOrigin_GoalSize][RED_TEAM][3] = 0.0;
						g_iData[fOrigin_GoalSize][RED_TEAM][4] = 0.0;
						g_iData[fOrigin_GoalSize][RED_TEAM][5] = 0.0;
						settings_updated();
					}
				}
				case 6:
				{
					g_iData[fOrigin_GoalSize][RED_TEAM][3] = fEnd[0];
					g_iData[fOrigin_GoalSize][RED_TEAM][4] = fEnd[1];
					g_iData[fOrigin_GoalSize][RED_TEAM][5] = fEnd[2];
					cprint_chat(id, _, "!gSoccer ~ !yRed-Goal bottom left Corner has been Successfuly set!");
					
					if(g_iData[RedGoalSet])
					{
						g_iData[RedGoalSet] = false;
						xs_vec_set(RGoalSize[MAXS], 0.0, 0.0, 0.0);
						g_iData[fOrigin_GoalSize][RED_TEAM][0] = 0.0;
						g_iData[fOrigin_GoalSize][RED_TEAM][1] = 0.0;
						g_iData[fOrigin_GoalSize][RED_TEAM][2] = 0.0;
						settings_updated();
					}
				}
			}
			
			new Float:fTemp[2];
			
			switch( item )
			{
				case 0:
				{
					g_iData[BallSpawnSet] = true;
					cprint_chat(id, _, "The Ball-Spawn has been set!");
					settings_updated();
				}
				case 1,2:
				{
					fTemp[0] =  FieldSize[MAXS][0] = any:g_iData[fOrigin_FieldLimits][MAXS][0];
					fTemp[1] =  FieldSize[MINS][0] = any:g_iData[fOrigin_FieldLimits][MINS][0];
					if(fTemp[0] != 0.0 && fTemp[1] != 0.0 && !g_iData[FieldSet])
					{
						g_iData[FieldSet] = true;
						
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_FieldLimits][MINS][0] = FieldSize[MINS][0] = fTemp[0];
							g_iData[fOrigin_FieldLimits][MAXS][0] = FieldSize[MAXS][0] = fTemp[1];
						}
						
						fTemp[0] = FieldSize[MAXS][1] = any:g_iData[fOrigin_FieldLimits][MAXS][1];
						fTemp[1] = FieldSize[MINS][1] = any:g_iData[fOrigin_FieldLimits][MINS][1];
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_FieldLimits][MINS][1] = FieldSize[MINS][1] = fTemp[0];
							g_iData[fOrigin_FieldLimits][MAXS][1] = FieldSize[MAXS][1] = fTemp[1];
						}
						
						fTemp[0] = FieldSize[MAXS][2] = any:g_iData[fOrigin_FieldLimits][MAXS][2];
						fTemp[1] = FieldSize[MINS][2] = any:g_iData[fOrigin_FieldLimits][MINS][2];
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_FieldLimits][MINS][2] = FieldSize[MINS][2] = fTemp[0];
							g_iData[fOrigin_FieldLimits][MAXS][2] = FieldSize[MAXS][2] = fTemp[1];
						}

						cprint_chat(id, _, "The Field has been set!")
						
						settings_updated();
					}
				}
				case 3,4:
				{
					fTemp[0] = BGoalSize[MAXS][0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][0];
					fTemp[1] = BGoalSize[MINS][0] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][3];
					if(fTemp[0] != 0.0 && fTemp[1] != 0.0 && !g_iData[BlueGoalSet])
					{
						g_iData[BlueGoalSet] = true;
						
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_GoalSize][BLUE_TEAM][3] = BGoalSize[MINS][0] = fTemp[0];
							g_iData[fOrigin_GoalSize][BLUE_TEAM][0] = BGoalSize[MAXS][0] = fTemp[1];
						}
						
						fTemp[0] = BGoalSize[MAXS][1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][1];
						fTemp[1] = BGoalSize[MINS][1] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][4];
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_GoalSize][BLUE_TEAM][4] = BGoalSize[MINS][1] = fTemp[0];
							g_iData[fOrigin_GoalSize][BLUE_TEAM][1] = BGoalSize[MAXS][1] = fTemp[1];
						}
						
						fTemp[0] = BGoalSize[MAXS][2] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][2];
						fTemp[1] = BGoalSize[MINS][2] = any:g_iData[fOrigin_GoalSize][BLUE_TEAM][5];
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_GoalSize][BLUE_TEAM][5] = BGoalSize[MINS][2] = fTemp[0];
							g_iData[fOrigin_GoalSize][BLUE_TEAM][2] = BGoalSize[MAXS][2] = fTemp[1];
						}
						
						cprint_chat(id, _, "Blue Goal was successfully set!");
						
						settings_updated();
					}
				}
				case 5,6:
				{
					fTemp[0] = RGoalSize[MAXS][0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][0];
					fTemp[1] = RGoalSize[MINS][0] = any:g_iData[fOrigin_GoalSize][RED_TEAM][3];
					if(fTemp[0] != 0.0 && fTemp[1] != 0.0 && !g_iData[RedGoalSet])
					{
						g_iData[RedGoalSet] = true;
						
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_GoalSize][RED_TEAM][3] = RGoalSize[MINS][0] = fTemp[0];
							g_iData[fOrigin_GoalSize][RED_TEAM][0] = RGoalSize[MAXS][0] = fTemp[1];
						}
						
						fTemp[0] = RGoalSize[MAXS][1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][1];
						fTemp[1] = RGoalSize[MINS][1] = any:g_iData[fOrigin_GoalSize][RED_TEAM][4];
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_GoalSize][RED_TEAM][4] = RGoalSize[MINS][1] = fTemp[0];
							g_iData[fOrigin_GoalSize][RED_TEAM][1] = RGoalSize[MAXS][1] = fTemp[1];
						}
						
						fTemp[0] = RGoalSize[MAXS][2] = any:g_iData[fOrigin_GoalSize][RED_TEAM][2];
						fTemp[1] = RGoalSize[MINS][2] = any:g_iData[fOrigin_GoalSize][RED_TEAM][5];
						if(fTemp[0] < fTemp[1])
						{
							g_iData[fOrigin_GoalSize][RED_TEAM][5] = RGoalSize[MINS][2] = fTemp[0];
							g_iData[fOrigin_GoalSize][RED_TEAM][2] = RGoalSize[MAXS][2] = fTemp[1];
						}
						
						cprint_chat(id, _, "Red Goal was successfully set!");
						
						settings_updated();
					}
				}
			}
		}

	}
	
	soccer_setting_menu(id, 0);
	return PLUGIN_HANDLED;
}

public plugin_end()
{
	if(g_vault != INVALID_HANDLE) nvault_close(g_vault);
}

settings_updated()
{
	if ( g_vault == INVALID_HANDLE ) return;

	new szString[256];
	
	if(g_iData[BallSpawnSet] == true)
		formatex(szString, charsmax(szString), "^"%.1f %.1f %.1f^"", g_iData[fOrigin_BallSpawn][0], g_iData[fOrigin_BallSpawn][1], g_iData[fOrigin_BallSpawn][2])
	else formatex(szString, charsmax(szString), "^"^"")
	
	if(g_iData[FieldSet] == true)
		format(szString, charsmax(szString), "%s ^"%.1f %.1f %.1f^" ^"%.1f %.1f %.1f^"", szString,
		g_iData[fOrigin_FieldLimits][MAXS][0], g_iData[fOrigin_FieldLimits][MAXS][1], g_iData[fOrigin_FieldLimits][MAXS][2],
		g_iData[fOrigin_FieldLimits][MINS][0], g_iData[fOrigin_FieldLimits][MINS][1], g_iData[fOrigin_FieldLimits][MINS][2])
	else format(szString, charsmax(szString), "%s ^"^" ^"^"", szString)
	
	if(g_iData[RedGoalSet] == true)
		format(szString, charsmax(szString), "%s ^"%.1f %.1f %.1f^" ^"%.1f %.1f %.1f^"", szString,
		g_iData[fOrigin_GoalSize][RED_TEAM][0], g_iData[fOrigin_GoalSize][RED_TEAM][1], g_iData[fOrigin_GoalSize][RED_TEAM][2],
		g_iData[fOrigin_GoalSize][RED_TEAM][3], g_iData[fOrigin_GoalSize][RED_TEAM][4], g_iData[fOrigin_GoalSize][RED_TEAM][5])
	else format(szString, charsmax(szString), "%s ^"^" ^"^"", szString)
	
	if(g_iData[BlueGoalSet] == true)
		format(szString, charsmax(szString), "%s ^"%.1f %.1f %.1f^" ^"%.1f %.1f %.1f^"", szString,
		g_iData[fOrigin_GoalSize][BLUE_TEAM][0], g_iData[fOrigin_GoalSize][BLUE_TEAM][1], g_iData[fOrigin_GoalSize][BLUE_TEAM][2],
		g_iData[fOrigin_GoalSize][BLUE_TEAM][3], g_iData[fOrigin_GoalSize][BLUE_TEAM][4], g_iData[fOrigin_GoalSize][BLUE_TEAM][5])
	else format(szString, charsmax(szString), "%s ^"^" ^"^"", szString)
	
	nvault_set(g_vault, MAP_NAME, szString);
}

public fw_takedamage_player_pre(victim, inflictor, attacker, Float:damage, dmgbits)
{
	if(!(32 >= attacker >= 1) || victim == attacker) return HAM_IGNORED;
	
	if(jb_is_user_inminigame(victim) != MINIGAME_ID ||
		jb_is_user_inminigame(attacker) != MINIGAME_ID)
			return HAM_IGNORED;
	
	entity_set_vector(victim, EV_VEC_punchangle, Float:{0.0,0.0,0.0});
	SetHamParamFloat(4, 0.0);
	SetHamParamInteger(5, 0);
	return HAM_SUPERCEDE;
}

public fw_traceattack_player_pre(victim, attacker, Float:damage, Float:direction[3], traceresults, dmgbits)
{
	if(!(32 >= attacker >= 1) || victim == attacker) return HAM_IGNORED;
	
	if(jb_is_user_inminigame(victim) != MINIGAME_ID ||
		jb_is_user_inminigame(attacker) != MINIGAME_ID)
			return HAM_IGNORED;
	
	SetHamParamFloat(3, 0.0);
	return HAM_SUPERCEDE;
}

stock fm_draw_line(id, Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, g_iColor[3], iLife=1)
{
	static Float:fOrigin[3];
	fOrigin[0] = (x1 + x2) * 0.5;
	fOrigin[1] = (y1 + y2) * 0.5;
	fOrigin[2] = (z1 + z2) * 0.5;

	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, fOrigin, id ? id : 0);
	
	write_byte(TE_BEAMPOINTS);
	
	write_coord(floatround(x1));
	write_coord(floatround(y1));
	write_coord(floatround(z1));
	
	write_coord(floatround(x2));
	write_coord(floatround(y2));
	write_coord(floatround(z2));
	
	write_short(g_iTrailSprite);
	write_byte(1); // frame
	write_byte(10); // framestart
	write_byte(min(iLife * 10, 0xFF)); // life
	write_byte(100);
	write_byte(0);
	
	write_byte(g_iColor[0]);
	write_byte(g_iColor[1]);
	write_byte(g_iColor[2]);
	
	write_byte(200);
	write_byte(0);
	
	message_end();
}

/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil\\ fcharset0 Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
