/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <engine>
#include <fun>
#include <jailbreak_core>
#include <hamsandwich>
#include <cstrike>

#define PLUGIN "[JB] LR:Shot4Shot"
#define AUTHOR "Natsheh"

const WEAPONS_WITH_SCOPES = 6;
const WPNS_SCOPE_BITSUM = (1<<CSW_SCOUT) | (1<<CSW_AUG) | (1<<CSW_SG550) | (1<<CSW_AWP) | (1<<CSW_G3SG1) | (1<<CSW_SG552);
const NULL_WEAPONS = (1<<CSW_HEGRENADE) | (1<<CSW_C4) | (1<<CSW_SMOKEGRENADE) | (1<<CSW_FLASHBANG) | (1<<CSW_KNIFE);

new const iWeaponsid[] = {
	CSW_P228,
	CSW_SCOUT,
	CSW_XM1014,
	CSW_MAC10,
	CSW_AUG,
	CSW_ELITE,
	CSW_FIVESEVEN,
	CSW_UMP45,
	CSW_SG550,
	CSW_GALIL,
	CSW_FAMAS,
	CSW_USP,
	CSW_GLOCK18,
	CSW_AWP,
	CSW_MP5NAVY,
	CSW_M249,
	CSW_M3,
	CSW_M4A1,
	CSW_TMP,
	CSW_G3SG1,
	CSW_DEAGLE,
	CSW_SG552,
	CSW_AK47,
	CSW_P90
}

new const sWeapons_name[][] = {
	"P228",
	"Scout",
	"XM1014",
	"Mac10",
	"AUG",
	"Elite",
	"Five~Seven",
	"UMP45",
	"SG550",
	"Galil",
	"FAMAS",
	"USP",
	"Glock18",
	"AWP [Magnum]",
	"Mp5-Navy",
	"M249",
	"M3",
	"M4A1",
	"TMP",
	"G3SG1",
	"Desert Deagle",
	"SG552",
	"Ak47",
	"P90"
}

new HamHook:Ham_PrimaryAttack[sizeof sWeapons_name];
new HamHook:Ham_SecondaryAttack[ WEAPONS_WITH_SCOPES ];

#define		 TASK_AUTOSHOT		456781

new g_user_weapon, bool:g_user_scope, g_iDuel_id, g_iTurn;
new g_itime, g_cvar_autoshot_length;

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_iDuel_id = register_jailbreak_lritem("Shot~4~Shot");
	
	g_cvar_autoshot_length = register_cvar("jb_lr_s4s_autoshot_len", "10");
	
	new sWpnid[32], iWpnid;
	for(new i, j; i < sizeof sWeapons_name; i++)
	{
		iWpnid = iWeaponsid[i];
		get_weaponname(iWpnid, sWpnid, charsmax(sWpnid));
		
		DisableHamForward( (Ham_PrimaryAttack[i] = RegisterHam(Ham_Weapon_PrimaryAttack, sWpnid, "fw_weapon_primaryattack_pre", false)) );
		
		if((1<<iWpnid) & WPNS_SCOPE_BITSUM)
		{
			DisableHamForward( (Ham_SecondaryAttack[j++] = RegisterHam(Ham_Weapon_SecondaryAttack, sWpnid, "fw_weapon_secondaryattack_pre", false)) );
		}
	}
	
	register_clcmd("drop", "clcmd_drop");
}

public clcmd_drop(id)
{
	new guard, prisoner;
	if(jb_get_current_duel(guard, prisoner) != g_iDuel_id)
		return PLUGIN_CONTINUE;
	
	if(guard == id || prisoner == id)
	{
		return PLUGIN_HANDLED;
	}
	
	return PLUGIN_CONTINUE;
}

public fw_weapon_primaryattack_pre( const Entity )
{
	static guard, prisoner;
	
	if(jb_get_current_duel(guard, prisoner) != g_iDuel_id)
		return HAM_IGNORED
	
	new id = entity_get_edict(Entity, EV_ENT_owner);

	new sWpname[32];
	get_weaponname(iWeaponsid[g_user_weapon], sWpname, charsmax(sWpname));
	
	if(id == guard)
	{
		if(g_iTurn != id)
		{
			give_user_weapon(id, sWpname);
			return HAM_SUPERCEDE;
		}

		g_iTurn = prisoner;
		g_itime = get_pcvar_num(g_cvar_autoshot_length);
		new param[2]; param[0] = give_user_weapon(prisoner, sWpname, 1, 0);
		remove_task(TASK_AUTOSHOT + prisoner);
		set_task(1.0, "auto_shot", TASK_AUTOSHOT + prisoner, param, sizeof param, "b");
	}
	else if(id == prisoner)
	{
		if(g_iTurn != id)
		{
			give_user_weapon(id, sWpname);
			return HAM_SUPERCEDE;
		}

		g_iTurn = guard;
		g_itime = get_pcvar_num(g_cvar_autoshot_length);
		new param[2]; param[0] = give_user_weapon(guard, sWpname, 1, 0);
		remove_task(TASK_AUTOSHOT + guard);
		set_task(1.0, "auto_shot", TASK_AUTOSHOT + guard, param, sizeof param, "b");
	}
	
	return HAM_IGNORED;
}

public fw_weapon_secondaryattack_pre( const Entity )
{
	static guard, prisoner;
	
	if(jb_get_current_duel(guard, prisoner) != g_iDuel_id)
		return HAM_IGNORED;

	new id = entity_get_edict(Entity, EV_ENT_owner);
	
	if((id == guard || id == prisoner) && !g_user_scope)
	{
		return HAM_SUPERCEDE;
	}
	
	return HAM_IGNORED;
}

public Show_menu(id)
{
	new sText[32], iWpnid;
	new iMenu = menu_create("[ Jailbreak ] Choose your^nduel weapon...", "menu_handle");
	
	iWpnid = iWeaponsid[g_user_weapon];
	
	if(!((1<<iWpnid) & NULL_WEAPONS))
	{
		menu_additem(iMenu, "\rStart the duel...", "START");
	}
	
	if((1<<iWpnid) & WPNS_SCOPE_BITSUM)
	{
		formatex(sText, charsmax(sText), "\rSCOPE: \y%s", g_user_scope ? "Yes":"No");
		menu_additem(iMenu, sText, "SCOPE");
	}
	
	new iWpn, sInfo[4];
	
	for( new i = 0; i < sizeof sWeapons_name; i++ )
	{
		iWpn = iWeaponsid[i];
		
		if(!iWpn || (1<<iWpn) & NULL_WEAPONS)
		{
			continue;
		}
		
		num_to_str(i, sInfo, charsmax(sInfo));
		formatex(sText, charsmax(sText), "%s%s", iWpn == iWpnid ? "\d":"\w", sWeapons_name[i]);
		menu_additem(iMenu, sText, sInfo);
	}
	
	menu_display(id, iMenu);
}

public menu_handle(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		menu_destroy(menu);
		return PLUGIN_HANDLED;
	}
	
	new sData[10], iAccess, sName[32], iCallbk;
	menu_item_getinfo(menu, item, iAccess, sData, charsmax(sData), sName, charsmax(sName), iCallbk);
	menu_destroy(menu);

	if(equal(sData, "START"))
	{
		jb_lr_show_targetsmenu(id, g_iDuel_id);
		return PLUGIN_HANDLED;
	}
	else if(equal(sData, "SCOPE"))
	{
		g_user_scope = g_user_scope ? false:true;
	}
	else
	{
		g_user_weapon = str_to_num(sData);
	}
	
	Show_menu(id);
	return PLUGIN_HANDLED;
}

public jb_lr_duel_selected(id, itemid)
{
	if(itemid == g_iDuel_id)
	{
		g_user_weapon = 0
		g_user_scope = true;
		Show_menu(id);
		return JB_LR_OTHER_MENU;
	}
	
	return JB_IGNORED;
}

public jb_lr_duel_started(prisoner, guard, duelid)
{
	if(duelid == g_iDuel_id)
	{
		new sWpn[32], iWpn;
		iWpn = iWeaponsid[g_user_weapon];
		get_weaponname(iWpn, sWpn, charsmax(sWpn));
		
		EnableHamForward(Ham_PrimaryAttack[g_user_weapon]);
		
		if((1<<iWpn) & WPNS_SCOPE_BITSUM)
		{
			switch( iWpn ) 
			{
				case CSW_SCOUT: EnableHamForward(Ham_SecondaryAttack[0]);
				case CSW_AUG: EnableHamForward(Ham_SecondaryAttack[1]);
				case CSW_SG550: EnableHamForward(Ham_SecondaryAttack[2]);
				case CSW_AWP: EnableHamForward(Ham_SecondaryAttack[3]);
				case CSW_G3SG1: EnableHamForward(Ham_SecondaryAttack[4]);
				case CSW_SG552: EnableHamForward(Ham_SecondaryAttack[5]);
			}
		}
		
		jb_block_user_weapons(guard, true, ~(1<<iWpn));
		jb_block_user_weapons(prisoner, true, ~(1<<iWpn));

		strip_user_weapons(prisoner);
		strip_user_weapons(guard);
		
		g_iTurn = prisoner;
		give_user_weapon(guard, sWpn, 0, 0);
		
		new param[2]; param[0] = give_user_weapon(prisoner, sWpn, 1, 0);
		remove_task(TASK_AUTOSHOT + prisoner);
		g_itime = get_pcvar_num(g_cvar_autoshot_length);
		set_task(1.0, "auto_shot", TASK_AUTOSHOT + prisoner, param, sizeof param, "b");
		
		set_hudmessage(69, 255, 69, -1.0, 0.73, 3, 6.0, 8.0, 3.0, 5.0, 4);
		show_hudmessage(0, ".: Shot 4 Shot :.^nThe Prisoner Goes first...");
	}
}

public jb_lr_duel_ended(pris, guar, duelid)
{
	if(duelid == g_iDuel_id)
	{
		// remove tasks
		remove_task(TASK_AUTOSHOT+pris);
		remove_task(TASK_AUTOSHOT+guar);
		// clear turns...
		g_iTurn = 0;
		// unblock duelers weapons....
		jb_block_user_weapons(pris, false);
		jb_block_user_weapons(guar, false);
		
		if(is_user_alive(pris))
			give_item(pris, "weapon_knife");
		if(is_user_alive(guar))
			give_item(guar, "weapon_knife");
		
		DisableHamForward(Ham_PrimaryAttack[g_user_weapon]);
		
		if((1<<iWeaponsid[g_user_weapon]) & WPNS_SCOPE_BITSUM)
		{
			switch( iWeaponsid[g_user_weapon] ) 
			{
				case CSW_SCOUT: DisableHamForward(Ham_SecondaryAttack[0]);
				case CSW_AUG: DisableHamForward(Ham_SecondaryAttack[1]);
				case CSW_SG550: DisableHamForward(Ham_SecondaryAttack[2]);
				case CSW_AWP: DisableHamForward(Ham_SecondaryAttack[3]);
				case CSW_G3SG1: DisableHamForward(Ham_SecondaryAttack[4]);
				case CSW_SG552: DisableHamForward(Ham_SecondaryAttack[5]);
			}
		}
	}
}

public auto_shot(const param[], const taskid)
{
	if(jb_get_current_duel() != g_iDuel_id)
	{
		remove_task(taskid);
		return;
	}
	
	new id = taskid - TASK_AUTOSHOT;
	
	if(g_iTurn != id || !is_user_alive(id) || !is_user_connected(id))
	{
		remove_task(taskid);
		return;
	}
	
	if(g_itime < 0)
	{
		new wpnEntity = param[0], wpns[32], num;
		new curweapon = iWeaponsid[g_user_weapon], wpnname[32];
		get_weaponname(curweapon, wpnname, charsmax(wpnname));
		if(get_user_weapons(id, wpns, num) & (1<<curweapon))
		{
			if(get_user_weapon(id) != curweapon)
			{
				engclient_cmd(id, wpnname);
			}
			
			if(wpnEntity)
			{
				ExecuteHamB(Ham_Weapon_PrimaryAttack, wpnEntity);
			}
		}
		else if( (wpnEntity=give_user_weapon(id, wpnname, 1)) )
		{
			if(get_user_weapon(id) != curweapon)
			{
				engclient_cmd(id, wpnname);
			}

			ExecuteHamB(Ham_Weapon_PrimaryAttack, wpnEntity);
		}
		
		remove_task(taskid);
	}
	else
	{
		static name[32];
		get_user_name(id, name, charsmax(name));
		set_hudmessage(59, 229, 59, -1.0, 0.75, 1, 1.0, 2.0, 0.1, 0.3, 3);
		show_hudmessage(0, "%s Auto shot in %d second's!", name, g_itime--);
	}
}

stock give_user_weapon(id, const wpname[], const clip=0, const bpammo=0)
{
	new wpnEntity;
	if(!(wpnEntity=find_ent_by_owner(-1, wpname, id)))
	{
		wpnEntity = give_item(id, wpname);

		if(wpnEntity <= 0)
		{
			return 0;
		}
	}

	cs_set_weapon_ammo(wpnEntity, clip);
	new wpnID = get_weaponid(wpname);

	if(wpnID > 0)
	{
		cs_set_user_bpammo(id, wpnID, bpammo);
	}

	return wpnEntity;
}

