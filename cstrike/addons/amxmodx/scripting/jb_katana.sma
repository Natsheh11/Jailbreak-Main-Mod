/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <hamsandwich>
#include <fakemeta>
#include <nvault>
#include <fun>
#include <jailbreak_core>
#include <jb_minigames_core>

#define PLUGIN "[JB] Katana"
#define AUTHOR "Natsheh"

new g_iMaxplayers, g_item, g_has_katana, KATANA_V_MODEL[64] = "models/jailbreak/v_katana.mdl", KATANA_P_MODEL[64] = "models/jailbreak/p_katana.mdl",
KATANA_SND_DIRECTORY[64] = "jailbreak/katana/katana";

#define WEAPON_LINUXDIFF 4
const m_pPlayer = 41;
const m_pActiveItem = 373;

new g_vault;
new const nvault_file[] = "jb_katana_owners";

new HamHook:Ham_Player_TakeDamage_Pre, HamHook:Ham_Knife_Deploy_Pre, HamHook:Ham_Knife_Deploy_Post, FW_FM_EMITSOUND = -1;

new g_cvar_katana_damage;

// knife sounds
new const knife_sounds[][] = {
	"_deploy1.wav",
	"_hit1.wav",
	"_hit2.wav",
	"_hit3.wav",
	"_hit4.wav",
	"_hitwall1.wav",
	"_slash1.wav",
	"_slash2.wav",
	"_stab.wav"
}

public plugin_precache()
{
	jb_ini_get_keyvalue("KATANA", "KATANA_V_MDL", KATANA_V_MODEL, charsmax(KATANA_V_MODEL));
	
	if(file_exists(KATANA_V_MODEL))
	{
		PRECACHE_WEAPON_VIEW_MODEL(KATANA_V_MODEL);
	}
	else
	{
		#if AMXX_VERSION_NUM > 182
		set_fail_state("file ^"%s^" is missing from the server!", KATANA_V_MODEL);
		#else
		new szText[256]
		formatex(szText, charsmax(szText), "file ^"%s^" is missing from the server!", KATANA_V_MODEL);
		set_fail_state(szText);
		#endif
	}
	
	jb_ini_get_keyvalue("KATANA", "KATANA_P_MDL", KATANA_P_MODEL, charsmax(KATANA_P_MODEL));
	
	if(file_exists(KATANA_P_MODEL))
	{
		PRECACHE_WEAPON_PLAYER_MODEL(KATANA_P_MODEL);
	}
	else
	{
		#if AMXX_VERSION_NUM > 182
		set_fail_state("file ^"%s^" is missing from the server!", KATANA_P_MODEL);
		#else
		new szText[256]
		formatex(szText, charsmax(szText), "file ^"%s^" is missing from the server!", KATANA_P_MODEL);
		set_fail_state(szText);
		#endif
	}
	
	new szSound[64];
	jb_ini_get_keyvalue("KATANA", "KATANA_SND_DIRECTORY", KATANA_SND_DIRECTORY, charsmax(KATANA_SND_DIRECTORY));
	
	for(new i, maxloop = sizeof knife_sounds; i < maxloop; i++)
	{
		formatex(szSound, charsmax(szSound), "%s%s", KATANA_SND_DIRECTORY, knife_sounds[i]);
		PRECACHE_SOUND(szSound);
	}
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_item = register_jailbreak_shopitem("Katana", "Slice the way you like", 1000000, TEAM_ANY);
	DisableHamForward((Ham_Knife_Deploy_Pre=RegisterHam(Ham_Item_Deploy, "weapon_knife", "fw_knife_deploy", false)));
	DisableHamForward((Ham_Knife_Deploy_Post=RegisterHam(Ham_Item_Deploy, "weapon_knife", "fw_knife_deploy", true)));
	DisableHamForward((Ham_Player_TakeDamage_Pre=RegisterHam(Ham_TakeDamage, "player", "fw_player_takedamage_pre", false)));
	
	g_cvar_katana_damage = register_cvar("jb_katana_damage", "1.15");
	
	g_iMaxplayers = get_maxplayers();
}

public fw_emitsound(const entity, const channel, const sound[], Float:vol, Float:attn, flag, pitch)
{
	if(!is_user_connected(entity)) return FMRES_IGNORED;
	
	if(!check_flag(g_has_katana,entity))
		return FMRES_IGNORED;
	
	static szWeaponplayermdl[64];
	pev(entity, pev_weaponmodel2, szWeaponplayermdl, charsmax(szWeaponplayermdl));
	
	if(!equal(KATANA_P_MODEL,szWeaponplayermdl))
		return FMRES_IGNORED;
	
	for(new i, sSound[64]; i < sizeof knife_sounds; i++)
	{
		if(equal(sound[13], knife_sounds[i]))
		{
			formatex(sSound, charsmax(sSound), "%s%s", KATANA_SND_DIRECTORY, knife_sounds[i])
			emit_sound(entity, channel, sSound, vol, attn, flag, pitch);
			return FMRES_SUPERCEDE;
		}
	}
	return FMRES_IGNORED;
}

public plugin_end()
{
	if(g_vault != INVALID_HANDLE) nvault_close(g_vault);
}

public plugin_cfg()
{
	g_vault = nvault_open(nvault_file);
	if(g_vault == INVALID_HANDLE) log_error(AMX_ERR_GENERAL, "Couldn't open %s nvault file!", nvault_file);
}

public client_putinserver(id)
{
	if(g_vault != INVALID_HANDLE)
	{
		new szAuthID[32];
		get_user_authid(id, szAuthID, charsmax(szAuthID));
		if(nvault_get(g_vault, szAuthID) >= 1)
		{
			get_katana(id);
		}
	}
}

get_katana(id)
{
	if(g_has_katana == 0)
	{
		EnableHamForward(Ham_Knife_Deploy_Pre);
		EnableHamForward(Ham_Knife_Deploy_Post);
		EnableHamForward(Ham_Player_TakeDamage_Pre);
		if(FW_FM_EMITSOUND == -1) FW_FM_EMITSOUND = register_forward(FM_EmitSound, "fw_emitsound");
	}
	
	set_flag(g_has_katana,id);
}

give_katana(id)
{
	get_katana(id);
	
	if(is_user_alive(id))
	{
		client_cmd(id, "weapon_knife");
		
		new ent = get_pdata_cbase(id, m_pActiveItem);
		
		if(pev_valid(ent))
		{
			ExecuteHamB(Ham_Item_Deploy, ent);
		}
	}
}

user_has_katana(id)
{
	if(get_user_weapon(id) == CSW_KNIFE && check_flag(g_has_katana,id))
	{
		new szModel[64];
		pev(id, pev_viewmodel2, szModel, charsmax(szModel))
		if(equal(szModel, KATANA_V_MODEL)) return true;
	}
	
	return false;
}

public jb_shop_item_postselect(id, itemid)
{
	if(itemid == g_item)
	{
		if(check_flag(g_has_katana,id)) return JB_SHOP_ITEM_IGNORE_COST;
	}
	
	return JB_IGNORED;
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == g_item)
	{
		give_katana(id);
		
		if(g_vault != INVALID_HANDLE)
		{
			new szAuthID[32];
			get_user_authid(id, szAuthID, charsmax(szAuthID));
			nvault_set(g_vault, szAuthID, "1");
		}
	}
}

public fw_player_takedamage_pre(victim, inflictor, attacker, Float:Damage, DamageBits)
{
	if((g_iMaxplayers >= attacker >= 1) && victim != attacker && attacker == inflictor)
	{
		if(user_has_katana(attacker))
		{
			SetHamParamFloat(4, Damage * get_pcvar_float(g_cvar_katana_damage));
			return HAM_HANDLED;
		}
	}
	
	return HAM_IGNORED;
}

public fw_knife_deploy(ent)
{
	static id;
	id = get_pdata_cbase(ent, m_pPlayer, WEAPON_LINUXDIFF);
	
	if(jb_user_has_event(id)) return HAM_IGNORED;
	
	if( (g_iMaxplayers >= id >= 1) && check_flag(g_has_katana,id) )
	{
		set_pev(id, pev_viewmodel2, KATANA_V_MODEL);
		set_pev(id, pev_weaponmodel2, KATANA_P_MODEL);
		return HAM_HANDLED;
	}

	return HAM_IGNORED;
}

bool:jb_user_has_event(id)
{
	if(jb_get_current_duel() > DUEL_NONE || jb_get_current_day() > DAY_NONE || jb_is_user_inminigame(id) >= 0) return true;
	return false;
}
