/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <jailbreak_core>
#include <jailbreak_gangs>
#include <nvault>

#define VIEW_BACK_100_UNITS -100.0
#define VIEW_FIRST_PERSON 0.0
#define VIEW_FRONT_100_UNITS 100.0
native set_player_camera(const id, const Float:flViewOffset);

#define PLUGIN "[JB] Costumes"
#define AUTHOR "Natsheh"

#if AMXX_VERSION_NUM > 182
#define client_disconnect(id) client_disconnected(id)
#endif

#define NO_ACCESS (1<<26)

enum _:COSTUME_MODELS
{
	SUBMODEL_NAME[32],
	MODEL_DIRECT[64],
	SUBMODEL_BODYID,
	COSTUMES:COSTUME_SET
}

enum _:COSTUMES (+=1)
{
	HEAD_COSTUME = 0,
	BACK_COSTUME,
	TAIL_COSTUME,
	FEET_COSTUME,
	FULL_COSTUME,
	
	MAX_COSTUME
}

new const szCostumes_menu_titles[][] = {
	"COSTUME_HEAD_MENU_TITLE",
	"COSTUME_BACK_MENU_TITLE",
	"COSTUME_TAIL_MENU_TITLE",
	"COSTUME_FEET_MENU_TITLE",
	"COSTUME_FULL_MENU_TITLE"
}

enum _:UPGRADE_DATA (+=1)
{
	UPGRADE_KILLS_REQUIRED
}

enum _:GANG_COSTUME_DATA (+=1)
{
	GANG_HEAD_COSTUME[32] = 0, 
	GANG_BACK_COSTUME[32], 
	GANG_TAIL_COSTUME[32], 
	GANG_FEET_COSTUME[32], 
	GANG_FULL_COSTUME[32],
	GANG_SAVE_INDEX
}

enum MENU_TYPES (+=1)
{
	MENU_ADMIN_MENU = 0,
	MENU_GANG_MENU,
	MENU_UPG_GANG_MENU
}

new const text_costumes[MAX_COSTUME][] = { "COSTUME_HEAD", "COSTUME_BACK", "COSTUME_TAIL", "COSTUME_FEET", "COSTUME_OUTFIT" }

new Array:costume_array[MAX_COSTUME] = { Invalid_Array, ... }, Trie:g_Trie_upgrade = Invalid_Trie, Trie:g_Trie_gang_costume = Invalid_Trie;
new g_count[MAX_COSTUME];
new g_user_costume[33][MAX_COSTUME];
new COSTUME_MENU[MENU_TYPES];
new jb_shop_itemid;
new COSTUME_MENU_IDS[MENU_TYPES][MAX_COSTUME];
new MENU_CALLBACKS[MENU_TYPES];
new Trie:g_trie_costume = Invalid_Trie;
new g_user_part[33];

public plugin_end()
{
	for(new i, Array:array_pointer; i < MAX_COSTUME; i++)
	{
		array_pointer = costume_array[i]
		if(array_pointer != Invalid_Array) ArrayDestroy(array_pointer);
	}
	
	if(g_Trie_upgrade != Invalid_Trie) TrieDestroy(g_Trie_upgrade);
	if(g_Trie_gang_costume != Invalid_Trie) TrieDestroy(g_Trie_gang_costume);
	if(g_trie_costume != Invalid_Trie) TrieDestroy(g_trie_costume);

	if( COSTUME_MENU[MENU_ADMIN_MENU] != INVALID_HANDLE ) menu_destroy( COSTUME_MENU[MENU_ADMIN_MENU] );
	if( COSTUME_MENU[MENU_GANG_MENU] != INVALID_HANDLE ) menu_destroy( COSTUME_MENU[MENU_GANG_MENU] );
	if( COSTUME_MENU[MENU_UPG_GANG_MENU] != INVALID_HANDLE ) menu_destroy( COSTUME_MENU[MENU_UPG_GANG_MENU] );

	for(new j = HEAD_COSTUME, maxloop = sizeof szCostumes_menu_titles; j < maxloop; j++)
	{
		if( COSTUME_MENU_IDS[MENU_ADMIN_MENU][j] != INVALID_HANDLE ) menu_destroy(COSTUME_MENU_IDS[MENU_ADMIN_MENU][j]);
		if( COSTUME_MENU_IDS[MENU_GANG_MENU][j] != INVALID_HANDLE ) menu_destroy(COSTUME_MENU_IDS[MENU_GANG_MENU][j]);
		if( COSTUME_MENU_IDS[MENU_UPG_GANG_MENU][j] != INVALID_HANDLE ) menu_destroy(COSTUME_MENU_IDS[MENU_UPG_GANG_MENU][j]);
	}
}

public plugin_precache()
{
	g_trie_costume = TrieCreate();
	
	for(new i; i < MAX_COSTUME; i++)
	{
		costume_array[i] = ArrayCreate(COSTUME_MODELS, 1); 
	}
	
	new sFile[64], file_name[] = "jailbreak_costumes.ini";
	get_configsdir(sFile, charsmax(sFile))
	format(sFile, charsmax(sFile), "%s/%s", sFile, file_name)
	
	new fp = fopen(sFile, "rt");
	
	if(fp)
	{
		new sbuffer[196], xArray[COSTUME_MODELS], i, bool:iskeyopen=false, key, szBodyid[6];
		
		while(!feof(fp))
		{
			fgets(fp, sbuffer, charsmax(sbuffer));
			trim(sbuffer);
			
			if(sbuffer[0] == ';' || sbuffer[0] == '/' && sbuffer[1] == '/' || strlen(sbuffer) <= 3) continue;
			
			if(sbuffer[0] == '[')
			{
				iskeyopen = false; key = -1;
				copyc(sbuffer, charsmax(sbuffer), sbuffer[1], ']')
				
				for(i = 0; i < MAX_COSTUME; i++)
				{
					if(equali(text_costumes[i][8], sbuffer, strlen(text_costumes[i][8])))
					{
						key = i;
						i = MAX_COSTUME;
					}
				}
				
				if(key > -1)
				{
					iskeyopen = true;
					continue;
				}
			}
			else if(iskeyopen && key > -1)
			{
				parse(sbuffer, xArray[SUBMODEL_NAME], charsmax(xArray[SUBMODEL_NAME]), xArray[MODEL_DIRECT], charsmax(xArray[MODEL_DIRECT]), szBodyid, charsmax(szBodyid))
				remove_quotes(szBodyid);
				remove_quotes(xArray[SUBMODEL_NAME]);
				remove_quotes(xArray[MODEL_DIRECT]);

				xArray[SUBMODEL_BODYID] = str_to_num(szBodyid);
				xArray[COSTUME_SET] = _:key;
				
				PRECACHE_WORLD_ITEM(xArray[MODEL_DIRECT]);
				ArrayPushArray(costume_array[key], xArray);
				TrieSetArray(g_trie_costume, xArray[SUBMODEL_NAME], xArray, sizeof xArray);
				g_count[key] ++;
			}
		}
		
		fclose(fp);
	}
	else if(!file_exists(sFile))
	{
		plugin_end();
		
		new sBuffer[64];
		
		for(new i; i < MAX_COSTUME; i++)
		{
			formatex(sBuffer, charsmax(sBuffer), "[%L]^n", LANG_SERVER, text_costumes[i])
			write_file(sFile, sBuffer);
		}
	}
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == jb_shop_itemid)
	{
		menu_display(id, COSTUME_MENU[MENU_ADMIN_MENU])
	}
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	jb_shop_itemid = register_jailbreak_shopitem("Costumes", "make yourself look pretty!", 100000, TEAM_ANY, (1<<0));
	
	register_clcmd("say /costume", "clcmd_costume")
	
	jb_gang_menu_additem("GANG_MENU_COSTUMES", "", "gang_menu_item_select")
	jb_register_gang_upgrade("Unlock a costume", "costume out your gang!", 0, "costume_unlocked");
	
	g_Trie_upgrade = TrieCreate();
	g_Trie_gang_costume = TrieCreate();
	
	new szText[128], szKey[64], iKills, xUPGArray[UPGRADE_DATA];
	
	COSTUME_MENU[MENU_ADMIN_MENU] = create_costumes_categories_menu("COSTUME_MENU_TITLE");
	COSTUME_MENU[MENU_GANG_MENU] = create_costumes_categories_menu("COSTUME_GANG_MENU_TITLE");
	COSTUME_MENU[MENU_UPG_GANG_MENU] = create_costumes_categories_menu("COSTUME_UPG_MENU_TITLE");
	
	formatex(szText, charsmax(szText), "%L", LANG_SERVER, "COSTUMES_REMOVE");
	menu_additem(COSTUME_MENU[MENU_ADMIN_MENU], szText, "REMOVE_COSTUMES");
	menu_additem(COSTUME_MENU[MENU_GANG_MENU], szText, "REMOVE_COSTUMES");
	
	for(new gIncrement, i, j = HEAD_COSTUME, size, xArray[COSTUME_MODELS], maxloop = sizeof szCostumes_menu_titles; j < maxloop; j++)
	{
		size = ArraySize(Array:costume_array[_:j]);
		for(i = 0; i < size; i++)
		{
			ArrayGetArray(Array:costume_array[_:j], i, xArray)
			
			gIncrement += 250;
			formatex(szKey, charsmax(szKey), "%s_KILLS_REQ", xArray[SUBMODEL_NAME]);
			num_to_str(gIncrement, szText, charsmax(szText));
			jb_ini_get_keyvalue("COSTUMES", szKey, szText, charsmax(szText));
			iKills = str_to_num(szText);
			
			xUPGArray[UPGRADE_KILLS_REQUIRED] = iKills;
			TrieSetArray(g_Trie_upgrade, xArray[SUBMODEL_NAME], xUPGArray, sizeof xUPGArray);
		}
	}
	
	new iCallback;
	iCallback = MENU_CALLBACKS[MENU_ADMIN_MENU] = menu_makecallback("menu_item_callback");
	create_costumes_menus(.callback=iCallback, .aMenus=COSTUME_MENU_IDS[MENU_ADMIN_MENU]);
	
	iCallback = MENU_CALLBACKS[MENU_GANG_MENU] = menu_makecallback("gang_menu_item_callback");
	create_costumes_menus(.callback=iCallback, .aMenus=COSTUME_MENU_IDS[MENU_GANG_MENU]);
	
	iCallback = MENU_CALLBACKS[MENU_UPG_GANG_MENU] = menu_makecallback("upggang_menu_item_callback");
	create_costumes_menus(.callback=iCallback, .aMenus=COSTUME_MENU_IDS[MENU_UPG_GANG_MENU]);

	load_gangs_costumes();
}

load_gangs_costumes()
{
	new nVault = nvault_open("jb_gangs_costumes");

	if(nVault != INVALID_HANDLE)
	{
		new iMaxLoop = nvault_get(nVault, "MAX_GANGS_COSTUMES");

		for(new i, szKey[16], szValue[256], szGangname[32], szItems[GANG_COSTUME_DATA]; i < iMaxLoop; i++)
		{
			szItems[ GANG_SAVE_INDEX ] = i;
			num_to_str(i, szKey, charsmax(szKey));
			nvault_get(nVault, szKey, szValue, charsmax(szValue));

			parse(szValue, szGangname, charsmax(szGangname),
				szItems[GANG_HEAD_COSTUME], charsmax(szItems[GANG_HEAD_COSTUME]),
				szItems[GANG_BACK_COSTUME], charsmax(szItems[GANG_BACK_COSTUME]),
				szItems[GANG_TAIL_COSTUME], charsmax(szItems[GANG_TAIL_COSTUME]),
				szItems[GANG_FEET_COSTUME], charsmax(szItems[GANG_FEET_COSTUME]),
				szItems[GANG_FULL_COSTUME], charsmax(szItems[GANG_FULL_COSTUME])
					);

			remove_quotes(szGangname);
			remove_quotes(szItems[GANG_HEAD_COSTUME]);
			remove_quotes(szItems[GANG_BACK_COSTUME]);
			remove_quotes(szItems[GANG_TAIL_COSTUME]);
			remove_quotes(szItems[GANG_FEET_COSTUME]);
			remove_quotes(szItems[GANG_FULL_COSTUME]);

			TrieSetArray(g_Trie_gang_costume, szGangname, szItems, sizeof szItems);
		}

		nvault_close(nVault);
	}
	else
	{
		log_error(AMX_ERR_GENERAL, "Error opening nvault file!");
	}
}

create_costumes_categories_menu(const title[])
{
	new szText[96];
	formatex(szText, charsmax(szText), "%L", LANG_SERVER, title);
	new menu = menu_create(szText, "menu_handler", true)
	
	for(new i = 0; i < MAX_COSTUME; i++)
	{
		formatex(szText, charsmax(szText), "%L", LANG_SERVER, text_costumes[i]);
		menu_additem(menu, szText, _, g_count[i] > 0 ? 0:NO_ACCESS)
	}
	
	return menu;
}

create_costumes_menus(callback=-1, paccess=0, aMenus[MAX_COSTUME])
{
	new xArray[COSTUME_MODELS]
	for(new i, j = HEAD_COSTUME, szText[96], size, maxloop = sizeof szCostumes_menu_titles; j < maxloop; j++)
	{
		formatex(szText, charsmax(szText), "%L", LANG_SERVER, szCostumes_menu_titles[j]);
		aMenus[j] = menu_create(szText, "menu_handler", true);
		
		size = ArraySize(Array:costume_array[_:j]);
		for(i = 0; i < size; i++)
		{
			ArrayGetArray(Array:costume_array[_:j], i, xArray)
			menu_additem(aMenus[j], xArray[SUBMODEL_NAME], xArray[SUBMODEL_NAME], paccess, callback)
		}
	}
}

public menu_item_callback(id, menu, item)
{
	return ITEM_ENABLED;
}

public gang_menu_item_callback(id, menu, item)
{
	new szGangname[32], szUpgradeItem[32], paccess, iCallback;
	menu_item_getinfo(menu, item, paccess, szUpgradeItem, charsmax(szUpgradeItem), "", 0, iCallback);
	jb_get_user_gang_name(id, szGangname, charsmax(szGangname));
	
	if(jb_get_gang_current_upg_level(szUpgradeItem, szGangname) == 0)
	{
		return ITEM_DISABLED;
	}
	
	return ITEM_IGNORE;
}

public upggang_menu_item_callback(id, menu, item)
{
	if(jb_get_user_gang_status(id) == GANG_NONE) return ITEM_DISABLED;

	new szUpgradeItem[32], paccess, iCallback;
	menu_item_getinfo(menu, item, paccess, szUpgradeItem, charsmax(szUpgradeItem), "", 0, iCallback);
	
	new xArray[UPGRADE_DATA], iKillsRequired, iGangKills = jb_get_user_gang_kills(id), szText[196];
	TrieGetArray(g_Trie_upgrade, szUpgradeItem, xArray, sizeof xArray);
	
	if(iGangKills < (iKillsRequired=xArray[UPGRADE_KILLS_REQUIRED]))
	{
		formatex(szText, charsmax(szText), "%s   Requires %d kills to unlock!", szUpgradeItem, iKillsRequired)
		menu_item_setname(menu, item, szText);
		return ITEM_DISABLED;
	}
	
	new szGangname[32];
	jb_get_user_gang_name(id, szGangname, charsmax(szGangname));
	
	if(jb_get_gang_current_upg_level(szUpgradeItem, szGangname) == 0)
	{
		new z=jb_get_user_gang_status(id);
		formatex(szText, charsmax(szText), "%s   unlock!", szUpgradeItem)
		menu_item_setname(menu, item, szText);
		return (z == GANG_OWNER || z == GANG_LEADER) ? ITEM_ENABLED:ITEM_DISABLED;
	}
	
	formatex(szText, charsmax(szText), "%s   unlocked!", szUpgradeItem)
	menu_item_setname(menu, item, szText);
	return ITEM_DISABLED;
}

public gang_menu_item_select( player_index, gang_index, const gang_name[], item_name[] )
{
	menu_display(player_index, COSTUME_MENU[MENU_GANG_MENU]);
	return PLUGIN_HANDLED;
}

public costume_unlocked( const id, const gangid, const gangname[], Upgrade_Index )
{
	menu_display(id, COSTUME_MENU[MENU_UPG_GANG_MENU]);
	return PLUGIN_HANDLED;
}

public menu_handler(id, menu, item)
{
	if(item == MENU_EXIT)
	{
		if(menu == COSTUME_MENU[MENU_GANG_MENU] && is_user_connected(id))
		{
			jb_show_user_gang_menu(id);
		}

		return PLUGIN_HANDLED;
	}
	
	if(menu == COSTUME_MENU[MENU_ADMIN_MENU])
	{
		g_user_part[id] = item;

		switch( item )
		{
			case 5:
			{
				remove_player_costumes(id, _:FULL_COSTUME);
				cprint_chat(id, _, "%L", id, "CHAT_COSTUMES_REMOVED");
			}
			default:
			{
				menu_display(id, COSTUME_MENU_IDS[MENU_ADMIN_MENU][item]);
			}
		}
		
		return PLUGIN_HANDLED;
	}
	
	if(menu == COSTUME_MENU[MENU_GANG_MENU])
	{
		g_user_part[id] = item;

		switch( item )
		{
			case 5:
			{
				new z;
				if((z=jb_get_user_gang_status(id)) != GANG_OWNER && z != GANG_LEADER)
				{
					client_print(id, print_center, "Access denied!");
					menu_display(id, menu);
					return PLUGIN_HANDLED;
				}
				
				new players[32], szUserGangName[32], szGangname[32], pnum;
				get_players(players, pnum, "h");
				jb_get_user_gang_name(id, szUserGangName, charsmax(szUserGangName));
				
				for(new x, player; x <  pnum; x++)
				{
					player = players[x];
					
					jb_get_user_gang_name(player, szGangname, charsmax(szGangname))
					if(equal(szUserGangName, szGangname))
					{
						remove_player_costumes(player, _:FULL_COSTUME)
					}
				}

				for(new i; i < MAX_COSTUME; i++)
				{
					save_gang_costumes(szUserGangName, "", i);
				}
				
				client_print(id, print_center, "You have removed all of your gang's costumes!");
				cprint_chat(id, _, "%L", id, "CHAT_COSTUMES_REMOVED")
			}
			default:
			{
				menu_display(id, COSTUME_MENU_IDS[MENU_GANG_MENU][item]);
			}
		}
		
		return PLUGIN_HANDLED;
	}
	
	if(menu == COSTUME_MENU[MENU_UPG_GANG_MENU])
	{
		g_user_part[id] = item;
		menu_display(id, COSTUME_MENU_IDS[MENU_UPG_GANG_MENU][item]);
		
		return PLUGIN_HANDLED;
	}

	new szUpgradeItem[32], paccess, iCallback, part = g_user_part[id];
	menu_item_getinfo(menu, item, paccess, szUpgradeItem, charsmax(szUpgradeItem), "", 0, iCallback);
	
	if(iCallback == MENU_CALLBACKS[MENU_UPG_GANG_MENU])
	{
		new z;
		if((z=jb_get_user_gang_status(id)) == GANG_OWNER || z == GANG_LEADER)
		{
			new szUserGangName[32];
			jb_get_user_gang_name(id, szUserGangName, charsmax(szUserGangName));
			jb_set_gang_item_upg_level(szUserGangName, szUpgradeItem, 1)
			
			client_print(id, print_center, "You have unlocked the %s costume!", szUpgradeItem);

			new iPage, iMenu, iNewMenu;
			player_menu_info(id, iMenu, iNewMenu, iPage);
			menu_display(id, menu, iPage);
			return PLUGIN_HANDLED;
		}
	}
	else if(iCallback == MENU_CALLBACKS[MENU_GANG_MENU])
	{
		new z;
		if((z=jb_get_user_gang_status(id)) == GANG_OWNER || z == GANG_LEADER)
		{
			new players[32], szUserGangName[32], xArray2[COSTUME_MODELS], szGangname[32], pnum;
			get_players(players, pnum, "h");
			TrieGetArray(g_trie_costume, szUpgradeItem, xArray2, sizeof xArray2);
			jb_get_user_gang_name(id, szUserGangName, charsmax(szUserGangName));
			
			for(new x, player; x <  pnum; x++)
			{
				player = players[x];
				
				jb_get_user_gang_name(player, szGangname, charsmax(szGangname))
				if(equal(szUserGangName, szGangname))
				{
					if(part == FULL_COSTUME || g_user_costume[player][FULL_COSTUME] > 0)
					{
						remove_player_costumes(player, FULL_COSTUME)
					}

					costume(player, part, xArray2[MODEL_DIRECT], xArray2[SUBMODEL_BODYID])
				}
			}
			
			client_print(id, print_center, "You have selected %s to be your gang costume!", xArray2[SUBMODEL_NAME]);

			save_gang_costumes(szUserGangName, xArray2[SUBMODEL_NAME], part);

			//Show costume
			switch( part )
			{
				case HEAD_COSTUME: set_player_camera(id, VIEW_FRONT_100_UNITS);
				case BACK_COSTUME: set_player_camera(id, VIEW_BACK_100_UNITS);
				case TAIL_COSTUME: set_player_camera(id, VIEW_BACK_100_UNITS);
				case FEET_COSTUME: set_player_camera(id, VIEW_FRONT_100_UNITS);
				default: set_player_camera(id, VIEW_BACK_100_UNITS);
			}

			new userid = get_user_userid(id);
			remove_task(userid);
			set_task(3.0, "reset_player_view", userid);

			menu_display(id, COSTUME_MENU[MENU_GANG_MENU]);
			return PLUGIN_HANDLED;
		}
		
		return PLUGIN_HANDLED;
	}
	else if(iCallback == MENU_CALLBACKS[MENU_ADMIN_MENU])
	{
		new xArray[COSTUME_MODELS];
		TrieGetArray(g_trie_costume, szUpgradeItem, xArray, sizeof xArray);
		
		if(g_user_costume[id][FULL_COSTUME] > 0)
		{
			remove_player_costumes(id, FULL_COSTUME)
		}

		//Show costume
		switch( part )
		{
			case HEAD_COSTUME: set_player_camera(id, VIEW_FRONT_100_UNITS);
			case BACK_COSTUME: set_player_camera(id, VIEW_BACK_100_UNITS);
			case TAIL_COSTUME: set_player_camera(id, VIEW_BACK_100_UNITS);
			case FEET_COSTUME: set_player_camera(id, VIEW_FRONT_100_UNITS);
			default: set_player_camera(id, VIEW_BACK_100_UNITS);
		}

		// reset player view
		new userid = get_user_userid(id);
		remove_task(userid);
		set_task(3.0, "reset_player_view", userid);

		//Set costume
		switch( part )
		{
			case FULL_COSTUME:
			{
				ArrayGetArray(Array:costume_array[FULL_COSTUME], item, xArray);
				remove_player_costumes(id, FULL_COSTUME);
				costume(id, FULL_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID]);
				cprint_chat(id, _, "%L", id, "CHAT_COSTUME_SET_FULL", xArray[SUBMODEL_NAME]);
			}
	
			case HEAD_COSTUME:
			{
				remove_player_costumes(id, HEAD_COSTUME);
				costume(id, _:HEAD_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID]);
				cprint_chat(id, _, "%L", id, "CHAT_COSTUME_SET_HEAD", xArray[SUBMODEL_NAME]);
			}

			case BACK_COSTUME:
			{
				remove_player_costumes(id, BACK_COSTUME);
				costume(id, BACK_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID]);
				cprint_chat(id, _, "%L", id, "CHAT_COSTUME_SET_BACK", xArray[SUBMODEL_NAME]);
			}

			case TAIL_COSTUME:
			{
				remove_player_costumes(id, TAIL_COSTUME);
				costume(id, TAIL_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID]);
				cprint_chat(id, _, "%L", id, "CHAT_COSTUME_SET_TAIL", xArray[SUBMODEL_NAME]);
			}

			case FEET_COSTUME:
			{
				remove_player_costumes(id, FEET_COSTUME);
				costume(id, FEET_COSTUME, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID]);
				cprint_chat(id, _, "%L", id, "CHAT_COSTUME_SET_FEET", xArray[SUBMODEL_NAME]);
			}
		}

		menu_display(id, COSTUME_MENU[MENU_ADMIN_MENU]);
	}
	return PLUGIN_HANDLED;
}

public reset_player_view(userid)
{
	new id = find_player("k", userid);

	if(!id) return;

	set_player_camera(id, VIEW_FIRST_PERSON);
}

public clcmd_costume(id)
{
	if(!is_user_admin(id)) return 1;
	menu_display(id, COSTUME_MENU[MENU_ADMIN_MENU]);
	return 1;
}

save_gang_costumes(const szGangname[], const szCostumeName[], const part)
{
	new nVault = nvault_open("jb_gangs_costumes");

	if(nVault == INVALID_HANDLE)
	{
		log_error(AMX_ERR_GENERAL, "Error opening nvault file!");
	}

	new save_index = 0;

	if(nVault != INVALID_HANDLE && !TrieKeyExists(g_Trie_gang_costume, szGangname))
	{
		save_index = nvault_get(nVault, "MAX_GANGS_COSTUMES");
	}

	new xArray[GANG_COSTUME_DATA];
	TrieGetArray(g_Trie_gang_costume, szGangname, xArray, sizeof xArray);
	if(save_index > 0) xArray[GANG_SAVE_INDEX] = save_index;

	if(part != FULL_COSTUME)
	{
		xArray[GANG_FULL_COSTUME][0] = EOS;
	}

	switch( part )
	{
		case HEAD_COSTUME : copy(xArray[GANG_HEAD_COSTUME], charsmax(xArray[GANG_HEAD_COSTUME]), szCostumeName);
		case BACK_COSTUME : copy(xArray[GANG_BACK_COSTUME], charsmax(xArray[GANG_BACK_COSTUME]), szCostumeName);
		case TAIL_COSTUME : copy(xArray[GANG_TAIL_COSTUME], charsmax(xArray[GANG_TAIL_COSTUME]), szCostumeName);
		case FEET_COSTUME : copy(xArray[GANG_FEET_COSTUME], charsmax(xArray[GANG_FEET_COSTUME]), szCostumeName);
		case FULL_COSTUME :
		{
			xArray[GANG_HEAD_COSTUME][0] = EOS;
			xArray[GANG_BACK_COSTUME][0] = EOS;
			xArray[GANG_TAIL_COSTUME][0] = EOS;
			xArray[GANG_FEET_COSTUME][0] = EOS;
			copy(xArray[GANG_FULL_COSTUME], charsmax(xArray[GANG_FULL_COSTUME]), szCostumeName);
		}
	}

	TrieSetArray(g_Trie_gang_costume, szGangname, xArray, sizeof xArray);

	if(nVault != INVALID_HANDLE)
	{
		new szText[256], szKey[16];
		formatex(szText, charsmax(szText), "^"%s^" ^"%s^" ^"%s^" ^"%s^" ^"%s^" ^"%s^"", szGangname, 
			xArray[GANG_HEAD_COSTUME],
			xArray[GANG_BACK_COSTUME],
			xArray[GANG_TAIL_COSTUME],
			xArray[GANG_FEET_COSTUME],
			xArray[GANG_FULL_COSTUME]);
		num_to_str(save_index, szKey, charsmax(szKey));
		nvault_set(nVault, szKey, szText);
		num_to_str(++save_index, szKey, charsmax(szKey));
		nvault_set(nVault, "MAX_GANGS_COSTUMES", szKey);

		nvault_close(nVault);
	}
}

public client_putinserver(id)
{
	new szGangname[32];
	jb_get_user_gang_name(id, szGangname, charsmax(szGangname));
	if(TrieKeyExists(g_Trie_gang_costume, szGangname))
	{
		new xTemp[GANG_COSTUME_DATA], xArray[COSTUME_MODELS], xXTemp[32];
		TrieGetArray(g_Trie_gang_costume, szGangname, xTemp, sizeof xTemp);
		
		for(new GANG_COSTUME_DATA:i = GANG_COSTUME_DATA:HEAD_COSTUME; _:i < _:MAX_COSTUME; _:i++)
		{
			switch( i )
			{
				case HEAD_COSTUME : copy(xXTemp, charsmax(xXTemp), xTemp[GANG_HEAD_COSTUME]);
				case BACK_COSTUME : copy(xXTemp, charsmax(xXTemp), xTemp[GANG_BACK_COSTUME]);
				case TAIL_COSTUME : copy(xXTemp, charsmax(xXTemp), xTemp[GANG_TAIL_COSTUME]);
				case FEET_COSTUME : copy(xXTemp, charsmax(xXTemp), xTemp[GANG_FEET_COSTUME]);
				case FULL_COSTUME : copy(xXTemp, charsmax(xXTemp), xTemp[GANG_FULL_COSTUME]);
			}

			if(xXTemp[0] != EOS)
			{
				TrieGetArray(g_trie_costume, xXTemp, xArray, sizeof xArray);
				costume(id, COSTUMES:i, xArray[MODEL_DIRECT], xArray[SUBMODEL_BODYID]);
			}
		}
	}
}

public client_disconnect(id)
{
	remove_player_costumes(id, FULL_COSTUME);
}

remove_player_costumes(id, Part)
{
	switch( Part )
	{
		case FULL_COSTUME:
		{
			for(new COSTUMES:i, j; _:i < _:MAX_COSTUME; i++)
			{
				j = g_user_costume[id][_:i];
				if(j > 0)
				{
					if(pev_valid(j))
					{
						//engfunc(EngFunc_RemoveEntity, j);
						set_pev(j, pev_flags, FL_KILLME);
						dllfunc(DLLFunc_Think, j);
					}
					
					g_user_costume[id][_:i] = _:0;
				}
			}
		}
		default:
		{
			new j = g_user_costume[id][Part];
			if(j > 0)
			{
				if(pev_valid(j))
				{
					//engfunc(EngFunc_RemoveEntity, j);
					set_pev(j, pev_flags, FL_KILLME);
					dllfunc(DLLFunc_Think, j);
				}
				
				g_user_costume[id][Part] = 0;
			}
		}
	}
}

costume(id, any:part, model[], anim)
{
	new ent = g_user_costume[id][part];
	
	if(!ent || !pev_valid(ent))
	{
		ent = g_user_costume[id][part] = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"));
		
		if(!ent) return;
		
		set_pev(ent, pev_movetype, MOVETYPE_FOLLOW);
		set_pev(ent, pev_aiment, id);
		set_pev(ent, pev_rendermode, kRenderNormal);
		
	}
	
	engfunc(EngFunc_SetModel, ent, model);
	set_pev(ent, pev_body, anim);
	set_pev(ent, pev_sequence, anim);
	set_pev(ent, pev_animtime, get_gametime());
	set_pev(ent, pev_framerate, 1.0);
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1033\\ f0\\ fs16 \n\\ par }
*/
