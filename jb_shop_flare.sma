/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <jailbreak_core>
#include <fun>
#include <fakemeta>
#include <hamsandwich>
#include <xs>

#define PLUGIN "[JB] Shop: Flare"
#define AUTHOR "Natsheh"

#define PEV_FLARE_COLOR pev_punchangle
#define PEV_NADE_TYPE	pev_iuser4

#define FLARE_TYPE	67898

#define TASK_FLARE_DURATION 100000
#define TASK_FLARE_PLAYSOUND 200000

new V_FLAREMDL[64] = "models/jailbreak/v_flare.mdl";
new P_FLAREMDL[64] = "models/jailbreak/p_flare.mdl";
new W_FLAREMDL[64] = "models/jailbreak/w_flare.mdl";

new ITEM_ID;
new const ITEM_NAME[] = "Flare";
new const ITEM_INFO[] = "Lights out the area!";
const ITEM_COST = 5000;
const ITEM_TEAM = TEAM_ANY;

// Default sounds
new const sound_grenade_flare_explode[] = "items/nvg_on.wav" ;

new g_has_flare, g_trailSpr;
new const g_sprite_grenade_trail[] = "sprites/laserbeam.spr";

public plugin_precache()
{
	jb_ini_get_keyvalue("FLARE", "FLARE_V_MDL", V_FLAREMDL, charsmax(V_FLAREMDL));
	jb_ini_get_keyvalue("FLARE", "FLARE_P_MDL", P_FLAREMDL, charsmax(P_FLAREMDL));
	jb_ini_get_keyvalue("FLARE", "FLARE_W_MDL", W_FLAREMDL, charsmax(W_FLAREMDL));
	PRECACHE_WEAPON_VIEW_MODEL(V_FLAREMDL);
	PRECACHE_WEAPON_PLAYER_MODEL(P_FLAREMDL);
	PRECACHE_WEAPON_WORLD_MODEL(W_FLAREMDL);
	g_trailSpr = PRECACHE_SPRITE_I(g_sprite_grenade_trail);
}

public plugin_init()
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	ITEM_ID = register_jailbreak_shopitem(ITEM_NAME, ITEM_INFO, ITEM_COST, ITEM_TEAM);
	
	RegisterHam(Ham_Item_Deploy, "weapon_flashbang", "fw_flashbang_deploy_post", 1)
	register_forward(FM_SetModel, "fw_setmodel_pre")
	RegisterHam(Ham_Spawn, "player", "fw_player_respawn_post", 1)
	RegisterHam(Ham_Think, "grenade", "fw_grenade_think_post", 1)
}

public fw_player_respawn_post(id)
	if(is_user_alive(id)) remove_flag(g_has_flare,id);

public jb_shop_item_preselect(id, itemid)
{
	if(itemid == ITEM_ID)
	{
		if(check_flag(g_has_flare,id)) return JB_MENU_ITEM_UNAVAILABLE;
	}
	return PLUGIN_CONTINUE;
}

public jb_shop_item_postselect(id, itemid) {
	if(itemid == ITEM_ID) if(check_flag(g_has_flare,id)) return JB_MENU_ITEM_UNAVAILABLE;
	return PLUGIN_CONTINUE;
}

public jb_shop_item_bought(id, itemid)
{
	if(itemid == ITEM_ID)
	{
		give_flare(id);
	}
}

give_flare(id)
{
	set_flag(g_has_flare,id);
	new wpnEntity = give_item(id, "weapon_flashbang");

	engclient_cmd(id, "weapon_flashbang");
	if( pev_valid(wpnEntity) ) ExecuteHamB(Ham_Item_Deploy, wpnEntity);
	
	if(get_user_weapon(id) == CSW_FLASHBANG)
	{
		set_pev(id, pev_viewmodel2, V_FLAREMDL);
		set_pev(id, pev_weaponmodel2, P_FLAREMDL);
	}
}

public fw_setmodel_pre(ent, const model[])
{
	if(!pev_valid(ent)) return FMRES_IGNORED;
	
	// Check classname;
	static sClname[32];
	pev(ent, pev_classname, sClname, charsmax(sClname))
	if(!equal(sClname, "grenade")) return FMRES_IGNORED;
	
	// Get damage time of grenade
	static Float:dmgtime;
	pev(ent, pev_dmgtime, dmgtime);
	
	// Grenade not yet thrown
	if (dmgtime == 0.0)
		return FMRES_IGNORED;
	
	new id = pev(ent, pev_owner);
	if(!id || !check_flag(g_has_flare,id)) return FMRES_IGNORED;
	
	// set world model..
	engfunc(EngFunc_SetModel, ent, W_FLAREMDL);
	
	new Float:fColor[3];
	fColor[0] = random_float(0.0,255.0);
	fColor[1] = random_float(0.0,255.0);
	fColor[2] = random_float(0.0,255.0);
	
	engfunc(EngFunc_SetSize, ent, Float:{-0.3,-0.3,-0.5}, Float:{0.3,0.3,2.5});
	set_pev(ent, pev_renderfx, kRenderFxGlowShell);
	set_pev(ent, pev_rendermode, kRenderNormal);
	set_pev(ent, pev_rendercolor, fColor);
	set_pev(ent, pev_renderamt, 30.0);
	new Float:get_time = get_gametime();
	set_pev(ent, PEV_NADE_TYPE, FLARE_TYPE);
	set_pev(ent, PEV_FLARE_COLOR, fColor);
	set_pev(ent, pev_nextthink, get_time + 3.0);
	set_pev(ent, pev_takedamage, DAMAGE_YES);
	set_pev(ent, pev_flags, pev(ent, pev_flags) | FL_GODMODE);
	set_pev(ent, pev_health, 99999.0);
	set_pev(ent, pev_gravity, 0.75);
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BEAMFOLLOW); // TE id
	write_short(ent); // entity
	write_short(g_trailSpr); // sprite
	write_byte(20); // life
	write_byte(10); // width
	write_byte(floatround(fColor[0])); // r
	write_byte(floatround(fColor[1])); // g
	write_byte(floatround(fColor[2])); // b
	write_byte(200); // brightness
	message_end();
	
	set_pev(ent, pev_dmgtime, get_time + 9999.0);
	set_task(30.0, "task_flare_ends", ent + TASK_FLARE_DURATION);
	set_task(3.0, "task_sound_play", ent + TASK_FLARE_PLAYSOUND);
	
	remove_flag(g_has_flare,id);
	
	return FMRES_SUPERCEDE;
}

public task_sound_play(ent)
{
	ent -= TASK_FLARE_PLAYSOUND;
	if(pev_valid(ent) && pev(ent, PEV_NADE_TYPE) == FLARE_TYPE)
	{
		emit_sound(ent, CHAN_WEAPON, sound_grenade_flare_explode, 1.0, ATTN_NORM, 0, PITCH_NORM);
		set_pev(ent, pev_owner, 33);
	}
}

public fw_grenade_think_post(const wEnt)
{
	if(!pev_valid(wEnt)) return FMRES_IGNORED;
	
	if(pev(wEnt, PEV_NADE_TYPE) != FLARE_TYPE) return FMRES_IGNORED;
	
	flare_lighting(wEnt);
	set_pev(wEnt, pev_nextthink, get_gametime() + 0.5);
	
	return FMRES_IGNORED;
}

// Flare Lighting Effects
flare_lighting(entity)
{
	// Get origin and color
	static Float:origin[3], Float:fColor[3], iColor[3];
	pev(entity, PEV_FLARE_COLOR, fColor);
	FVecIVec(fColor, iColor);
	pev(entity, pev_origin, origin);
	
	// Lighting
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0);
	write_byte(TE_DLIGHT);
	engfunc(EngFunc_WriteCoord, origin[0]);
	engfunc(EngFunc_WriteCoord, origin[1]);
	engfunc(EngFunc_WriteCoord, origin[2]);
	write_byte(25); // radius
	write_byte(iColor[0]);
	write_byte(iColor[1]);
	write_byte(iColor[2]);
	write_byte(5);
	write_byte(1);
	message_end();
	
	// Sparks
	engfunc(EngFunc_MessageBegin, MSG_PVS, SVC_TEMPENTITY, origin, 0);
	write_byte(TE_SPARKS); // TE id
	engfunc(EngFunc_WriteCoord, origin[0]); // x
	engfunc(EngFunc_WriteCoord, origin[1]); // y
	engfunc(EngFunc_WriteCoord, origin[2]); // z
	message_end();
}

public task_flare_ends(ent)
{
	ent -= TASK_FLARE_DURATION;
	if(pev_valid(ent) && pev(ent, PEV_NADE_TYPE) == FLARE_TYPE)
	{
		set_pev(ent, pev_flags, FL_KILLME);
		dllfunc(DLLFunc_Think, ent);
	}
}

public fw_flashbang_deploy_post(const wEnt)
{
	if(!pev_valid(wEnt)) return HAM_IGNORED;
	
	new id = pev(wEnt, pev_owner);
	if(!id || !check_flag(g_has_flare,id)) return HAM_IGNORED;
	
	set_pev(id, pev_viewmodel2, V_FLAREMDL);
	set_pev(id, pev_weaponmodel2, P_FLAREMDL);
	return HAM_HANDLED;
}
